/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen


import java.lang.Integer

import javax.annotation.Generated

import jooq.mysql.gen.tables.Annotation
import jooq.mysql.gen.tables.Annotationfragment
import jooq.mysql.gen.tables.Crossvalidationevent
import jooq.mysql.gen.tables.Crossvalidationfold
import jooq.mysql.gen.tables.Dataframe
import jooq.mysql.gen.tables.Dataframecolumn
import jooq.mysql.gen.tables.Dataframemetadata
import jooq.mysql.gen.tables.Dataframesplit
import jooq.mysql.gen.tables.Event
import jooq.mysql.gen.tables.Experiment
import jooq.mysql.gen.tables.Experimentrun
import jooq.mysql.gen.tables.Feature
import jooq.mysql.gen.tables.Fitevent
import jooq.mysql.gen.tables.Gridcellcrossvalidation
import jooq.mysql.gen.tables.Gridsearchcrossvalidationevent
import jooq.mysql.gen.tables.Hyperparameter
import jooq.mysql.gen.tables.Linearmodel
import jooq.mysql.gen.tables.Linearmodelterm
import jooq.mysql.gen.tables.Metadatakv
import jooq.mysql.gen.tables.Metricevent
import jooq.mysql.gen.tables.Modelobjectivehistory
import jooq.mysql.gen.tables.Pipelinestage
import jooq.mysql.gen.tables.Project
import jooq.mysql.gen.tables.Randomsplitevent
import jooq.mysql.gen.tables.Transformer
import jooq.mysql.gen.tables.Transformerspec
import jooq.mysql.gen.tables.Transformevent
import jooq.mysql.gen.tables.Treelink
import jooq.mysql.gen.tables.Treemodel
import jooq.mysql.gen.tables.Treemodelcomponent
import jooq.mysql.gen.tables.Treenode
import jooq.mysql.gen.tables.records.AnnotationRecord
import jooq.mysql.gen.tables.records.AnnotationfragmentRecord
import jooq.mysql.gen.tables.records.CrossvalidationeventRecord
import jooq.mysql.gen.tables.records.CrossvalidationfoldRecord
import jooq.mysql.gen.tables.records.DataframeRecord
import jooq.mysql.gen.tables.records.DataframecolumnRecord
import jooq.mysql.gen.tables.records.DataframemetadataRecord
import jooq.mysql.gen.tables.records.DataframesplitRecord
import jooq.mysql.gen.tables.records.EventRecord
import jooq.mysql.gen.tables.records.ExperimentRecord
import jooq.mysql.gen.tables.records.ExperimentrunRecord
import jooq.mysql.gen.tables.records.FeatureRecord
import jooq.mysql.gen.tables.records.FiteventRecord
import jooq.mysql.gen.tables.records.GridcellcrossvalidationRecord
import jooq.mysql.gen.tables.records.GridsearchcrossvalidationeventRecord
import jooq.mysql.gen.tables.records.HyperparameterRecord
import jooq.mysql.gen.tables.records.LinearmodelRecord
import jooq.mysql.gen.tables.records.LinearmodeltermRecord
import jooq.mysql.gen.tables.records.MetadatakvRecord
import jooq.mysql.gen.tables.records.MetriceventRecord
import jooq.mysql.gen.tables.records.ModelobjectivehistoryRecord
import jooq.mysql.gen.tables.records.PipelinestageRecord
import jooq.mysql.gen.tables.records.ProjectRecord
import jooq.mysql.gen.tables.records.RandomspliteventRecord
import jooq.mysql.gen.tables.records.TransformerRecord
import jooq.mysql.gen.tables.records.TransformerspecRecord
import jooq.mysql.gen.tables.records.TransformeventRecord
import jooq.mysql.gen.tables.records.TreelinkRecord
import jooq.mysql.gen.tables.records.TreemodelRecord
import jooq.mysql.gen.tables.records.TreemodelcomponentRecord
import jooq.mysql.gen.tables.records.TreenodeRecord

import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.UniqueKey
import org.jooq.impl.AbstractKeys

import scala.Array


/**
 * A class modelling foreign key relationships between tables of the <code>modeldb</code> 
 * schema
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
object Keys {

  // -------------------------------------------------------------------------
  // IDENTITY definitions
  // -------------------------------------------------------------------------

  val IDENTITY_ANNOTATION = Identities0.IDENTITY_ANNOTATION
  val IDENTITY_ANNOTATIONFRAGMENT = Identities0.IDENTITY_ANNOTATIONFRAGMENT
  val IDENTITY_CROSSVALIDATIONEVENT = Identities0.IDENTITY_CROSSVALIDATIONEVENT
  val IDENTITY_CROSSVALIDATIONFOLD = Identities0.IDENTITY_CROSSVALIDATIONFOLD
  val IDENTITY_DATAFRAME = Identities0.IDENTITY_DATAFRAME
  val IDENTITY_DATAFRAMECOLUMN = Identities0.IDENTITY_DATAFRAMECOLUMN
  val IDENTITY_DATAFRAMEMETADATA = Identities0.IDENTITY_DATAFRAMEMETADATA
  val IDENTITY_DATAFRAMESPLIT = Identities0.IDENTITY_DATAFRAMESPLIT
  val IDENTITY_EVENT = Identities0.IDENTITY_EVENT
  val IDENTITY_EXPERIMENT = Identities0.IDENTITY_EXPERIMENT
  val IDENTITY_EXPERIMENTRUN = Identities0.IDENTITY_EXPERIMENTRUN
  val IDENTITY_FEATURE = Identities0.IDENTITY_FEATURE
  val IDENTITY_FITEVENT = Identities0.IDENTITY_FITEVENT
  val IDENTITY_GRIDCELLCROSSVALIDATION = Identities0.IDENTITY_GRIDCELLCROSSVALIDATION
  val IDENTITY_GRIDSEARCHCROSSVALIDATIONEVENT = Identities0.IDENTITY_GRIDSEARCHCROSSVALIDATIONEVENT
  val IDENTITY_HYPERPARAMETER = Identities0.IDENTITY_HYPERPARAMETER
  val IDENTITY_LINEARMODEL = Identities0.IDENTITY_LINEARMODEL
  val IDENTITY_LINEARMODELTERM = Identities0.IDENTITY_LINEARMODELTERM
  val IDENTITY_METADATAKV = Identities0.IDENTITY_METADATAKV
  val IDENTITY_METRICEVENT = Identities0.IDENTITY_METRICEVENT
  val IDENTITY_MODELOBJECTIVEHISTORY = Identities0.IDENTITY_MODELOBJECTIVEHISTORY
  val IDENTITY_PIPELINESTAGE = Identities0.IDENTITY_PIPELINESTAGE
  val IDENTITY_PROJECT = Identities0.IDENTITY_PROJECT
  val IDENTITY_RANDOMSPLITEVENT = Identities0.IDENTITY_RANDOMSPLITEVENT
  val IDENTITY_TRANSFORMER = Identities0.IDENTITY_TRANSFORMER
  val IDENTITY_TRANSFORMERSPEC = Identities0.IDENTITY_TRANSFORMERSPEC
  val IDENTITY_TRANSFORMEVENT = Identities0.IDENTITY_TRANSFORMEVENT
  val IDENTITY_TREELINK = Identities0.IDENTITY_TREELINK
  val IDENTITY_TREEMODEL = Identities0.IDENTITY_TREEMODEL
  val IDENTITY_TREEMODELCOMPONENT = Identities0.IDENTITY_TREEMODELCOMPONENT
  val IDENTITY_TREENODE = Identities0.IDENTITY_TREENODE

  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  val KEY_ANNOTATION_PRIMARY = UniqueKeys0.KEY_ANNOTATION_PRIMARY
  val KEY_ANNOTATIONFRAGMENT_PRIMARY = UniqueKeys0.KEY_ANNOTATIONFRAGMENT_PRIMARY
  val KEY_CROSSVALIDATIONEVENT_PRIMARY = UniqueKeys0.KEY_CROSSVALIDATIONEVENT_PRIMARY
  val KEY_CROSSVALIDATIONFOLD_PRIMARY = UniqueKeys0.KEY_CROSSVALIDATIONFOLD_PRIMARY
  val KEY_DATAFRAME_PRIMARY = UniqueKeys0.KEY_DATAFRAME_PRIMARY
  val KEY_DATAFRAMECOLUMN_PRIMARY = UniqueKeys0.KEY_DATAFRAMECOLUMN_PRIMARY
  val KEY_DATAFRAMEMETADATA_PRIMARY = UniqueKeys0.KEY_DATAFRAMEMETADATA_PRIMARY
  val KEY_DATAFRAMESPLIT_PRIMARY = UniqueKeys0.KEY_DATAFRAMESPLIT_PRIMARY
  val KEY_EVENT_PRIMARY = UniqueKeys0.KEY_EVENT_PRIMARY
  val KEY_EXPERIMENT_PRIMARY = UniqueKeys0.KEY_EXPERIMENT_PRIMARY
  val KEY_EXPERIMENTRUN_PRIMARY = UniqueKeys0.KEY_EXPERIMENTRUN_PRIMARY
  val KEY_FEATURE_PRIMARY = UniqueKeys0.KEY_FEATURE_PRIMARY
  val KEY_FITEVENT_PRIMARY = UniqueKeys0.KEY_FITEVENT_PRIMARY
  val KEY_GRIDCELLCROSSVALIDATION_PRIMARY = UniqueKeys0.KEY_GRIDCELLCROSSVALIDATION_PRIMARY
  val KEY_GRIDSEARCHCROSSVALIDATIONEVENT_PRIMARY = UniqueKeys0.KEY_GRIDSEARCHCROSSVALIDATIONEVENT_PRIMARY
  val KEY_HYPERPARAMETER_PRIMARY = UniqueKeys0.KEY_HYPERPARAMETER_PRIMARY
  val KEY_LINEARMODEL_PRIMARY = UniqueKeys0.KEY_LINEARMODEL_PRIMARY
  val KEY_LINEARMODELTERM_PRIMARY = UniqueKeys0.KEY_LINEARMODELTERM_PRIMARY
  val KEY_METADATAKV_PRIMARY = UniqueKeys0.KEY_METADATAKV_PRIMARY
  val KEY_METRICEVENT_PRIMARY = UniqueKeys0.KEY_METRICEVENT_PRIMARY
  val KEY_MODELOBJECTIVEHISTORY_PRIMARY = UniqueKeys0.KEY_MODELOBJECTIVEHISTORY_PRIMARY
  val KEY_PIPELINESTAGE_PRIMARY = UniqueKeys0.KEY_PIPELINESTAGE_PRIMARY
  val KEY_PROJECT_PRIMARY = UniqueKeys0.KEY_PROJECT_PRIMARY
  val KEY_RANDOMSPLITEVENT_PRIMARY = UniqueKeys0.KEY_RANDOMSPLITEVENT_PRIMARY
  val KEY_TRANSFORMER_PRIMARY = UniqueKeys0.KEY_TRANSFORMER_PRIMARY
  val KEY_TRANSFORMERSPEC_PRIMARY = UniqueKeys0.KEY_TRANSFORMERSPEC_PRIMARY
  val KEY_TRANSFORMEVENT_PRIMARY = UniqueKeys0.KEY_TRANSFORMEVENT_PRIMARY
  val KEY_TREELINK_PRIMARY = UniqueKeys0.KEY_TREELINK_PRIMARY
  val KEY_TREEMODEL_PRIMARY = UniqueKeys0.KEY_TREEMODEL_PRIMARY
  val KEY_TREEMODELCOMPONENT_PRIMARY = UniqueKeys0.KEY_TREEMODELCOMPONENT_PRIMARY
  val KEY_TREENODE_PRIMARY = UniqueKeys0.KEY_TREENODE_PRIMARY

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------

  val ANNOTATION_IBFK_1 = ForeignKeys0.ANNOTATION_IBFK_1
  val ANNOTATIONFRAGMENT_IBFK_1 = ForeignKeys0.ANNOTATIONFRAGMENT_IBFK_1
  val ANNOTATIONFRAGMENT_IBFK_2 = ForeignKeys0.ANNOTATIONFRAGMENT_IBFK_2
  val ANNOTATIONFRAGMENT_IBFK_3 = ForeignKeys0.ANNOTATIONFRAGMENT_IBFK_3
  val ANNOTATIONFRAGMENT_IBFK_4 = ForeignKeys0.ANNOTATIONFRAGMENT_IBFK_4
  val ANNOTATIONFRAGMENT_IBFK_5 = ForeignKeys0.ANNOTATIONFRAGMENT_IBFK_5
  val CROSSVALIDATIONEVENT_IBFK_1 = ForeignKeys0.CROSSVALIDATIONEVENT_IBFK_1
  val CROSSVALIDATIONEVENT_IBFK_2 = ForeignKeys0.CROSSVALIDATIONEVENT_IBFK_2
  val CROSSVALIDATIONEVENT_IBFK_3 = ForeignKeys0.CROSSVALIDATIONEVENT_IBFK_3
  val CROSSVALIDATIONFOLD_IBFK_1 = ForeignKeys0.CROSSVALIDATIONFOLD_IBFK_1
  val CROSSVALIDATIONFOLD_IBFK_2 = ForeignKeys0.CROSSVALIDATIONFOLD_IBFK_2
  val CROSSVALIDATIONFOLD_IBFK_3 = ForeignKeys0.CROSSVALIDATIONFOLD_IBFK_3
  val DATAFRAME_IBFK_1 = ForeignKeys0.DATAFRAME_IBFK_1
  val DATAFRAMECOLUMN_IBFK_1 = ForeignKeys0.DATAFRAMECOLUMN_IBFK_1
  val DATAFRAMEMETADATA_IBFK_1 = ForeignKeys0.DATAFRAMEMETADATA_IBFK_1
  val DATAFRAMEMETADATA_IBFK_2 = ForeignKeys0.DATAFRAMEMETADATA_IBFK_2
  val DATAFRAMESPLIT_IBFK_1 = ForeignKeys0.DATAFRAMESPLIT_IBFK_1
  val DATAFRAMESPLIT_IBFK_2 = ForeignKeys0.DATAFRAMESPLIT_IBFK_2
  val DATAFRAMESPLIT_IBFK_3 = ForeignKeys0.DATAFRAMESPLIT_IBFK_3
  val EVENT_IBFK_1 = ForeignKeys0.EVENT_IBFK_1
  val EXPERIMENT_IBFK_1 = ForeignKeys0.EXPERIMENT_IBFK_1
  val EXPERIMENTRUN_IBFK_1 = ForeignKeys0.EXPERIMENTRUN_IBFK_1
  val FEATURE_IBFK_1 = ForeignKeys0.FEATURE_IBFK_1
  val FITEVENT_IBFK_1 = ForeignKeys0.FITEVENT_IBFK_1
  val FITEVENT_IBFK_2 = ForeignKeys0.FITEVENT_IBFK_2
  val FITEVENT_IBFK_3 = ForeignKeys0.FITEVENT_IBFK_3
  val FITEVENT_IBFK_4 = ForeignKeys0.FITEVENT_IBFK_4
  val GRIDCELLCROSSVALIDATION_IBFK_1 = ForeignKeys0.GRIDCELLCROSSVALIDATION_IBFK_1
  val GRIDCELLCROSSVALIDATION_IBFK_2 = ForeignKeys0.GRIDCELLCROSSVALIDATION_IBFK_2
  val GRIDCELLCROSSVALIDATION_IBFK_3 = ForeignKeys0.GRIDCELLCROSSVALIDATION_IBFK_3
  val GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_1 = ForeignKeys0.GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_1
  val GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_2 = ForeignKeys0.GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_2
  val HYPERPARAMETER_IBFK_1 = ForeignKeys0.HYPERPARAMETER_IBFK_1
  val HYPERPARAMETER_IBFK_2 = ForeignKeys0.HYPERPARAMETER_IBFK_2
  val LINEARMODEL_IBFK_1 = ForeignKeys0.LINEARMODEL_IBFK_1
  val LINEARMODELTERM_IBFK_1 = ForeignKeys0.LINEARMODELTERM_IBFK_1
  val METRICEVENT_IBFK_1 = ForeignKeys0.METRICEVENT_IBFK_1
  val METRICEVENT_IBFK_2 = ForeignKeys0.METRICEVENT_IBFK_2
  val METRICEVENT_IBFK_3 = ForeignKeys0.METRICEVENT_IBFK_3
  val MODELOBJECTIVEHISTORY_IBFK_1 = ForeignKeys0.MODELOBJECTIVEHISTORY_IBFK_1
  val PIPELINESTAGE_IBFK_1 = ForeignKeys0.PIPELINESTAGE_IBFK_1
  val PIPELINESTAGE_IBFK_2 = ForeignKeys0.PIPELINESTAGE_IBFK_2
  val PIPELINESTAGE_IBFK_3 = ForeignKeys0.PIPELINESTAGE_IBFK_3
  val RANDOMSPLITEVENT_IBFK_1 = ForeignKeys0.RANDOMSPLITEVENT_IBFK_1
  val RANDOMSPLITEVENT_IBFK_2 = ForeignKeys0.RANDOMSPLITEVENT_IBFK_2
  val TRANSFORMER_IBFK_1 = ForeignKeys0.TRANSFORMER_IBFK_1
  val TRANSFORMERSPEC_IBFK_1 = ForeignKeys0.TRANSFORMERSPEC_IBFK_1
  val TRANSFORMEVENT_IBFK_1 = ForeignKeys0.TRANSFORMEVENT_IBFK_1
  val TRANSFORMEVENT_IBFK_2 = ForeignKeys0.TRANSFORMEVENT_IBFK_2
  val TRANSFORMEVENT_IBFK_3 = ForeignKeys0.TRANSFORMEVENT_IBFK_3
  val TRANSFORMEVENT_IBFK_4 = ForeignKeys0.TRANSFORMEVENT_IBFK_4
  val TREELINK_IBFK_1 = ForeignKeys0.TREELINK_IBFK_1
  val TREELINK_IBFK_2 = ForeignKeys0.TREELINK_IBFK_2
  val TREEMODEL_IBFK_1 = ForeignKeys0.TREEMODEL_IBFK_1
  val TREEMODELCOMPONENT_IBFK_1 = ForeignKeys0.TREEMODELCOMPONENT_IBFK_1
  val TREEMODELCOMPONENT_IBFK_2 = ForeignKeys0.TREEMODELCOMPONENT_IBFK_2
  val TREENODE_IBFK_1 = ForeignKeys0.TREENODE_IBFK_1

  // -------------------------------------------------------------------------
  // [#1459] distribute members to avoid static initialisers > 64kb
  // -------------------------------------------------------------------------

  private object Identities0 extends AbstractKeys {
    val IDENTITY_ANNOTATION : Identity[AnnotationRecord, Integer] = AbstractKeys.createIdentity(Annotation.ANNOTATION, Annotation.ANNOTATION.ID)
    val IDENTITY_ANNOTATIONFRAGMENT : Identity[AnnotationfragmentRecord, Integer] = AbstractKeys.createIdentity(Annotationfragment.ANNOTATIONFRAGMENT, Annotationfragment.ANNOTATIONFRAGMENT.ID)
    val IDENTITY_CROSSVALIDATIONEVENT : Identity[CrossvalidationeventRecord, Integer] = AbstractKeys.createIdentity(Crossvalidationevent.CROSSVALIDATIONEVENT, Crossvalidationevent.CROSSVALIDATIONEVENT.ID)
    val IDENTITY_CROSSVALIDATIONFOLD : Identity[CrossvalidationfoldRecord, Integer] = AbstractKeys.createIdentity(Crossvalidationfold.CROSSVALIDATIONFOLD, Crossvalidationfold.CROSSVALIDATIONFOLD.ID)
    val IDENTITY_DATAFRAME : Identity[DataframeRecord, Integer] = AbstractKeys.createIdentity(Dataframe.DATAFRAME, Dataframe.DATAFRAME.ID)
    val IDENTITY_DATAFRAMECOLUMN : Identity[DataframecolumnRecord, Integer] = AbstractKeys.createIdentity(Dataframecolumn.DATAFRAMECOLUMN, Dataframecolumn.DATAFRAMECOLUMN.ID)
    val IDENTITY_DATAFRAMEMETADATA : Identity[DataframemetadataRecord, Integer] = AbstractKeys.createIdentity(Dataframemetadata.DATAFRAMEMETADATA, Dataframemetadata.DATAFRAMEMETADATA.ID)
    val IDENTITY_DATAFRAMESPLIT : Identity[DataframesplitRecord, Integer] = AbstractKeys.createIdentity(Dataframesplit.DATAFRAMESPLIT, Dataframesplit.DATAFRAMESPLIT.ID)
    val IDENTITY_EVENT : Identity[EventRecord, Integer] = AbstractKeys.createIdentity(Event.EVENT, Event.EVENT.ID)
    val IDENTITY_EXPERIMENT : Identity[ExperimentRecord, Integer] = AbstractKeys.createIdentity(Experiment.EXPERIMENT, Experiment.EXPERIMENT.ID)
    val IDENTITY_EXPERIMENTRUN : Identity[ExperimentrunRecord, Integer] = AbstractKeys.createIdentity(Experimentrun.EXPERIMENTRUN, Experimentrun.EXPERIMENTRUN.ID)
    val IDENTITY_FEATURE : Identity[FeatureRecord, Integer] = AbstractKeys.createIdentity(Feature.FEATURE, Feature.FEATURE.ID)
    val IDENTITY_FITEVENT : Identity[FiteventRecord, Integer] = AbstractKeys.createIdentity(Fitevent.FITEVENT, Fitevent.FITEVENT.ID)
    val IDENTITY_GRIDCELLCROSSVALIDATION : Identity[GridcellcrossvalidationRecord, Integer] = AbstractKeys.createIdentity(Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION, Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.ID)
    val IDENTITY_GRIDSEARCHCROSSVALIDATIONEVENT : Identity[GridsearchcrossvalidationeventRecord, Integer] = AbstractKeys.createIdentity(Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT, Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT.ID)
    val IDENTITY_HYPERPARAMETER : Identity[HyperparameterRecord, Integer] = AbstractKeys.createIdentity(Hyperparameter.HYPERPARAMETER, Hyperparameter.HYPERPARAMETER.ID)
    val IDENTITY_LINEARMODEL : Identity[LinearmodelRecord, Integer] = AbstractKeys.createIdentity(Linearmodel.LINEARMODEL, Linearmodel.LINEARMODEL.ID)
    val IDENTITY_LINEARMODELTERM : Identity[LinearmodeltermRecord, Integer] = AbstractKeys.createIdentity(Linearmodelterm.LINEARMODELTERM, Linearmodelterm.LINEARMODELTERM.ID)
    val IDENTITY_METADATAKV : Identity[MetadatakvRecord, Integer] = AbstractKeys.createIdentity(Metadatakv.METADATAKV, Metadatakv.METADATAKV.ID)
    val IDENTITY_METRICEVENT : Identity[MetriceventRecord, Integer] = AbstractKeys.createIdentity(Metricevent.METRICEVENT, Metricevent.METRICEVENT.ID)
    val IDENTITY_MODELOBJECTIVEHISTORY : Identity[ModelobjectivehistoryRecord, Integer] = AbstractKeys.createIdentity(Modelobjectivehistory.MODELOBJECTIVEHISTORY, Modelobjectivehistory.MODELOBJECTIVEHISTORY.ID)
    val IDENTITY_PIPELINESTAGE : Identity[PipelinestageRecord, Integer] = AbstractKeys.createIdentity(Pipelinestage.PIPELINESTAGE, Pipelinestage.PIPELINESTAGE.ID)
    val IDENTITY_PROJECT : Identity[ProjectRecord, Integer] = AbstractKeys.createIdentity(Project.PROJECT, Project.PROJECT.ID)
    val IDENTITY_RANDOMSPLITEVENT : Identity[RandomspliteventRecord, Integer] = AbstractKeys.createIdentity(Randomsplitevent.RANDOMSPLITEVENT, Randomsplitevent.RANDOMSPLITEVENT.ID)
    val IDENTITY_TRANSFORMER : Identity[TransformerRecord, Integer] = AbstractKeys.createIdentity(Transformer.TRANSFORMER, Transformer.TRANSFORMER.ID)
    val IDENTITY_TRANSFORMERSPEC : Identity[TransformerspecRecord, Integer] = AbstractKeys.createIdentity(Transformerspec.TRANSFORMERSPEC, Transformerspec.TRANSFORMERSPEC.ID)
    val IDENTITY_TRANSFORMEVENT : Identity[TransformeventRecord, Integer] = AbstractKeys.createIdentity(Transformevent.TRANSFORMEVENT, Transformevent.TRANSFORMEVENT.ID)
    val IDENTITY_TREELINK : Identity[TreelinkRecord, Integer] = AbstractKeys.createIdentity(Treelink.TREELINK, Treelink.TREELINK.ID)
    val IDENTITY_TREEMODEL : Identity[TreemodelRecord, Integer] = AbstractKeys.createIdentity(Treemodel.TREEMODEL, Treemodel.TREEMODEL.ID)
    val IDENTITY_TREEMODELCOMPONENT : Identity[TreemodelcomponentRecord, Integer] = AbstractKeys.createIdentity(Treemodelcomponent.TREEMODELCOMPONENT, Treemodelcomponent.TREEMODELCOMPONENT.ID)
    val IDENTITY_TREENODE : Identity[TreenodeRecord, Integer] = AbstractKeys.createIdentity(Treenode.TREENODE, Treenode.TREENODE.ID)
  }

  private object UniqueKeys0 extends AbstractKeys {
    val KEY_ANNOTATION_PRIMARY : UniqueKey[AnnotationRecord] = AbstractKeys.createUniqueKey(Annotation.ANNOTATION, "KEY_Annotation_PRIMARY", Annotation.ANNOTATION.ID)
    val KEY_ANNOTATIONFRAGMENT_PRIMARY : UniqueKey[AnnotationfragmentRecord] = AbstractKeys.createUniqueKey(Annotationfragment.ANNOTATIONFRAGMENT, "KEY_AnnotationFragment_PRIMARY", Annotationfragment.ANNOTATIONFRAGMENT.ID)
    val KEY_CROSSVALIDATIONEVENT_PRIMARY : UniqueKey[CrossvalidationeventRecord] = AbstractKeys.createUniqueKey(Crossvalidationevent.CROSSVALIDATIONEVENT, "KEY_CrossValidationEvent_PRIMARY", Crossvalidationevent.CROSSVALIDATIONEVENT.ID)
    val KEY_CROSSVALIDATIONFOLD_PRIMARY : UniqueKey[CrossvalidationfoldRecord] = AbstractKeys.createUniqueKey(Crossvalidationfold.CROSSVALIDATIONFOLD, "KEY_CrossValidationFold_PRIMARY", Crossvalidationfold.CROSSVALIDATIONFOLD.ID)
    val KEY_DATAFRAME_PRIMARY : UniqueKey[DataframeRecord] = AbstractKeys.createUniqueKey(Dataframe.DATAFRAME, "KEY_DataFrame_PRIMARY", Dataframe.DATAFRAME.ID)
    val KEY_DATAFRAMECOLUMN_PRIMARY : UniqueKey[DataframecolumnRecord] = AbstractKeys.createUniqueKey(Dataframecolumn.DATAFRAMECOLUMN, "KEY_DataFrameColumn_PRIMARY", Dataframecolumn.DATAFRAMECOLUMN.ID)
    val KEY_DATAFRAMEMETADATA_PRIMARY : UniqueKey[DataframemetadataRecord] = AbstractKeys.createUniqueKey(Dataframemetadata.DATAFRAMEMETADATA, "KEY_DataFrameMetadata_PRIMARY", Dataframemetadata.DATAFRAMEMETADATA.ID)
    val KEY_DATAFRAMESPLIT_PRIMARY : UniqueKey[DataframesplitRecord] = AbstractKeys.createUniqueKey(Dataframesplit.DATAFRAMESPLIT, "KEY_DataFrameSplit_PRIMARY", Dataframesplit.DATAFRAMESPLIT.ID)
    val KEY_EVENT_PRIMARY : UniqueKey[EventRecord] = AbstractKeys.createUniqueKey(Event.EVENT, "KEY_Event_PRIMARY", Event.EVENT.ID)
    val KEY_EXPERIMENT_PRIMARY : UniqueKey[ExperimentRecord] = AbstractKeys.createUniqueKey(Experiment.EXPERIMENT, "KEY_Experiment_PRIMARY", Experiment.EXPERIMENT.ID)
    val KEY_EXPERIMENTRUN_PRIMARY : UniqueKey[ExperimentrunRecord] = AbstractKeys.createUniqueKey(Experimentrun.EXPERIMENTRUN, "KEY_ExperimentRun_PRIMARY", Experimentrun.EXPERIMENTRUN.ID)
    val KEY_FEATURE_PRIMARY : UniqueKey[FeatureRecord] = AbstractKeys.createUniqueKey(Feature.FEATURE, "KEY_Feature_PRIMARY", Feature.FEATURE.ID)
    val KEY_FITEVENT_PRIMARY : UniqueKey[FiteventRecord] = AbstractKeys.createUniqueKey(Fitevent.FITEVENT, "KEY_FitEvent_PRIMARY", Fitevent.FITEVENT.ID)
    val KEY_GRIDCELLCROSSVALIDATION_PRIMARY : UniqueKey[GridcellcrossvalidationRecord] = AbstractKeys.createUniqueKey(Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION, "KEY_GridCellCrossValidation_PRIMARY", Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.ID)
    val KEY_GRIDSEARCHCROSSVALIDATIONEVENT_PRIMARY : UniqueKey[GridsearchcrossvalidationeventRecord] = AbstractKeys.createUniqueKey(Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT, "KEY_GridSearchCrossValidationEvent_PRIMARY", Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT.ID)
    val KEY_HYPERPARAMETER_PRIMARY : UniqueKey[HyperparameterRecord] = AbstractKeys.createUniqueKey(Hyperparameter.HYPERPARAMETER, "KEY_HyperParameter_PRIMARY", Hyperparameter.HYPERPARAMETER.ID)
    val KEY_LINEARMODEL_PRIMARY : UniqueKey[LinearmodelRecord] = AbstractKeys.createUniqueKey(Linearmodel.LINEARMODEL, "KEY_LinearModel_PRIMARY", Linearmodel.LINEARMODEL.ID)
    val KEY_LINEARMODELTERM_PRIMARY : UniqueKey[LinearmodeltermRecord] = AbstractKeys.createUniqueKey(Linearmodelterm.LINEARMODELTERM, "KEY_LinearModelTerm_PRIMARY", Linearmodelterm.LINEARMODELTERM.ID)
    val KEY_METADATAKV_PRIMARY : UniqueKey[MetadatakvRecord] = AbstractKeys.createUniqueKey(Metadatakv.METADATAKV, "KEY_MetadataKV_PRIMARY", Metadatakv.METADATAKV.ID)
    val KEY_METRICEVENT_PRIMARY : UniqueKey[MetriceventRecord] = AbstractKeys.createUniqueKey(Metricevent.METRICEVENT, "KEY_MetricEvent_PRIMARY", Metricevent.METRICEVENT.ID)
    val KEY_MODELOBJECTIVEHISTORY_PRIMARY : UniqueKey[ModelobjectivehistoryRecord] = AbstractKeys.createUniqueKey(Modelobjectivehistory.MODELOBJECTIVEHISTORY, "KEY_ModelObjectiveHistory_PRIMARY", Modelobjectivehistory.MODELOBJECTIVEHISTORY.ID)
    val KEY_PIPELINESTAGE_PRIMARY : UniqueKey[PipelinestageRecord] = AbstractKeys.createUniqueKey(Pipelinestage.PIPELINESTAGE, "KEY_PipelineStage_PRIMARY", Pipelinestage.PIPELINESTAGE.ID)
    val KEY_PROJECT_PRIMARY : UniqueKey[ProjectRecord] = AbstractKeys.createUniqueKey(Project.PROJECT, "KEY_Project_PRIMARY", Project.PROJECT.ID)
    val KEY_RANDOMSPLITEVENT_PRIMARY : UniqueKey[RandomspliteventRecord] = AbstractKeys.createUniqueKey(Randomsplitevent.RANDOMSPLITEVENT, "KEY_RandomSplitEvent_PRIMARY", Randomsplitevent.RANDOMSPLITEVENT.ID)
    val KEY_TRANSFORMER_PRIMARY : UniqueKey[TransformerRecord] = AbstractKeys.createUniqueKey(Transformer.TRANSFORMER, "KEY_Transformer_PRIMARY", Transformer.TRANSFORMER.ID)
    val KEY_TRANSFORMERSPEC_PRIMARY : UniqueKey[TransformerspecRecord] = AbstractKeys.createUniqueKey(Transformerspec.TRANSFORMERSPEC, "KEY_TransformerSpec_PRIMARY", Transformerspec.TRANSFORMERSPEC.ID)
    val KEY_TRANSFORMEVENT_PRIMARY : UniqueKey[TransformeventRecord] = AbstractKeys.createUniqueKey(Transformevent.TRANSFORMEVENT, "KEY_TransformEvent_PRIMARY", Transformevent.TRANSFORMEVENT.ID)
    val KEY_TREELINK_PRIMARY : UniqueKey[TreelinkRecord] = AbstractKeys.createUniqueKey(Treelink.TREELINK, "KEY_TreeLink_PRIMARY", Treelink.TREELINK.ID)
    val KEY_TREEMODEL_PRIMARY : UniqueKey[TreemodelRecord] = AbstractKeys.createUniqueKey(Treemodel.TREEMODEL, "KEY_TreeModel_PRIMARY", Treemodel.TREEMODEL.ID)
    val KEY_TREEMODELCOMPONENT_PRIMARY : UniqueKey[TreemodelcomponentRecord] = AbstractKeys.createUniqueKey(Treemodelcomponent.TREEMODELCOMPONENT, "KEY_TreeModelComponent_PRIMARY", Treemodelcomponent.TREEMODELCOMPONENT.ID)
    val KEY_TREENODE_PRIMARY : UniqueKey[TreenodeRecord] = AbstractKeys.createUniqueKey(Treenode.TREENODE, "KEY_TreeNode_PRIMARY", Treenode.TREENODE.ID)
  }

  private object ForeignKeys0 extends AbstractKeys {
    val ANNOTATION_IBFK_1 : ForeignKey[AnnotationRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Annotation.ANNOTATION, "Annotation_ibfk_1", Annotation.ANNOTATION.EXPERIMENTRUN)
    val ANNOTATIONFRAGMENT_IBFK_1 : ForeignKey[AnnotationfragmentRecord, AnnotationRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_ANNOTATION_PRIMARY, Annotationfragment.ANNOTATIONFRAGMENT, "AnnotationFragment_ibfk_1", Annotationfragment.ANNOTATIONFRAGMENT.ANNOTATION)
    val ANNOTATIONFRAGMENT_IBFK_2 : ForeignKey[AnnotationfragmentRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Annotationfragment.ANNOTATIONFRAGMENT, "AnnotationFragment_ibfk_2", Annotationfragment.ANNOTATIONFRAGMENT.TRANSFORMER)
    val ANNOTATIONFRAGMENT_IBFK_3 : ForeignKey[AnnotationfragmentRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Annotationfragment.ANNOTATIONFRAGMENT, "AnnotationFragment_ibfk_3", Annotationfragment.ANNOTATIONFRAGMENT.DATAFRAME)
    val ANNOTATIONFRAGMENT_IBFK_4 : ForeignKey[AnnotationfragmentRecord, TransformerspecRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMERSPEC_PRIMARY, Annotationfragment.ANNOTATIONFRAGMENT, "AnnotationFragment_ibfk_4", Annotationfragment.ANNOTATIONFRAGMENT.SPEC)
    val ANNOTATIONFRAGMENT_IBFK_5 : ForeignKey[AnnotationfragmentRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Annotationfragment.ANNOTATIONFRAGMENT, "AnnotationFragment_ibfk_5", Annotationfragment.ANNOTATIONFRAGMENT.EXPERIMENTRUN)
    val CROSSVALIDATIONEVENT_IBFK_1 : ForeignKey[CrossvalidationeventRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Crossvalidationevent.CROSSVALIDATIONEVENT, "CrossValidationEvent_ibfk_1", Crossvalidationevent.CROSSVALIDATIONEVENT.DF)
    val CROSSVALIDATIONEVENT_IBFK_2 : ForeignKey[CrossvalidationeventRecord, TransformerspecRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMERSPEC_PRIMARY, Crossvalidationevent.CROSSVALIDATIONEVENT, "CrossValidationEvent_ibfk_2", Crossvalidationevent.CROSSVALIDATIONEVENT.SPEC)
    val CROSSVALIDATIONEVENT_IBFK_3 : ForeignKey[CrossvalidationeventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Crossvalidationevent.CROSSVALIDATIONEVENT, "CrossValidationEvent_ibfk_3", Crossvalidationevent.CROSSVALIDATIONEVENT.EXPERIMENTRUN)
    val CROSSVALIDATIONFOLD_IBFK_1 : ForeignKey[CrossvalidationfoldRecord, MetriceventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_METRICEVENT_PRIMARY, Crossvalidationfold.CROSSVALIDATIONFOLD, "CrossValidationFold_ibfk_1", Crossvalidationfold.CROSSVALIDATIONFOLD.METRIC)
    val CROSSVALIDATIONFOLD_IBFK_2 : ForeignKey[CrossvalidationfoldRecord, CrossvalidationeventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_CROSSVALIDATIONEVENT_PRIMARY, Crossvalidationfold.CROSSVALIDATIONFOLD, "CrossValidationFold_ibfk_2", Crossvalidationfold.CROSSVALIDATIONFOLD.EVENT)
    val CROSSVALIDATIONFOLD_IBFK_3 : ForeignKey[CrossvalidationfoldRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Crossvalidationfold.CROSSVALIDATIONFOLD, "CrossValidationFold_ibfk_3", Crossvalidationfold.CROSSVALIDATIONFOLD.EXPERIMENTRUN)
    val DATAFRAME_IBFK_1 : ForeignKey[DataframeRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Dataframe.DATAFRAME, "DataFrame_ibfk_1", Dataframe.DATAFRAME.EXPERIMENTRUN)
    val DATAFRAMECOLUMN_IBFK_1 : ForeignKey[DataframecolumnRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Dataframecolumn.DATAFRAMECOLUMN, "DataFrameColumn_ibfk_1", Dataframecolumn.DATAFRAMECOLUMN.DFID)
    val DATAFRAMEMETADATA_IBFK_1 : ForeignKey[DataframemetadataRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Dataframemetadata.DATAFRAMEMETADATA, "DataFrameMetadata_ibfk_1", Dataframemetadata.DATAFRAMEMETADATA.DFID)
    val DATAFRAMEMETADATA_IBFK_2 : ForeignKey[DataframemetadataRecord, MetadatakvRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_METADATAKV_PRIMARY, Dataframemetadata.DATAFRAMEMETADATA, "DataFrameMetadata_ibfk_2", Dataframemetadata.DATAFRAMEMETADATA.METADATAKVID)
    val DATAFRAMESPLIT_IBFK_1 : ForeignKey[DataframesplitRecord, RandomspliteventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_RANDOMSPLITEVENT_PRIMARY, Dataframesplit.DATAFRAMESPLIT, "DataFrameSplit_ibfk_1", Dataframesplit.DATAFRAMESPLIT.SPLITEVENTID)
    val DATAFRAMESPLIT_IBFK_2 : ForeignKey[DataframesplitRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Dataframesplit.DATAFRAMESPLIT, "DataFrameSplit_ibfk_2", Dataframesplit.DATAFRAMESPLIT.DATAFRAMEID)
    val DATAFRAMESPLIT_IBFK_3 : ForeignKey[DataframesplitRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Dataframesplit.DATAFRAMESPLIT, "DataFrameSplit_ibfk_3", Dataframesplit.DATAFRAMESPLIT.EXPERIMENTRUN)
    val EVENT_IBFK_1 : ForeignKey[EventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Event.EVENT, "Event_ibfk_1", Event.EVENT.EXPERIMENTRUN)
    val EXPERIMENT_IBFK_1 : ForeignKey[ExperimentRecord, ProjectRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_PROJECT_PRIMARY, Experiment.EXPERIMENT, "Experiment_ibfk_1", Experiment.EXPERIMENT.PROJECT)
    val EXPERIMENTRUN_IBFK_1 : ForeignKey[ExperimentrunRecord, ExperimentRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENT_PRIMARY, Experimentrun.EXPERIMENTRUN, "ExperimentRun_ibfk_1", Experimentrun.EXPERIMENTRUN.EXPERIMENT)
    val FEATURE_IBFK_1 : ForeignKey[FeatureRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Feature.FEATURE, "Feature_ibfk_1", Feature.FEATURE.TRANSFORMER)
    val FITEVENT_IBFK_1 : ForeignKey[FiteventRecord, TransformerspecRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMERSPEC_PRIMARY, Fitevent.FITEVENT, "FitEvent_ibfk_1", Fitevent.FITEVENT.TRANSFORMERSPEC)
    val FITEVENT_IBFK_2 : ForeignKey[FiteventRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Fitevent.FITEVENT, "FitEvent_ibfk_2", Fitevent.FITEVENT.TRANSFORMER)
    val FITEVENT_IBFK_3 : ForeignKey[FiteventRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Fitevent.FITEVENT, "FitEvent_ibfk_3", Fitevent.FITEVENT.DF)
    val FITEVENT_IBFK_4 : ForeignKey[FiteventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Fitevent.FITEVENT, "FitEvent_ibfk_4", Fitevent.FITEVENT.EXPERIMENTRUN)
    val GRIDCELLCROSSVALIDATION_IBFK_1 : ForeignKey[GridcellcrossvalidationRecord, GridsearchcrossvalidationeventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_GRIDSEARCHCROSSVALIDATIONEVENT_PRIMARY, Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION, "GridCellCrossValidation_ibfk_1", Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.GRIDSEARCH)
    val GRIDCELLCROSSVALIDATION_IBFK_2 : ForeignKey[GridcellcrossvalidationRecord, CrossvalidationeventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_CROSSVALIDATIONEVENT_PRIMARY, Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION, "GridCellCrossValidation_ibfk_2", Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.CROSSVALIDATION)
    val GRIDCELLCROSSVALIDATION_IBFK_3 : ForeignKey[GridcellcrossvalidationRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION, "GridCellCrossValidation_ibfk_3", Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.EXPERIMENTRUN)
    val GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_1 : ForeignKey[GridsearchcrossvalidationeventRecord, FiteventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_FITEVENT_PRIMARY, Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT, "GridSearchCrossValidationEvent_ibfk_1", Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT.BEST)
    val GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_2 : ForeignKey[GridsearchcrossvalidationeventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT, "GridSearchCrossValidationEvent_ibfk_2", Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT.EXPERIMENTRUN)
    val HYPERPARAMETER_IBFK_1 : ForeignKey[HyperparameterRecord, TransformerspecRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMERSPEC_PRIMARY, Hyperparameter.HYPERPARAMETER, "HyperParameter_ibfk_1", Hyperparameter.HYPERPARAMETER.SPEC)
    val HYPERPARAMETER_IBFK_2 : ForeignKey[HyperparameterRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Hyperparameter.HYPERPARAMETER, "HyperParameter_ibfk_2", Hyperparameter.HYPERPARAMETER.EXPERIMENTRUN)
    val LINEARMODEL_IBFK_1 : ForeignKey[LinearmodelRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Linearmodel.LINEARMODEL, "LinearModel_ibfk_1", Linearmodel.LINEARMODEL.MODEL)
    val LINEARMODELTERM_IBFK_1 : ForeignKey[LinearmodeltermRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Linearmodelterm.LINEARMODELTERM, "LinearModelTerm_ibfk_1", Linearmodelterm.LINEARMODELTERM.MODEL)
    val METRICEVENT_IBFK_1 : ForeignKey[MetriceventRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Metricevent.METRICEVENT, "MetricEvent_ibfk_1", Metricevent.METRICEVENT.TRANSFORMER)
    val METRICEVENT_IBFK_2 : ForeignKey[MetriceventRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Metricevent.METRICEVENT, "MetricEvent_ibfk_2", Metricevent.METRICEVENT.DF)
    val METRICEVENT_IBFK_3 : ForeignKey[MetriceventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Metricevent.METRICEVENT, "MetricEvent_ibfk_3", Metricevent.METRICEVENT.EXPERIMENTRUN)
    val MODELOBJECTIVEHISTORY_IBFK_1 : ForeignKey[ModelobjectivehistoryRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Modelobjectivehistory.MODELOBJECTIVEHISTORY, "ModelObjectiveHistory_ibfk_1", Modelobjectivehistory.MODELOBJECTIVEHISTORY.MODEL)
    val PIPELINESTAGE_IBFK_1 : ForeignKey[PipelinestageRecord, FiteventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_FITEVENT_PRIMARY, Pipelinestage.PIPELINESTAGE, "PipelineStage_ibfk_1", Pipelinestage.PIPELINESTAGE.PIPELINEFITEVENT)
    val PIPELINESTAGE_IBFK_2 : ForeignKey[PipelinestageRecord, EventRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EVENT_PRIMARY, Pipelinestage.PIPELINESTAGE, "PipelineStage_ibfk_2", Pipelinestage.PIPELINESTAGE.TRANSFORMORFITEVENT)
    val PIPELINESTAGE_IBFK_3 : ForeignKey[PipelinestageRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Pipelinestage.PIPELINESTAGE, "PipelineStage_ibfk_3", Pipelinestage.PIPELINESTAGE.EXPERIMENTRUN)
    val RANDOMSPLITEVENT_IBFK_1 : ForeignKey[RandomspliteventRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Randomsplitevent.RANDOMSPLITEVENT, "RandomSplitEvent_ibfk_1", Randomsplitevent.RANDOMSPLITEVENT.INPUTDATAFRAMEID)
    val RANDOMSPLITEVENT_IBFK_2 : ForeignKey[RandomspliteventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Randomsplitevent.RANDOMSPLITEVENT, "RandomSplitEvent_ibfk_2", Randomsplitevent.RANDOMSPLITEVENT.EXPERIMENTRUN)
    val TRANSFORMER_IBFK_1 : ForeignKey[TransformerRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Transformer.TRANSFORMER, "Transformer_ibfk_1", Transformer.TRANSFORMER.EXPERIMENTRUN)
    val TRANSFORMERSPEC_IBFK_1 : ForeignKey[TransformerspecRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Transformerspec.TRANSFORMERSPEC, "TransformerSpec_ibfk_1", Transformerspec.TRANSFORMERSPEC.EXPERIMENTRUN)
    val TRANSFORMEVENT_IBFK_1 : ForeignKey[TransformeventRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Transformevent.TRANSFORMEVENT, "TransformEvent_ibfk_1", Transformevent.TRANSFORMEVENT.OLDDF)
    val TRANSFORMEVENT_IBFK_2 : ForeignKey[TransformeventRecord, DataframeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_DATAFRAME_PRIMARY, Transformevent.TRANSFORMEVENT, "TransformEvent_ibfk_2", Transformevent.TRANSFORMEVENT.NEWDF)
    val TRANSFORMEVENT_IBFK_3 : ForeignKey[TransformeventRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Transformevent.TRANSFORMEVENT, "TransformEvent_ibfk_3", Transformevent.TRANSFORMEVENT.TRANSFORMER)
    val TRANSFORMEVENT_IBFK_4 : ForeignKey[TransformeventRecord, ExperimentrunRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_EXPERIMENTRUN_PRIMARY, Transformevent.TRANSFORMEVENT, "TransformEvent_ibfk_4", Transformevent.TRANSFORMEVENT.EXPERIMENTRUN)
    val TREELINK_IBFK_1 : ForeignKey[TreelinkRecord, TreenodeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TREENODE_PRIMARY, Treelink.TREELINK, "TreeLink_ibfk_1", Treelink.TREELINK.PARENT)
    val TREELINK_IBFK_2 : ForeignKey[TreelinkRecord, TreenodeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TREENODE_PRIMARY, Treelink.TREELINK, "TreeLink_ibfk_2", Treelink.TREELINK.CHILD)
    val TREEMODEL_IBFK_1 : ForeignKey[TreemodelRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Treemodel.TREEMODEL, "TreeModel_ibfk_1", Treemodel.TREEMODEL.MODEL)
    val TREEMODELCOMPONENT_IBFK_1 : ForeignKey[TreemodelcomponentRecord, TransformerRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TRANSFORMER_PRIMARY, Treemodelcomponent.TREEMODELCOMPONENT, "TreeModelComponent_ibfk_1", Treemodelcomponent.TREEMODELCOMPONENT.MODEL)
    val TREEMODELCOMPONENT_IBFK_2 : ForeignKey[TreemodelcomponentRecord, TreenodeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TREENODE_PRIMARY, Treemodelcomponent.TREEMODELCOMPONENT, "TreeModelComponent_ibfk_2", Treemodelcomponent.TREEMODELCOMPONENT.ROOTNODE)
    val TREENODE_IBFK_1 : ForeignKey[TreenodeRecord, TreenodeRecord] = AbstractKeys.createForeignKey(jooq.mysql.gen.Keys.KEY_TREENODE_PRIMARY, Treenode.TREENODE, "TreeNode_ibfk_1", Treenode.TREENODE.ROOTNODE)
  }
}
