/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Double
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.LinearmodeltermRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Linearmodelterm {

  /**
   * The reference instance of <code>modeldb.LinearModelTerm</code>
   */
  val LINEARMODELTERM = new Linearmodelterm
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Linearmodelterm(alias : String, aliased : Table[LinearmodeltermRecord], parameters : Array[ Field[_] ]) extends TableImpl[LinearmodeltermRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[LinearmodeltermRecord] = {
    classOf[LinearmodeltermRecord]
  }

  /**
   * The column <code>modeldb.LinearModelTerm.id</code>.
   */
  val ID : TableField[LinearmodeltermRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.LinearModelTerm.model</code>.
   */
  val MODEL : TableField[LinearmodeltermRecord, Integer] = createField("model", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.LinearModelTerm.termIndex</code>.
   */
  val TERMINDEX : TableField[LinearmodeltermRecord, Integer] = createField("termIndex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.LinearModelTerm.coefficient</code>.
   */
  val COEFFICIENT : TableField[LinearmodeltermRecord, Double] = createField("coefficient", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), "")

  /**
   * The column <code>modeldb.LinearModelTerm.tStat</code>.
   */
  val TSTAT : TableField[LinearmodeltermRecord, Double] = createField("tStat", org.jooq.impl.SQLDataType.DOUBLE, "")

  /**
   * The column <code>modeldb.LinearModelTerm.stdErr</code>.
   */
  val STDERR : TableField[LinearmodeltermRecord, Double] = createField("stdErr", org.jooq.impl.SQLDataType.DOUBLE, "")

  /**
   * The column <code>modeldb.LinearModelTerm.pValue</code>.
   */
  val PVALUE : TableField[LinearmodeltermRecord, Double] = createField("pValue", org.jooq.impl.SQLDataType.DOUBLE, "")

  /**
   * Create a <code>modeldb.LinearModelTerm</code> table reference
   */
  def this() = {
    this("LinearModelTerm", null, null)
  }

  /**
   * Create an aliased <code>modeldb.LinearModelTerm</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Linearmodelterm.LINEARMODELTERM, null)
  }

  private def this(alias : String, aliased : Table[LinearmodeltermRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[LinearmodeltermRecord, Integer] = {
    Keys.IDENTITY_LINEARMODELTERM
  }

  override def getPrimaryKey : UniqueKey[LinearmodeltermRecord] = {
    Keys.KEY_LINEARMODELTERM_PRIMARY
  }

  override def getKeys : List[ UniqueKey[LinearmodeltermRecord] ] = {
    return Arrays.asList[ UniqueKey[LinearmodeltermRecord] ](Keys.KEY_LINEARMODELTERM_PRIMARY)
  }

  override def getReferences : List[ ForeignKey[LinearmodeltermRecord, _] ] = {
    return Arrays.asList[ ForeignKey[LinearmodeltermRecord, _] ](Keys.LINEARMODELTERM_IBFK_1)
  }

  override def as(alias : String) : Linearmodelterm = {
    new Linearmodelterm(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Linearmodelterm = {
    new Linearmodelterm(name, null)
  }
}
