/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.ProjectRecord

import org.jooq.Field
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Project {

  /**
   * The reference instance of <code>modeldb.Project</code>
   */
  val PROJECT = new Project
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Project(alias : String, aliased : Table[ProjectRecord], parameters : Array[ Field[_] ]) extends TableImpl[ProjectRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[ProjectRecord] = {
    classOf[ProjectRecord]
  }

  /**
   * The column <code>modeldb.Project.id</code>.
   */
  val ID : TableField[ProjectRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.Project.name</code>.
   */
  val NAME : TableField[ProjectRecord, String] = createField("name", org.jooq.impl.SQLDataType.CLOB, "")

  /**
   * The column <code>modeldb.Project.author</code>.
   */
  val AUTHOR : TableField[ProjectRecord, String] = createField("author", org.jooq.impl.SQLDataType.CLOB, "")

  /**
   * The column <code>modeldb.Project.description</code>.
   */
  val DESCRIPTION : TableField[ProjectRecord, String] = createField("description", org.jooq.impl.SQLDataType.CLOB, "")

  /**
   * The column <code>modeldb.Project.created</code>.
   */
  val CREATED : TableField[ProjectRecord, Timestamp] = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), "")

  /**
   * Create a <code>modeldb.Project</code> table reference
   */
  def this() = {
    this("Project", null, null)
  }

  /**
   * Create an aliased <code>modeldb.Project</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Project.PROJECT, null)
  }

  private def this(alias : String, aliased : Table[ProjectRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[ProjectRecord, Integer] = {
    Keys.IDENTITY_PROJECT
  }

  override def getPrimaryKey : UniqueKey[ProjectRecord] = {
    Keys.KEY_PROJECT_PRIMARY
  }

  override def getKeys : List[ UniqueKey[ProjectRecord] ] = {
    return Arrays.asList[ UniqueKey[ProjectRecord] ](Keys.KEY_PROJECT_PRIMARY)
  }

  override def as(alias : String) : Project = {
    new Project(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Project = {
    new Project(name, null)
  }
}
