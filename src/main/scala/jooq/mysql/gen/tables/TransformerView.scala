/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.TransformerViewRecord

import org.jooq.Field
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.impl.TableImpl

import scala.Array


object TransformerView {

  /**
   * The reference instance of <code>modeldb.transformer_view</code>
   */
  val TRANSFORMER_VIEW = new TransformerView
}

/**
 * VIEW
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class TransformerView(alias : String, aliased : Table[TransformerViewRecord], parameters : Array[ Field[_] ]) extends TableImpl[TransformerViewRecord](alias, Modeldb.MODELDB, aliased, parameters, "VIEW") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[TransformerViewRecord] = {
    classOf[TransformerViewRecord]
  }

  /**
   * The column <code>modeldb.transformer_view.te_id</code>.
   */
  val TE_ID : TableField[TransformerViewRecord, Integer] = createField("te_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>modeldb.transformer_view.transformer_type</code>.
   */
  val TRANSFORMER_TYPE : TableField[TransformerViewRecord, String] = createField("transformer_type", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>modeldb.transformer_view.transformer</code>.
   */
  val TRANSFORMER : TableField[TransformerViewRecord, Integer] = createField("transformer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.transformer_view.input_df</code>.
   */
  val INPUT_DF : TableField[TransformerViewRecord, Integer] = createField("input_df", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.transformer_view.output_df</code>.
   */
  val OUTPUT_DF : TableField[TransformerViewRecord, Integer] = createField("output_df", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * Create a <code>modeldb.transformer_view</code> table reference
   */
  def this() = {
    this("transformer_view", null, null)
  }

  /**
   * Create an aliased <code>modeldb.transformer_view</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.TransformerView.TRANSFORMER_VIEW, null)
  }

  private def this(alias : String, aliased : Table[TransformerViewRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def as(alias : String) : TransformerView = {
    new TransformerView(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : TransformerView = {
    new TransformerView(name, null)
  }
}
