/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Double
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.FeatureRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Feature {

  /**
   * The reference instance of <code>modeldb.Feature</code>
   */
  val FEATURE = new Feature
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Feature(alias : String, aliased : Table[FeatureRecord], parameters : Array[ Field[_] ]) extends TableImpl[FeatureRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[FeatureRecord] = {
    classOf[FeatureRecord]
  }

  /**
   * The column <code>modeldb.Feature.id</code>.
   */
  val ID : TableField[FeatureRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.Feature.name</code>.
   */
  val NAME : TableField[FeatureRecord, String] = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), "")

  /**
   * The column <code>modeldb.Feature.featureIndex</code>.
   */
  val FEATUREINDEX : TableField[FeatureRecord, Integer] = createField("featureIndex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.Feature.importance</code>.
   */
  val IMPORTANCE : TableField[FeatureRecord, Double] = createField("importance", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), "")

  /**
   * The column <code>modeldb.Feature.transformer</code>.
   */
  val TRANSFORMER : TableField[FeatureRecord, Integer] = createField("transformer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * Create a <code>modeldb.Feature</code> table reference
   */
  def this() = {
    this("Feature", null, null)
  }

  /**
   * Create an aliased <code>modeldb.Feature</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Feature.FEATURE, null)
  }

  private def this(alias : String, aliased : Table[FeatureRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[FeatureRecord, Integer] = {
    Keys.IDENTITY_FEATURE
  }

  override def getPrimaryKey : UniqueKey[FeatureRecord] = {
    Keys.KEY_FEATURE_PRIMARY
  }

  override def getKeys : List[ UniqueKey[FeatureRecord] ] = {
    return Arrays.asList[ UniqueKey[FeatureRecord] ](Keys.KEY_FEATURE_PRIMARY)
  }

  override def getReferences : List[ ForeignKey[FeatureRecord, _] ] = {
    return Arrays.asList[ ForeignKey[FeatureRecord, _] ](Keys.FEATURE_IBFK_1)
  }

  override def as(alias : String) : Feature = {
    new Feature(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Feature = {
    new Feature(name, null)
  }
}
