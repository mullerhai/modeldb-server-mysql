/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.GridsearchcrossvalidationeventRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Gridsearchcrossvalidationevent {

  /**
   * The reference instance of <code>modeldb.GridSearchCrossValidationEvent</code>
   */
  val GRIDSEARCHCROSSVALIDATIONEVENT = new Gridsearchcrossvalidationevent
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Gridsearchcrossvalidationevent(alias : String, aliased : Table[GridsearchcrossvalidationeventRecord], parameters : Array[ Field[_] ]) extends TableImpl[GridsearchcrossvalidationeventRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[GridsearchcrossvalidationeventRecord] = {
    classOf[GridsearchcrossvalidationeventRecord]
  }

  /**
   * The column <code>modeldb.GridSearchCrossValidationEvent.id</code>.
   */
  val ID : TableField[GridsearchcrossvalidationeventRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.GridSearchCrossValidationEvent.numFolds</code>.
   */
  val NUMFOLDS : TableField[GridsearchcrossvalidationeventRecord, Integer] = createField("numFolds", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.GridSearchCrossValidationEvent.best</code>.
   */
  val BEST : TableField[GridsearchcrossvalidationeventRecord, Integer] = createField("best", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.GridSearchCrossValidationEvent.experimentRun</code>.
   */
  val EXPERIMENTRUN : TableField[GridsearchcrossvalidationeventRecord, Integer] = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * Create a <code>modeldb.GridSearchCrossValidationEvent</code> table reference
   */
  def this() = {
    this("GridSearchCrossValidationEvent", null, null)
  }

  /**
   * Create an aliased <code>modeldb.GridSearchCrossValidationEvent</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT, null)
  }

  private def this(alias : String, aliased : Table[GridsearchcrossvalidationeventRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[GridsearchcrossvalidationeventRecord, Integer] = {
    Keys.IDENTITY_GRIDSEARCHCROSSVALIDATIONEVENT
  }

  override def getPrimaryKey : UniqueKey[GridsearchcrossvalidationeventRecord] = {
    Keys.KEY_GRIDSEARCHCROSSVALIDATIONEVENT_PRIMARY
  }

  override def getKeys : List[ UniqueKey[GridsearchcrossvalidationeventRecord] ] = {
    return Arrays.asList[ UniqueKey[GridsearchcrossvalidationeventRecord] ](Keys.KEY_GRIDSEARCHCROSSVALIDATIONEVENT_PRIMARY)
  }

  override def getReferences : List[ ForeignKey[GridsearchcrossvalidationeventRecord, _] ] = {
    return Arrays.asList[ ForeignKey[GridsearchcrossvalidationeventRecord, _] ](Keys.GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_1, Keys.GRIDSEARCHCROSSVALIDATIONEVENT_IBFK_2)
  }

  override def as(alias : String) : Gridsearchcrossvalidationevent = {
    new Gridsearchcrossvalidationevent(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Gridsearchcrossvalidationevent = {
    new Gridsearchcrossvalidationevent(name, null)
  }
}
