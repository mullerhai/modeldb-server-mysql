/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.AnnotationfragmentRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Annotationfragment {

  /**
   * The reference instance of <code>modeldb.AnnotationFragment</code>
   */
  val ANNOTATIONFRAGMENT = new Annotationfragment
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Annotationfragment(alias : String, aliased : Table[AnnotationfragmentRecord], parameters : Array[ Field[_] ]) extends TableImpl[AnnotationfragmentRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[AnnotationfragmentRecord] = {
    classOf[AnnotationfragmentRecord]
  }

  /**
   * The column <code>modeldb.AnnotationFragment.id</code>.
   */
  val ID : TableField[AnnotationfragmentRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.annotation</code>.
   */
  val ANNOTATION : TableField[AnnotationfragmentRecord, Integer] = createField("annotation", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.transformer</code>.
   */
  val TRANSFORMER : TableField[AnnotationfragmentRecord, Integer] = createField("transformer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.DataFrame</code>.
   */
  val DATAFRAME : TableField[AnnotationfragmentRecord, Integer] = createField("DataFrame", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.spec</code>.
   */
  val SPEC : TableField[AnnotationfragmentRecord, Integer] = createField("spec", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.experimentRun</code>.
   */
  val EXPERIMENTRUN : TableField[AnnotationfragmentRecord, Integer] = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.fragmentIndex</code>.
   */
  val FRAGMENTINDEX : TableField[AnnotationfragmentRecord, Integer] = createField("fragmentIndex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.type</code>.
   */
  val TYPE : TableField[AnnotationfragmentRecord, String] = createField("type", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>modeldb.AnnotationFragment.message</code>.
   */
  val MESSAGE : TableField[AnnotationfragmentRecord, String] = createField("message", org.jooq.impl.SQLDataType.CLOB, "")

  /**
   * Create a <code>modeldb.AnnotationFragment</code> table reference
   */
  def this() = {
    this("AnnotationFragment", null, null)
  }

  /**
   * Create an aliased <code>modeldb.AnnotationFragment</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Annotationfragment.ANNOTATIONFRAGMENT, null)
  }

  private def this(alias : String, aliased : Table[AnnotationfragmentRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[AnnotationfragmentRecord, Integer] = {
    Keys.IDENTITY_ANNOTATIONFRAGMENT
  }

  override def getPrimaryKey : UniqueKey[AnnotationfragmentRecord] = {
    Keys.KEY_ANNOTATIONFRAGMENT_PRIMARY
  }

  override def getKeys : List[ UniqueKey[AnnotationfragmentRecord] ] = {
    return Arrays.asList[ UniqueKey[AnnotationfragmentRecord] ](Keys.KEY_ANNOTATIONFRAGMENT_PRIMARY)
  }

  override def getReferences : List[ ForeignKey[AnnotationfragmentRecord, _] ] = {
    return Arrays.asList[ ForeignKey[AnnotationfragmentRecord, _] ](Keys.ANNOTATIONFRAGMENT_IBFK_1, Keys.ANNOTATIONFRAGMENT_IBFK_2, Keys.ANNOTATIONFRAGMENT_IBFK_3, Keys.ANNOTATIONFRAGMENT_IBFK_4, Keys.ANNOTATIONFRAGMENT_IBFK_5)
  }

  override def as(alias : String) : Annotationfragment = {
    new Annotationfragment(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Annotationfragment = {
    new Annotationfragment(name, null)
  }
}
