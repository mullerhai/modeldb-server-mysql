/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.daos


import java.lang.Double
import java.lang.Integer
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.tables.Dataframesplit
import jooq.mysql.gen.tables.records.DataframesplitRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class DataframesplitDao(configuration : Configuration) extends DAOImpl[DataframesplitRecord, jooq.mysql.gen.tables.pojos.Dataframesplit, Integer](Dataframesplit.DATAFRAMESPLIT, classOf[jooq.mysql.gen.tables.pojos.Dataframesplit], configuration) {

  /**
   * Create a new DataframesplitDao without any configuration
   */
  def this() = {
    this(null)
  }

  override protected def getId(o : jooq.mysql.gen.tables.pojos.Dataframesplit) : Integer = {
    o.getId
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  def fetchById(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Dataframesplit] = {
    fetch(Dataframesplit.DATAFRAMESPLIT.ID, values:_*)
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  def fetchOneById(value : Integer) : jooq.mysql.gen.tables.pojos.Dataframesplit = {
    fetchOne(Dataframesplit.DATAFRAMESPLIT.ID, value)
  }

  /**
   * Fetch records that have <code>splitEventId IN (values)</code>
   */
  def fetchBySpliteventid(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Dataframesplit] = {
    fetch(Dataframesplit.DATAFRAMESPLIT.SPLITEVENTID, values:_*)
  }

  /**
   * Fetch records that have <code>weight IN (values)</code>
   */
  def fetchByWeight(values : Double*) : List[jooq.mysql.gen.tables.pojos.Dataframesplit] = {
    fetch(Dataframesplit.DATAFRAMESPLIT.WEIGHT, values:_*)
  }

  /**
   * Fetch records that have <code>dataFrameId IN (values)</code>
   */
  def fetchByDataframeid(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Dataframesplit] = {
    fetch(Dataframesplit.DATAFRAMESPLIT.DATAFRAMEID, values:_*)
  }

  /**
   * Fetch records that have <code>experimentRun IN (values)</code>
   */
  def fetchByExperimentrun(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Dataframesplit] = {
    fetch(Dataframesplit.DATAFRAMESPLIT.EXPERIMENTRUN, values:_*)
  }
}
