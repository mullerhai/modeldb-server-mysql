/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.daos


import java.lang.Double
import java.lang.Integer
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.tables.Treenode
import jooq.mysql.gen.tables.records.TreenodeRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class TreenodeDao(configuration : Configuration) extends DAOImpl[TreenodeRecord, jooq.mysql.gen.tables.pojos.Treenode, Integer](Treenode.TREENODE, classOf[jooq.mysql.gen.tables.pojos.Treenode], configuration) {

  /**
   * Create a new TreenodeDao without any configuration
   */
  def this() = {
    this(null)
  }

  override protected def getId(o : jooq.mysql.gen.tables.pojos.Treenode) : Integer = {
    o.getId
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  def fetchById(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.ID, values:_*)
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  def fetchOneById(value : Integer) : jooq.mysql.gen.tables.pojos.Treenode = {
    fetchOne(Treenode.TREENODE.ID, value)
  }

  /**
   * Fetch records that have <code>isLeaf IN (values)</code>
   */
  def fetchByIsleaf(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.ISLEAF, values:_*)
  }

  /**
   * Fetch records that have <code>prediction IN (values)</code>
   */
  def fetchByPrediction(values : Double*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.PREDICTION, values:_*)
  }

  /**
   * Fetch records that have <code>impurity IN (values)</code>
   */
  def fetchByImpurity(values : Double*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.IMPURITY, values:_*)
  }

  /**
   * Fetch records that have <code>gain IN (values)</code>
   */
  def fetchByGain(values : Double*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.GAIN, values:_*)
  }

  /**
   * Fetch records that have <code>splitIndex IN (values)</code>
   */
  def fetchBySplitindex(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.SPLITINDEX, values:_*)
  }

  /**
   * Fetch records that have <code>rootNode IN (values)</code>
   */
  def fetchByRootnode(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Treenode] = {
    fetch(Treenode.TREENODE.ROOTNODE, values:_*)
  }
}
