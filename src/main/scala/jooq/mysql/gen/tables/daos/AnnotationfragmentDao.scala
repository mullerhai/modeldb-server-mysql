/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.daos


import java.lang.Integer
import java.lang.String
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.tables.Annotationfragment
import jooq.mysql.gen.tables.records.AnnotationfragmentRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class AnnotationfragmentDao(configuration : Configuration) extends DAOImpl[AnnotationfragmentRecord, jooq.mysql.gen.tables.pojos.Annotationfragment, Integer](Annotationfragment.ANNOTATIONFRAGMENT, classOf[jooq.mysql.gen.tables.pojos.Annotationfragment], configuration) {

  /**
   * Create a new AnnotationfragmentDao without any configuration
   */
  def this() = {
    this(null)
  }

  override protected def getId(o : jooq.mysql.gen.tables.pojos.Annotationfragment) : Integer = {
    o.getId
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  def fetchById(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.ID, values:_*)
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  def fetchOneById(value : Integer) : jooq.mysql.gen.tables.pojos.Annotationfragment = {
    fetchOne(Annotationfragment.ANNOTATIONFRAGMENT.ID, value)
  }

  /**
   * Fetch records that have <code>annotation IN (values)</code>
   */
  def fetchByAnnotation(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.ANNOTATION, values:_*)
  }

  /**
   * Fetch records that have <code>transformer IN (values)</code>
   */
  def fetchByTransformer(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.TRANSFORMER, values:_*)
  }

  /**
   * Fetch records that have <code>DataFrame IN (values)</code>
   */
  def fetchByDataframe(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.DATAFRAME, values:_*)
  }

  /**
   * Fetch records that have <code>spec IN (values)</code>
   */
  def fetchBySpec(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.SPEC, values:_*)
  }

  /**
   * Fetch records that have <code>experimentRun IN (values)</code>
   */
  def fetchByExperimentrun(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.EXPERIMENTRUN, values:_*)
  }

  /**
   * Fetch records that have <code>fragmentIndex IN (values)</code>
   */
  def fetchByFragmentindex(values : Integer*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.FRAGMENTINDEX, values:_*)
  }

  /**
   * Fetch records that have <code>type IN (values)</code>
   */
  def fetchByType(values : String*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.TYPE, values:_*)
  }

  /**
   * Fetch records that have <code>message IN (values)</code>
   */
  def fetchByMessage(values : String*) : List[jooq.mysql.gen.tables.pojos.Annotationfragment] = {
    fetch(Annotationfragment.ANNOTATIONFRAGMENT.MESSAGE, values:_*)
  }
}
