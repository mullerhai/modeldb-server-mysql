/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.Fitevent

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class FiteventRecord extends UpdatableRecordImpl[FiteventRecord](Fitevent.FITEVENT) with Record8[Integer, Integer, Integer, Integer, String, String, Integer, String] {

  /**
   * Setter for <code>modeldb.FitEvent.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.FitEvent.transformerSpec</code>.
   */
  def setTransformerspec(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.transformerSpec</code>.
   */
  def getTransformerspec : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.FitEvent.transformer</code>.
   */
  def setTransformer(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.transformer</code>.
   */
  def getTransformer : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.FitEvent.df</code>.
   */
  def setDf(value : Integer) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.df</code>.
   */
  def getDf : Integer = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.FitEvent.predictionColumns</code>.
   */
  def setPredictioncolumns(value : String) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.predictionColumns</code>.
   */
  def getPredictioncolumns : String = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.FitEvent.labelColumns</code>.
   */
  def setLabelcolumns(value : String) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.labelColumns</code>.
   */
  def getLabelcolumns : String = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.FitEvent.experimentRun</code>.
   */
  def setExperimentrun(value : Integer) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.experimentRun</code>.
   */
  def getExperimentrun : Integer = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.FitEvent.problemType</code>.
   */
  def setProblemtype(value : String) : Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>modeldb.FitEvent.problemType</code>.
   */
  def getProblemtype : String = {
    val r = get(7)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record8 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row8[Integer, Integer, Integer, Integer, String, String, Integer, String] = {
    super.fieldsRow.asInstanceOf[ Row8[Integer, Integer, Integer, Integer, String, String, Integer, String] ]
  }

  override def valuesRow : Row8[Integer, Integer, Integer, Integer, String, String, Integer, String] = {
    super.valuesRow.asInstanceOf[ Row8[Integer, Integer, Integer, Integer, String, String, Integer, String] ]
  }
  override def field1 : Field[Integer] = Fitevent.FITEVENT.ID
  override def field2 : Field[Integer] = Fitevent.FITEVENT.TRANSFORMERSPEC
  override def field3 : Field[Integer] = Fitevent.FITEVENT.TRANSFORMER
  override def field4 : Field[Integer] = Fitevent.FITEVENT.DF
  override def field5 : Field[String] = Fitevent.FITEVENT.PREDICTIONCOLUMNS
  override def field6 : Field[String] = Fitevent.FITEVENT.LABELCOLUMNS
  override def field7 : Field[Integer] = Fitevent.FITEVENT.EXPERIMENTRUN
  override def field8 : Field[String] = Fitevent.FITEVENT.PROBLEMTYPE
  override def value1 : Integer = getId
  override def value2 : Integer = getTransformerspec
  override def value3 : Integer = getTransformer
  override def value4 : Integer = getDf
  override def value5 : String = getPredictioncolumns
  override def value6 : String = getLabelcolumns
  override def value7 : Integer = getExperimentrun
  override def value8 : String = getProblemtype

  override def value1(value : Integer) : FiteventRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : FiteventRecord = {
    setTransformerspec(value)
    this
  }

  override def value3(value : Integer) : FiteventRecord = {
    setTransformer(value)
    this
  }

  override def value4(value : Integer) : FiteventRecord = {
    setDf(value)
    this
  }

  override def value5(value : String) : FiteventRecord = {
    setPredictioncolumns(value)
    this
  }

  override def value6(value : String) : FiteventRecord = {
    setLabelcolumns(value)
    this
  }

  override def value7(value : Integer) : FiteventRecord = {
    setExperimentrun(value)
    this
  }

  override def value8(value : String) : FiteventRecord = {
    setProblemtype(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : Integer, value5 : String, value6 : String, value7 : Integer, value8 : String) : FiteventRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this
  }

  /**
   * Create a detached, initialised FiteventRecord
   */
  def this(id : Integer, transformerspec : Integer, transformer : Integer, df : Integer, predictioncolumns : String, labelcolumns : String, experimentrun : Integer, problemtype : String) = {
    this()

    set(0, id)
    set(1, transformerspec)
    set(2, transformer)
    set(3, df)
    set(4, predictioncolumns)
    set(5, labelcolumns)
    set(6, experimentrun)
    set(7, problemtype)
  }
}
