/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.Treemodel

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class TreemodelRecord extends UpdatableRecordImpl[TreemodelRecord](Treemodel.TREEMODEL) with Record3[Integer, Integer, String] {

  /**
   * Setter for <code>modeldb.TreeModel.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.TreeModel.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.TreeModel.model</code>.
   */
  def setModel(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.TreeModel.model</code>.
   */
  def getModel : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.TreeModel.modelType</code>.
   */
  def setModeltype(value : String) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.TreeModel.modelType</code>.
   */
  def getModeltype : String = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, Integer, String] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, Integer, String] ]
  }

  override def valuesRow : Row3[Integer, Integer, String] = {
    super.valuesRow.asInstanceOf[ Row3[Integer, Integer, String] ]
  }
  override def field1 : Field[Integer] = Treemodel.TREEMODEL.ID
  override def field2 : Field[Integer] = Treemodel.TREEMODEL.MODEL
  override def field3 : Field[String] = Treemodel.TREEMODEL.MODELTYPE
  override def value1 : Integer = getId
  override def value2 : Integer = getModel
  override def value3 : String = getModeltype

  override def value1(value : Integer) : TreemodelRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : TreemodelRecord = {
    setModel(value)
    this
  }

  override def value3(value : String) : TreemodelRecord = {
    setModeltype(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : String) : TreemodelRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised TreemodelRecord
   */
  def this(id : Integer, model : Integer, modeltype : String) = {
    this()

    set(0, id)
    set(1, model)
    set(2, modeltype)
  }
}
