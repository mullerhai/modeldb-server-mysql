/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.PipelineView

import org.jooq.Field
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl

import scala.Array


/**
 * VIEW
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class PipelineViewRecord extends TableRecordImpl[PipelineViewRecord](PipelineView.PIPELINE_VIEW) with Record5[Integer, Integer, Integer, String, Integer] {

  /**
   * Setter for <code>modeldb.pipeline_view.pipelinefitevent</code>.
   */
  def setPipelinefitevent(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.pipeline_view.pipelinefitevent</code>.
   */
  def getPipelinefitevent : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.pipeline_view.stagenumber</code>.
   */
  def setStagenumber(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.pipeline_view.stagenumber</code>.
   */
  def getStagenumber : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.pipeline_view.event_id</code>.
   */
  def setEventId(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.pipeline_view.event_id</code>.
   */
  def getEventId : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.pipeline_view.eventtype</code>.
   */
  def setEventtype(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.pipeline_view.eventtype</code>.
   */
  def getEventtype : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.pipeline_view.eventid</code>.
   */
  def setEventid(value : Integer) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.pipeline_view.eventid</code>.
   */
  def getEventid : Integer = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row5[Integer, Integer, Integer, String, Integer] = {
    super.fieldsRow.asInstanceOf[ Row5[Integer, Integer, Integer, String, Integer] ]
  }

  override def valuesRow : Row5[Integer, Integer, Integer, String, Integer] = {
    super.valuesRow.asInstanceOf[ Row5[Integer, Integer, Integer, String, Integer] ]
  }
  override def field1 : Field[Integer] = PipelineView.PIPELINE_VIEW.PIPELINEFITEVENT
  override def field2 : Field[Integer] = PipelineView.PIPELINE_VIEW.STAGENUMBER
  override def field3 : Field[Integer] = PipelineView.PIPELINE_VIEW.EVENT_ID
  override def field4 : Field[String] = PipelineView.PIPELINE_VIEW.EVENTTYPE
  override def field5 : Field[Integer] = PipelineView.PIPELINE_VIEW.EVENTID
  override def value1 : Integer = getPipelinefitevent
  override def value2 : Integer = getStagenumber
  override def value3 : Integer = getEventId
  override def value4 : String = getEventtype
  override def value5 : Integer = getEventid

  override def value1(value : Integer) : PipelineViewRecord = {
    setPipelinefitevent(value)
    this
  }

  override def value2(value : Integer) : PipelineViewRecord = {
    setStagenumber(value)
    this
  }

  override def value3(value : Integer) : PipelineViewRecord = {
    setEventId(value)
    this
  }

  override def value4(value : String) : PipelineViewRecord = {
    setEventtype(value)
    this
  }

  override def value5(value : Integer) : PipelineViewRecord = {
    setEventid(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : String, value5 : Integer) : PipelineViewRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this
  }

  /**
   * Create a detached, initialised PipelineViewRecord
   */
  def this(pipelinefitevent : Integer, stagenumber : Integer, eventId : Integer, eventtype : String, eventid : Integer) = {
    this()

    set(0, pipelinefitevent)
    set(1, stagenumber)
    set(2, eventId)
    set(3, eventtype)
    set(4, eventid)
  }
}
