/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String
import java.sql.Timestamp

import javax.annotation.Generated

import jooq.mysql.gen.tables.Project

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class ProjectRecord extends UpdatableRecordImpl[ProjectRecord](Project.PROJECT) with Record5[Integer, String, String, String, Timestamp] {

  /**
   * Setter for <code>modeldb.Project.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.Project.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.Project.name</code>.
   */
  def setName(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.Project.name</code>.
   */
  def getName : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.Project.author</code>.
   */
  def setAuthor(value : String) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.Project.author</code>.
   */
  def getAuthor : String = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.Project.description</code>.
   */
  def setDescription(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.Project.description</code>.
   */
  def getDescription : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.Project.created</code>.
   */
  def setCreated(value : Timestamp) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.Project.created</code>.
   */
  def getCreated : Timestamp = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Timestamp]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row5[Integer, String, String, String, Timestamp] = {
    super.fieldsRow.asInstanceOf[ Row5[Integer, String, String, String, Timestamp] ]
  }

  override def valuesRow : Row5[Integer, String, String, String, Timestamp] = {
    super.valuesRow.asInstanceOf[ Row5[Integer, String, String, String, Timestamp] ]
  }
  override def field1 : Field[Integer] = Project.PROJECT.ID
  override def field2 : Field[String] = Project.PROJECT.NAME
  override def field3 : Field[String] = Project.PROJECT.AUTHOR
  override def field4 : Field[String] = Project.PROJECT.DESCRIPTION
  override def field5 : Field[Timestamp] = Project.PROJECT.CREATED
  override def value1 : Integer = getId
  override def value2 : String = getName
  override def value3 : String = getAuthor
  override def value4 : String = getDescription
  override def value5 : Timestamp = getCreated

  override def value1(value : Integer) : ProjectRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : ProjectRecord = {
    setName(value)
    this
  }

  override def value3(value : String) : ProjectRecord = {
    setAuthor(value)
    this
  }

  override def value4(value : String) : ProjectRecord = {
    setDescription(value)
    this
  }

  override def value5(value : Timestamp) : ProjectRecord = {
    setCreated(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : String, value4 : String, value5 : Timestamp) : ProjectRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this
  }

  /**
   * Create a detached, initialised ProjectRecord
   */
  def this(id : Integer, name : String, author : String, description : String, created : Timestamp) = {
    this()

    set(0, id)
    set(1, name)
    set(2, author)
    set(3, description)
    set(4, created)
  }
}
