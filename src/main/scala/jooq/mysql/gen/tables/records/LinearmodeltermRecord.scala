/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Double
import java.lang.Integer

import javax.annotation.Generated

import jooq.mysql.gen.tables.Linearmodelterm

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class LinearmodeltermRecord extends UpdatableRecordImpl[LinearmodeltermRecord](Linearmodelterm.LINEARMODELTERM) with Record7[Integer, Integer, Integer, Double, Double, Double, Double] {

  /**
   * Setter for <code>modeldb.LinearModelTerm.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.LinearModelTerm.model</code>.
   */
  def setModel(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.model</code>.
   */
  def getModel : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.LinearModelTerm.termIndex</code>.
   */
  def setTermindex(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.termIndex</code>.
   */
  def getTermindex : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.LinearModelTerm.coefficient</code>.
   */
  def setCoefficient(value : Double) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.coefficient</code>.
   */
  def getCoefficient : Double = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Double]
  }

  /**
   * Setter for <code>modeldb.LinearModelTerm.tStat</code>.
   */
  def setTstat(value : Double) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.tStat</code>.
   */
  def getTstat : Double = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Double]
  }

  /**
   * Setter for <code>modeldb.LinearModelTerm.stdErr</code>.
   */
  def setStderr(value : Double) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.stdErr</code>.
   */
  def getStderr : Double = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Double]
  }

  /**
   * Setter for <code>modeldb.LinearModelTerm.pValue</code>.
   */
  def setPvalue(value : Double) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>modeldb.LinearModelTerm.pValue</code>.
   */
  def getPvalue : Double = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[Double]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row7[Integer, Integer, Integer, Double, Double, Double, Double] = {
    super.fieldsRow.asInstanceOf[ Row7[Integer, Integer, Integer, Double, Double, Double, Double] ]
  }

  override def valuesRow : Row7[Integer, Integer, Integer, Double, Double, Double, Double] = {
    super.valuesRow.asInstanceOf[ Row7[Integer, Integer, Integer, Double, Double, Double, Double] ]
  }
  override def field1 : Field[Integer] = Linearmodelterm.LINEARMODELTERM.ID
  override def field2 : Field[Integer] = Linearmodelterm.LINEARMODELTERM.MODEL
  override def field3 : Field[Integer] = Linearmodelterm.LINEARMODELTERM.TERMINDEX
  override def field4 : Field[Double] = Linearmodelterm.LINEARMODELTERM.COEFFICIENT
  override def field5 : Field[Double] = Linearmodelterm.LINEARMODELTERM.TSTAT
  override def field6 : Field[Double] = Linearmodelterm.LINEARMODELTERM.STDERR
  override def field7 : Field[Double] = Linearmodelterm.LINEARMODELTERM.PVALUE
  override def value1 : Integer = getId
  override def value2 : Integer = getModel
  override def value3 : Integer = getTermindex
  override def value4 : Double = getCoefficient
  override def value5 : Double = getTstat
  override def value6 : Double = getStderr
  override def value7 : Double = getPvalue

  override def value1(value : Integer) : LinearmodeltermRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : LinearmodeltermRecord = {
    setModel(value)
    this
  }

  override def value3(value : Integer) : LinearmodeltermRecord = {
    setTermindex(value)
    this
  }

  override def value4(value : Double) : LinearmodeltermRecord = {
    setCoefficient(value)
    this
  }

  override def value5(value : Double) : LinearmodeltermRecord = {
    setTstat(value)
    this
  }

  override def value6(value : Double) : LinearmodeltermRecord = {
    setStderr(value)
    this
  }

  override def value7(value : Double) : LinearmodeltermRecord = {
    setPvalue(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : Double, value5 : Double, value6 : Double, value7 : Double) : LinearmodeltermRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this
  }

  /**
   * Create a detached, initialised LinearmodeltermRecord
   */
  def this(id : Integer, model : Integer, termindex : Integer, coefficient : Double, tstat : Double, stderr : Double, pvalue : Double) = {
    this()

    set(0, id)
    set(1, model)
    set(2, termindex)
    set(3, coefficient)
    set(4, tstat)
    set(5, stderr)
    set(6, pvalue)
  }
}
