/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.Metadatakv

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class MetadatakvRecord extends UpdatableRecordImpl[MetadatakvRecord](Metadatakv.METADATAKV) with Record4[Integer, String, String, String] {

  /**
   * Setter for <code>modeldb.MetadataKV.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.MetadataKV.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.MetadataKV.key</code>.
   */
  def setKey(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.MetadataKV.key</code>.
   */
  def getKey : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.MetadataKV.value</code>.
   */
  def setValue(value : String) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.MetadataKV.value</code>.
   */
  def getValue : String = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.MetadataKV.valueType</code>.
   */
  def setValuetype(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.MetadataKV.valueType</code>.
   */
  def getValuetype : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row4[Integer, String, String, String] = {
    super.fieldsRow.asInstanceOf[ Row4[Integer, String, String, String] ]
  }

  override def valuesRow : Row4[Integer, String, String, String] = {
    super.valuesRow.asInstanceOf[ Row4[Integer, String, String, String] ]
  }
  override def field1 : Field[Integer] = Metadatakv.METADATAKV.ID
  override def field2 : Field[String] = Metadatakv.METADATAKV.KEY
  override def field3 : Field[String] = Metadatakv.METADATAKV.VALUE
  override def field4 : Field[String] = Metadatakv.METADATAKV.VALUETYPE
  override def value1 : Integer = getId
  override def value2 : String = getKey
  override def value3 : String = getValue
  override def value4 : String = getValuetype

  override def value1(value : Integer) : MetadatakvRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : MetadatakvRecord = {
    setKey(value)
    this
  }

  override def value3(value : String) : MetadatakvRecord = {
    setValue(value)
    this
  }

  override def value4(value : String) : MetadatakvRecord = {
    setValuetype(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : String, value4 : String) : MetadatakvRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this
  }

  /**
   * Create a detached, initialised MetadatakvRecord
   */
  def this(id : Integer, key : String, value : String, valuetype : String) = {
    this()

    set(0, id)
    set(1, key)
    set(2, value)
    set(3, valuetype)
  }
}
