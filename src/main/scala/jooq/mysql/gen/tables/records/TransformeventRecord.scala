/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.Transformevent

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class TransformeventRecord extends UpdatableRecordImpl[TransformeventRecord](Transformevent.TRANSFORMEVENT) with Record7[Integer, Integer, Integer, Integer, String, String, Integer] {

  /**
   * Setter for <code>modeldb.TransformEvent.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.TransformEvent.oldDf</code>.
   */
  def setOlddf(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.oldDf</code>.
   */
  def getOlddf : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.TransformEvent.newDf</code>.
   */
  def setNewdf(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.newDf</code>.
   */
  def getNewdf : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.TransformEvent.transformer</code>.
   */
  def setTransformer(value : Integer) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.transformer</code>.
   */
  def getTransformer : Integer = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.TransformEvent.inputColumns</code>.
   */
  def setInputcolumns(value : String) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.inputColumns</code>.
   */
  def getInputcolumns : String = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.TransformEvent.outputColumns</code>.
   */
  def setOutputcolumns(value : String) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.outputColumns</code>.
   */
  def getOutputcolumns : String = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.TransformEvent.experimentRun</code>.
   */
  def setExperimentrun(value : Integer) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>modeldb.TransformEvent.experimentRun</code>.
   */
  def getExperimentrun : Integer = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row7[Integer, Integer, Integer, Integer, String, String, Integer] = {
    super.fieldsRow.asInstanceOf[ Row7[Integer, Integer, Integer, Integer, String, String, Integer] ]
  }

  override def valuesRow : Row7[Integer, Integer, Integer, Integer, String, String, Integer] = {
    super.valuesRow.asInstanceOf[ Row7[Integer, Integer, Integer, Integer, String, String, Integer] ]
  }
  override def field1 : Field[Integer] = Transformevent.TRANSFORMEVENT.ID
  override def field2 : Field[Integer] = Transformevent.TRANSFORMEVENT.OLDDF
  override def field3 : Field[Integer] = Transformevent.TRANSFORMEVENT.NEWDF
  override def field4 : Field[Integer] = Transformevent.TRANSFORMEVENT.TRANSFORMER
  override def field5 : Field[String] = Transformevent.TRANSFORMEVENT.INPUTCOLUMNS
  override def field6 : Field[String] = Transformevent.TRANSFORMEVENT.OUTPUTCOLUMNS
  override def field7 : Field[Integer] = Transformevent.TRANSFORMEVENT.EXPERIMENTRUN
  override def value1 : Integer = getId
  override def value2 : Integer = getOlddf
  override def value3 : Integer = getNewdf
  override def value4 : Integer = getTransformer
  override def value5 : String = getInputcolumns
  override def value6 : String = getOutputcolumns
  override def value7 : Integer = getExperimentrun

  override def value1(value : Integer) : TransformeventRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : TransformeventRecord = {
    setOlddf(value)
    this
  }

  override def value3(value : Integer) : TransformeventRecord = {
    setNewdf(value)
    this
  }

  override def value4(value : Integer) : TransformeventRecord = {
    setTransformer(value)
    this
  }

  override def value5(value : String) : TransformeventRecord = {
    setInputcolumns(value)
    this
  }

  override def value6(value : String) : TransformeventRecord = {
    setOutputcolumns(value)
    this
  }

  override def value7(value : Integer) : TransformeventRecord = {
    setExperimentrun(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : Integer, value5 : String, value6 : String, value7 : Integer) : TransformeventRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this
  }

  /**
   * Create a detached, initialised TransformeventRecord
   */
  def this(id : Integer, olddf : Integer, newdf : Integer, transformer : Integer, inputcolumns : String, outputcolumns : String, experimentrun : Integer) = {
    this()

    set(0, id)
    set(1, olddf)
    set(2, newdf)
    set(3, transformer)
    set(4, inputcolumns)
    set(5, outputcolumns)
    set(6, experimentrun)
  }
}
