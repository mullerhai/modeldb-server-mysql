/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.TransformerView

import org.jooq.Field
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.TableRecordImpl

import scala.Array


/**
 * VIEW
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class TransformerViewRecord extends TableRecordImpl[TransformerViewRecord](TransformerView.TRANSFORMER_VIEW) with Record5[Integer, String, Integer, Integer, Integer] {

  /**
   * Setter for <code>modeldb.transformer_view.te_id</code>.
   */
  def setTeId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.transformer_view.te_id</code>.
   */
  def getTeId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.transformer_view.transformer_type</code>.
   */
  def setTransformerType(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.transformer_view.transformer_type</code>.
   */
  def getTransformerType : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.transformer_view.transformer</code>.
   */
  def setTransformer(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.transformer_view.transformer</code>.
   */
  def getTransformer : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.transformer_view.input_df</code>.
   */
  def setInputDf(value : Integer) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.transformer_view.input_df</code>.
   */
  def getInputDf : Integer = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.transformer_view.output_df</code>.
   */
  def setOutputDf(value : Integer) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.transformer_view.output_df</code>.
   */
  def getOutputDf : Integer = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row5[Integer, String, Integer, Integer, Integer] = {
    super.fieldsRow.asInstanceOf[ Row5[Integer, String, Integer, Integer, Integer] ]
  }

  override def valuesRow : Row5[Integer, String, Integer, Integer, Integer] = {
    super.valuesRow.asInstanceOf[ Row5[Integer, String, Integer, Integer, Integer] ]
  }
  override def field1 : Field[Integer] = TransformerView.TRANSFORMER_VIEW.TE_ID
  override def field2 : Field[String] = TransformerView.TRANSFORMER_VIEW.TRANSFORMER_TYPE
  override def field3 : Field[Integer] = TransformerView.TRANSFORMER_VIEW.TRANSFORMER
  override def field4 : Field[Integer] = TransformerView.TRANSFORMER_VIEW.INPUT_DF
  override def field5 : Field[Integer] = TransformerView.TRANSFORMER_VIEW.OUTPUT_DF
  override def value1 : Integer = getTeId
  override def value2 : String = getTransformerType
  override def value3 : Integer = getTransformer
  override def value4 : Integer = getInputDf
  override def value5 : Integer = getOutputDf

  override def value1(value : Integer) : TransformerViewRecord = {
    setTeId(value)
    this
  }

  override def value2(value : String) : TransformerViewRecord = {
    setTransformerType(value)
    this
  }

  override def value3(value : Integer) : TransformerViewRecord = {
    setTransformer(value)
    this
  }

  override def value4(value : Integer) : TransformerViewRecord = {
    setInputDf(value)
    this
  }

  override def value5(value : Integer) : TransformerViewRecord = {
    setOutputDf(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : Integer, value4 : Integer, value5 : Integer) : TransformerViewRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this
  }

  /**
   * Create a detached, initialised TransformerViewRecord
   */
  def this(teId : Integer, transformerType : String, transformer : Integer, inputDf : Integer, outputDf : Integer) = {
    this()

    set(0, teId)
    set(1, transformerType)
    set(2, transformer)
    set(3, inputDf)
    set(4, outputDf)
  }
}
