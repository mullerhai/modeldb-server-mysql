/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer

import javax.annotation.Generated

import jooq.mysql.gen.tables.Dataframemetadata

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class DataframemetadataRecord extends UpdatableRecordImpl[DataframemetadataRecord](Dataframemetadata.DATAFRAMEMETADATA) with Record3[Integer, Integer, Integer] {

  /**
   * Setter for <code>modeldb.DataFrameMetadata.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.DataFrameMetadata.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.DataFrameMetadata.dfId</code>.
   */
  def setDfid(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.DataFrameMetadata.dfId</code>.
   */
  def getDfid : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.DataFrameMetadata.metadataKvId</code>.
   */
  def setMetadatakvid(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.DataFrameMetadata.metadataKvId</code>.
   */
  def getMetadatakvid : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, Integer, Integer] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, Integer, Integer] ]
  }

  override def valuesRow : Row3[Integer, Integer, Integer] = {
    super.valuesRow.asInstanceOf[ Row3[Integer, Integer, Integer] ]
  }
  override def field1 : Field[Integer] = Dataframemetadata.DATAFRAMEMETADATA.ID
  override def field2 : Field[Integer] = Dataframemetadata.DATAFRAMEMETADATA.DFID
  override def field3 : Field[Integer] = Dataframemetadata.DATAFRAMEMETADATA.METADATAKVID
  override def value1 : Integer = getId
  override def value2 : Integer = getDfid
  override def value3 : Integer = getMetadatakvid

  override def value1(value : Integer) : DataframemetadataRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : DataframemetadataRecord = {
    setDfid(value)
    this
  }

  override def value3(value : Integer) : DataframemetadataRecord = {
    setMetadatakvid(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer) : DataframemetadataRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised DataframemetadataRecord
   */
  def this(id : Integer, dfid : Integer, metadatakvid : Integer) = {
    this()

    set(0, id)
    set(1, dfid)
    set(2, metadatakvid)
  }
}
