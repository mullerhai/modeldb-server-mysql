/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Double
import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.Feature

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class FeatureRecord extends UpdatableRecordImpl[FeatureRecord](Feature.FEATURE) with Record5[Integer, String, Integer, Double, Integer] {

  /**
   * Setter for <code>modeldb.Feature.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.Feature.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.Feature.name</code>.
   */
  def setName(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.Feature.name</code>.
   */
  def getName : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.Feature.featureIndex</code>.
   */
  def setFeatureindex(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.Feature.featureIndex</code>.
   */
  def getFeatureindex : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.Feature.importance</code>.
   */
  def setImportance(value : Double) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.Feature.importance</code>.
   */
  def getImportance : Double = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Double]
  }

  /**
   * Setter for <code>modeldb.Feature.transformer</code>.
   */
  def setTransformer(value : Integer) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.Feature.transformer</code>.
   */
  def getTransformer : Integer = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record5 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row5[Integer, String, Integer, Double, Integer] = {
    super.fieldsRow.asInstanceOf[ Row5[Integer, String, Integer, Double, Integer] ]
  }

  override def valuesRow : Row5[Integer, String, Integer, Double, Integer] = {
    super.valuesRow.asInstanceOf[ Row5[Integer, String, Integer, Double, Integer] ]
  }
  override def field1 : Field[Integer] = Feature.FEATURE.ID
  override def field2 : Field[String] = Feature.FEATURE.NAME
  override def field3 : Field[Integer] = Feature.FEATURE.FEATUREINDEX
  override def field4 : Field[Double] = Feature.FEATURE.IMPORTANCE
  override def field5 : Field[Integer] = Feature.FEATURE.TRANSFORMER
  override def value1 : Integer = getId
  override def value2 : String = getName
  override def value3 : Integer = getFeatureindex
  override def value4 : Double = getImportance
  override def value5 : Integer = getTransformer

  override def value1(value : Integer) : FeatureRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : FeatureRecord = {
    setName(value)
    this
  }

  override def value3(value : Integer) : FeatureRecord = {
    setFeatureindex(value)
    this
  }

  override def value4(value : Double) : FeatureRecord = {
    setImportance(value)
    this
  }

  override def value5(value : Integer) : FeatureRecord = {
    setTransformer(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : Integer, value4 : Double, value5 : Integer) : FeatureRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this
  }

  /**
   * Create a detached, initialised FeatureRecord
   */
  def this(id : Integer, name : String, featureindex : Integer, importance : Double, transformer : Integer) = {
    this()

    set(0, id)
    set(1, name)
    set(2, featureindex)
    set(3, importance)
    set(4, transformer)
  }
}
