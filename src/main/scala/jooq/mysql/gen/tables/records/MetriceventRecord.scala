/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Double
import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import jooq.mysql.gen.tables.Metricevent

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class MetriceventRecord extends UpdatableRecordImpl[MetriceventRecord](Metricevent.METRICEVENT) with Record6[Integer, Integer, Integer, String, Double, Integer] {

  /**
   * Setter for <code>modeldb.MetricEvent.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.MetricEvent.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.MetricEvent.transformer</code>.
   */
  def setTransformer(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.MetricEvent.transformer</code>.
   */
  def getTransformer : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.MetricEvent.df</code>.
   */
  def setDf(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.MetricEvent.df</code>.
   */
  def getDf : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.MetricEvent.metricType</code>.
   */
  def setMetrictype(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>modeldb.MetricEvent.metricType</code>.
   */
  def getMetrictype : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>modeldb.MetricEvent.metricValue</code>.
   */
  def setMetricvalue(value : Double) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>modeldb.MetricEvent.metricValue</code>.
   */
  def getMetricvalue : Double = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Double]
  }

  /**
   * Setter for <code>modeldb.MetricEvent.experimentRun</code>.
   */
  def setExperimentrun(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>modeldb.MetricEvent.experimentRun</code>.
   */
  def getExperimentrun : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record6 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row6[Integer, Integer, Integer, String, Double, Integer] = {
    super.fieldsRow.asInstanceOf[ Row6[Integer, Integer, Integer, String, Double, Integer] ]
  }

  override def valuesRow : Row6[Integer, Integer, Integer, String, Double, Integer] = {
    super.valuesRow.asInstanceOf[ Row6[Integer, Integer, Integer, String, Double, Integer] ]
  }
  override def field1 : Field[Integer] = Metricevent.METRICEVENT.ID
  override def field2 : Field[Integer] = Metricevent.METRICEVENT.TRANSFORMER
  override def field3 : Field[Integer] = Metricevent.METRICEVENT.DF
  override def field4 : Field[String] = Metricevent.METRICEVENT.METRICTYPE
  override def field5 : Field[Double] = Metricevent.METRICEVENT.METRICVALUE
  override def field6 : Field[Integer] = Metricevent.METRICEVENT.EXPERIMENTRUN
  override def value1 : Integer = getId
  override def value2 : Integer = getTransformer
  override def value3 : Integer = getDf
  override def value4 : String = getMetrictype
  override def value5 : Double = getMetricvalue
  override def value6 : Integer = getExperimentrun

  override def value1(value : Integer) : MetriceventRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : MetriceventRecord = {
    setTransformer(value)
    this
  }

  override def value3(value : Integer) : MetriceventRecord = {
    setDf(value)
    this
  }

  override def value4(value : String) : MetriceventRecord = {
    setMetrictype(value)
    this
  }

  override def value5(value : Double) : MetriceventRecord = {
    setMetricvalue(value)
    this
  }

  override def value6(value : Integer) : MetriceventRecord = {
    setExperimentrun(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : String, value5 : Double, value6 : Integer) : MetriceventRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this
  }

  /**
   * Create a detached, initialised MetriceventRecord
   */
  def this(id : Integer, transformer : Integer, df : Integer, metrictype : String, metricvalue : Double, experimentrun : Integer) = {
    this()

    set(0, id)
    set(1, transformer)
    set(2, df)
    set(3, metrictype)
    set(4, metricvalue)
    set(5, experimentrun)
  }
}
