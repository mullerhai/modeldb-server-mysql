/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer
import java.sql.Timestamp

import javax.annotation.Generated

import jooq.mysql.gen.tables.Annotation

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class AnnotationRecord extends UpdatableRecordImpl[AnnotationRecord](Annotation.ANNOTATION) with Record3[Integer, Timestamp, Integer] {

  /**
   * Setter for <code>modeldb.Annotation.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.Annotation.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.Annotation.posted</code>.
   */
  def setPosted(value : Timestamp) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.Annotation.posted</code>.
   */
  def getPosted : Timestamp = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Timestamp]
  }

  /**
   * Setter for <code>modeldb.Annotation.experimentRun</code>.
   */
  def setExperimentrun(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.Annotation.experimentRun</code>.
   */
  def getExperimentrun : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, Timestamp, Integer] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, Timestamp, Integer] ]
  }

  override def valuesRow : Row3[Integer, Timestamp, Integer] = {
    super.valuesRow.asInstanceOf[ Row3[Integer, Timestamp, Integer] ]
  }
  override def field1 : Field[Integer] = Annotation.ANNOTATION.ID
  override def field2 : Field[Timestamp] = Annotation.ANNOTATION.POSTED
  override def field3 : Field[Integer] = Annotation.ANNOTATION.EXPERIMENTRUN
  override def value1 : Integer = getId
  override def value2 : Timestamp = getPosted
  override def value3 : Integer = getExperimentrun

  override def value1(value : Integer) : AnnotationRecord = {
    setId(value)
    this
  }

  override def value2(value : Timestamp) : AnnotationRecord = {
    setPosted(value)
    this
  }

  override def value3(value : Integer) : AnnotationRecord = {
    setExperimentrun(value)
    this
  }

  override def values(value1 : Integer, value2 : Timestamp, value3 : Integer) : AnnotationRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised AnnotationRecord
   */
  def this(id : Integer, posted : Timestamp, experimentrun : Integer) = {
    this()

    set(0, id)
    set(1, posted)
    set(2, experimentrun)
  }
}
