/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.records


import java.lang.Integer

import javax.annotation.Generated

import jooq.mysql.gen.tables.ExperimentRunView

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.TableRecordImpl

import scala.Array


/**
 * VIEW
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class ExperimentRunViewRecord extends TableRecordImpl[ExperimentRunViewRecord](ExperimentRunView.EXPERIMENT_RUN_VIEW) with Record3[Integer, Integer, Integer] {

  /**
   * Setter for <code>modeldb.experiment_run_view.experimentRunId</code>.
   */
  def setExperimentrunid(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>modeldb.experiment_run_view.experimentRunId</code>.
   */
  def getExperimentrunid : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.experiment_run_view.experimentId</code>.
   */
  def setExperimentid(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>modeldb.experiment_run_view.experimentId</code>.
   */
  def getExperimentid : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>modeldb.experiment_run_view.projectId</code>.
   */
  def setProjectid(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>modeldb.experiment_run_view.projectId</code>.
   */
  def getProjectid : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, Integer, Integer] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, Integer, Integer] ]
  }

  override def valuesRow : Row3[Integer, Integer, Integer] = {
    super.valuesRow.asInstanceOf[ Row3[Integer, Integer, Integer] ]
  }
  override def field1 : Field[Integer] = ExperimentRunView.EXPERIMENT_RUN_VIEW.EXPERIMENTRUNID
  override def field2 : Field[Integer] = ExperimentRunView.EXPERIMENT_RUN_VIEW.EXPERIMENTID
  override def field3 : Field[Integer] = ExperimentRunView.EXPERIMENT_RUN_VIEW.PROJECTID
  override def value1 : Integer = getExperimentrunid
  override def value2 : Integer = getExperimentid
  override def value3 : Integer = getProjectid

  override def value1(value : Integer) : ExperimentRunViewRecord = {
    setExperimentrunid(value)
    this
  }

  override def value2(value : Integer) : ExperimentRunViewRecord = {
    setExperimentid(value)
    this
  }

  override def value3(value : Integer) : ExperimentRunViewRecord = {
    setProjectid(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer) : ExperimentRunViewRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised ExperimentRunViewRecord
   */
  def this(experimentrunid : Integer, experimentid : Integer, projectid : Integer) = {
    this()

    set(0, experimentrunid)
    set(1, experimentid)
    set(2, projectid)
  }
}
