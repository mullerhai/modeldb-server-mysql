/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.MetadatakvRecord

import org.jooq.Field
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Metadatakv {

  /**
   * The reference instance of <code>modeldb.MetadataKV</code>
   */
  val METADATAKV = new Metadatakv
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Metadatakv(alias : String, aliased : Table[MetadatakvRecord], parameters : Array[ Field[_] ]) extends TableImpl[MetadatakvRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[MetadatakvRecord] = {
    classOf[MetadatakvRecord]
  }

  /**
   * The column <code>modeldb.MetadataKV.id</code>.
   */
  val ID : TableField[MetadatakvRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.MetadataKV.key</code>.
   */
  val KEY : TableField[MetadatakvRecord, String] = createField("key", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>modeldb.MetadataKV.value</code>.
   */
  val VALUE : TableField[MetadatakvRecord, String] = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * The column <code>modeldb.MetadataKV.valueType</code>.
   */
  val VALUETYPE : TableField[MetadatakvRecord, String] = createField("valueType", org.jooq.impl.SQLDataType.CLOB.nullable(false), "")

  /**
   * Create a <code>modeldb.MetadataKV</code> table reference
   */
  def this() = {
    this("MetadataKV", null, null)
  }

  /**
   * Create an aliased <code>modeldb.MetadataKV</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Metadatakv.METADATAKV, null)
  }

  private def this(alias : String, aliased : Table[MetadatakvRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[MetadatakvRecord, Integer] = {
    Keys.IDENTITY_METADATAKV
  }

  override def getPrimaryKey : UniqueKey[MetadatakvRecord] = {
    Keys.KEY_METADATAKV_PRIMARY
  }

  override def getKeys : List[ UniqueKey[MetadatakvRecord] ] = {
    return Arrays.asList[ UniqueKey[MetadatakvRecord] ](Keys.KEY_METADATAKV_PRIMARY)
  }

  override def as(alias : String) : Metadatakv = {
    new Metadatakv(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Metadatakv = {
    new Metadatakv(name, null)
  }
}
