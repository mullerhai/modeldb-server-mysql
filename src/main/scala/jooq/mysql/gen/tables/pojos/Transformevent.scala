/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String
import java.lang.StringBuilder

import javax.annotation.Generated

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Transformevent(
    private var id : Integer
  , private var olddf : Integer
  , private var newdf : Integer
  , private var transformer : Integer
  , private var inputcolumns : String 
  , private var outputcolumns : String 
  , private var experimentrun : Integer
) extends Serializable {

  def this() = {
    this(null, null, null, null, null, null, null)
  }

  def this (value : Transformevent) = {
    this(
        value.id
      , value.olddf
      , value.newdf
      , value.transformer
      , value.inputcolumns
      , value.outputcolumns
      , value.experimentrun
    )
  }

  def getId : Integer = {
    this.id
  }

  def setId(id : Integer) : Unit = {
    this.id = id
  }

  def getOlddf : Integer = {
    this.olddf
  }

  def setOlddf(olddf : Integer) : Unit = {
    this.olddf = olddf
  }

  def getNewdf : Integer = {
    this.newdf
  }

  def setNewdf(newdf : Integer) : Unit = {
    this.newdf = newdf
  }

  def getTransformer : Integer = {
    this.transformer
  }

  def setTransformer(transformer : Integer) : Unit = {
    this.transformer = transformer
  }

  def getInputcolumns : String = {
    this.inputcolumns
  }

  def setInputcolumns(inputcolumns : String) : Unit = {
    this.inputcolumns = inputcolumns
  }

  def getOutputcolumns : String = {
    this.outputcolumns
  }

  def setOutputcolumns(outputcolumns : String) : Unit = {
    this.outputcolumns = outputcolumns
  }

  def getExperimentrun : Integer = {
    this.experimentrun
  }

  def setExperimentrun(experimentrun : Integer) : Unit = {
    this.experimentrun = experimentrun
  }

  override def toString : String = {
    val sb = new StringBuilder("Transformevent (")

    sb.append(id)
    sb.append(", ").append(olddf)
    sb.append(", ").append(newdf)
    sb.append(", ").append(transformer)
    sb.append(", ").append(inputcolumns)
    sb.append(", ").append(outputcolumns)
    sb.append(", ").append(experimentrun)

    sb.append(")");
    return sb.toString
  }
}
