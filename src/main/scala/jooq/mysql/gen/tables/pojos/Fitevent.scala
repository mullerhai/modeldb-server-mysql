/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.String
import java.lang.StringBuilder

import javax.annotation.Generated

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Fitevent(
    private var id : Integer
  , private var transformerspec : Integer
  , private var transformer : Integer
  , private var df : Integer
  , private var predictioncolumns : String 
  , private var labelcolumns : String 
  , private var experimentrun : Integer
  , private var problemtype : String 
) extends Serializable {

  def this() = {
    this(null, null, null, null, null, null, null, null)
  }

  def this (value : Fitevent) = {
    this(
        value.id
      , value.transformerspec
      , value.transformer
      , value.df
      , value.predictioncolumns
      , value.labelcolumns
      , value.experimentrun
      , value.problemtype
    )
  }

  def getId : Integer = {
    this.id
  }

  def setId(id : Integer) : Unit = {
    this.id = id
  }

  def getTransformerspec : Integer = {
    this.transformerspec
  }

  def setTransformerspec(transformerspec : Integer) : Unit = {
    this.transformerspec = transformerspec
  }

  def getTransformer : Integer = {
    this.transformer
  }

  def setTransformer(transformer : Integer) : Unit = {
    this.transformer = transformer
  }

  def getDf : Integer = {
    this.df
  }

  def setDf(df : Integer) : Unit = {
    this.df = df
  }

  def getPredictioncolumns : String = {
    this.predictioncolumns
  }

  def setPredictioncolumns(predictioncolumns : String) : Unit = {
    this.predictioncolumns = predictioncolumns
  }

  def getLabelcolumns : String = {
    this.labelcolumns
  }

  def setLabelcolumns(labelcolumns : String) : Unit = {
    this.labelcolumns = labelcolumns
  }

  def getExperimentrun : Integer = {
    this.experimentrun
  }

  def setExperimentrun(experimentrun : Integer) : Unit = {
    this.experimentrun = experimentrun
  }

  def getProblemtype : String = {
    this.problemtype
  }

  def setProblemtype(problemtype : String) : Unit = {
    this.problemtype = problemtype
  }

  override def toString : String = {
    val sb = new StringBuilder("Fitevent (")

    sb.append(id)
    sb.append(", ").append(transformerspec)
    sb.append(", ").append(transformer)
    sb.append(", ").append(df)
    sb.append(", ").append(predictioncolumns)
    sb.append(", ").append(labelcolumns)
    sb.append(", ").append(experimentrun)
    sb.append(", ").append(problemtype)

    sb.append(")");
    return sb.toString
  }
}
