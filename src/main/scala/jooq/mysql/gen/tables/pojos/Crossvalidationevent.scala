/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables.pojos


import java.io.Serializable
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.lang.StringBuilder

import javax.annotation.Generated

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Crossvalidationevent(
    private var id : Integer
  , private var df : Integer
  , private var spec : Integer
  , private var numfolds : Integer
  , private var randomseed : Long   
  , private var evaluator : String 
  , private var experimentrun : Integer
) extends Serializable {

  def this() = {
    this(null, null, null, null, null, null, null)
  }

  def this (value : Crossvalidationevent) = {
    this(
        value.id
      , value.df
      , value.spec
      , value.numfolds
      , value.randomseed
      , value.evaluator
      , value.experimentrun
    )
  }

  def getId : Integer = {
    this.id
  }

  def setId(id : Integer) : Unit = {
    this.id = id
  }

  def getDf : Integer = {
    this.df
  }

  def setDf(df : Integer) : Unit = {
    this.df = df
  }

  def getSpec : Integer = {
    this.spec
  }

  def setSpec(spec : Integer) : Unit = {
    this.spec = spec
  }

  def getNumfolds : Integer = {
    this.numfolds
  }

  def setNumfolds(numfolds : Integer) : Unit = {
    this.numfolds = numfolds
  }

  def getRandomseed : Long = {
    this.randomseed
  }

  def setRandomseed(randomseed : Long) : Unit = {
    this.randomseed = randomseed
  }

  def getEvaluator : String = {
    this.evaluator
  }

  def setEvaluator(evaluator : String) : Unit = {
    this.evaluator = evaluator
  }

  def getExperimentrun : Integer = {
    this.experimentrun
  }

  def setExperimentrun(experimentrun : Integer) : Unit = {
    this.experimentrun = experimentrun
  }

  override def toString : String = {
    val sb = new StringBuilder("Crossvalidationevent (")

    sb.append(id)
    sb.append(", ").append(df)
    sb.append(", ").append(spec)
    sb.append(", ").append(numfolds)
    sb.append(", ").append(randomseed)
    sb.append(", ").append(evaluator)
    sb.append(", ").append(experimentrun)

    sb.append(")");
    return sb.toString
  }
}
