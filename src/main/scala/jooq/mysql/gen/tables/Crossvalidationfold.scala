/**
 * This class is generated by jOOQ
 */
package jooq.mysql.gen.tables


import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import jooq.mysql.gen.Keys
import jooq.mysql.gen.Modeldb
import jooq.mysql.gen.tables.records.CrossvalidationfoldRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.TableImpl

import scala.Array


object Crossvalidationfold {

  /**
   * The reference instance of <code>modeldb.CrossValidationFold</code>
   */
  val CROSSVALIDATIONFOLD = new Crossvalidationfold
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Crossvalidationfold(alias : String, aliased : Table[CrossvalidationfoldRecord], parameters : Array[ Field[_] ]) extends TableImpl[CrossvalidationfoldRecord](alias, Modeldb.MODELDB, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[CrossvalidationfoldRecord] = {
    classOf[CrossvalidationfoldRecord]
  }

  /**
   * The column <code>modeldb.CrossValidationFold.id</code>.
   */
  val ID : TableField[CrossvalidationfoldRecord, Integer] = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.CrossValidationFold.metric</code>.
   */
  val METRIC : TableField[CrossvalidationfoldRecord, Integer] = createField("metric", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.CrossValidationFold.event</code>.
   */
  val EVENT : TableField[CrossvalidationfoldRecord, Integer] = createField("event", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>modeldb.CrossValidationFold.experimentRun</code>.
   */
  val EXPERIMENTRUN : TableField[CrossvalidationfoldRecord, Integer] = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * Create a <code>modeldb.CrossValidationFold</code> table reference
   */
  def this() = {
    this("CrossValidationFold", null, null)
  }

  /**
   * Create an aliased <code>modeldb.CrossValidationFold</code> table reference
   */
  def this(alias : String) = {
    this(alias, jooq.mysql.gen.tables.Crossvalidationfold.CROSSVALIDATIONFOLD, null)
  }

  private def this(alias : String, aliased : Table[CrossvalidationfoldRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Modeldb.MODELDB

  override def getIdentity : Identity[CrossvalidationfoldRecord, Integer] = {
    Keys.IDENTITY_CROSSVALIDATIONFOLD
  }

  override def getPrimaryKey : UniqueKey[CrossvalidationfoldRecord] = {
    Keys.KEY_CROSSVALIDATIONFOLD_PRIMARY
  }

  override def getKeys : List[ UniqueKey[CrossvalidationfoldRecord] ] = {
    return Arrays.asList[ UniqueKey[CrossvalidationfoldRecord] ](Keys.KEY_CROSSVALIDATIONFOLD_PRIMARY)
  }

  override def getReferences : List[ ForeignKey[CrossvalidationfoldRecord, _] ] = {
    return Arrays.asList[ ForeignKey[CrossvalidationfoldRecord, _] ](Keys.CROSSVALIDATIONFOLD_IBFK_1, Keys.CROSSVALIDATIONFOLD_IBFK_2, Keys.CROSSVALIDATIONFOLD_IBFK_3)
  }

  override def as(alias : String) : Crossvalidationfold = {
    new Crossvalidationfold(alias, this)
  }

  /**
   * Rename this table
   */
  def rename(name : String) : Crossvalidationfold = {
    new Crossvalidationfold(name, null)
  }
}
