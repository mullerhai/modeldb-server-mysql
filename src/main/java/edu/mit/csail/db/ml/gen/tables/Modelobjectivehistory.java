/**
 * This class is generated by jOOQ
 */
package edu.mit.csail.db.ml.gen.tables;


import edu.mit.csail.db.ml.gen.Keys;
import edu.mit.csail.db.ml.gen.Modeldb;
import edu.mit.csail.db.ml.gen.tables.records.ModelobjectivehistoryRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Modelobjectivehistory extends TableImpl<ModelobjectivehistoryRecord> {

    private static final long serialVersionUID = 713324366;

    /**
     * The reference instance of <code>modeldb.ModelObjectiveHistory</code>
     */
    public static final Modelobjectivehistory MODELOBJECTIVEHISTORY = new Modelobjectivehistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelobjectivehistoryRecord> getRecordType() {
        return ModelobjectivehistoryRecord.class;
    }

    /**
     * The column <code>modeldb.ModelObjectiveHistory.id</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb.ModelObjectiveHistory.model</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Integer> MODEL = createField("model", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb.ModelObjectiveHistory.iteration</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Integer> ITERATION = createField("iteration", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb.ModelObjectiveHistory.objectiveValue</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Double> OBJECTIVEVALUE = createField("objectiveValue", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>modeldb.ModelObjectiveHistory</code> table reference
     */
    public Modelobjectivehistory() {
        this("ModelObjectiveHistory", null);
    }

    /**
     * Create an aliased <code>modeldb.ModelObjectiveHistory</code> table reference
     */
    public Modelobjectivehistory(String alias) {
        this(alias, MODELOBJECTIVEHISTORY);
    }

    private Modelobjectivehistory(String alias, Table<ModelobjectivehistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Modelobjectivehistory(String alias, Table<ModelobjectivehistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Modeldb.MODELDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ModelobjectivehistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MODELOBJECTIVEHISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ModelobjectivehistoryRecord> getPrimaryKey() {
        return Keys.KEY_MODELOBJECTIVEHISTORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ModelobjectivehistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelobjectivehistoryRecord>>asList(Keys.KEY_MODELOBJECTIVEHISTORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ModelobjectivehistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelobjectivehistoryRecord, ?>>asList(Keys.MODELOBJECTIVEHISTORY_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Modelobjectivehistory as(String alias) {
        return new Modelobjectivehistory(alias, this);
    }

    /**
     * Rename this table
     */
    public Modelobjectivehistory rename(String name) {
        return new Modelobjectivehistory(name, null);
    }
}
