/**
 * This class is generated by jOOQ
 */
package edu.mit.csail.db.ml.gen.tables;


import edu.mit.csail.db.ml.gen.Keys;
import edu.mit.csail.db.ml.gen.Modeldb;
import edu.mit.csail.db.ml.gen.tables.records.ExperimentrunRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experimentrun extends TableImpl<ExperimentrunRecord> {

    private static final long serialVersionUID = -1764195891;

    /**
     * The reference instance of <code>modeldb.ExperimentRun</code>
     */
    public static final Experimentrun EXPERIMENTRUN = new Experimentrun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperimentrunRecord> getRecordType() {
        return ExperimentrunRecord.class;
    }

    /**
     * The column <code>modeldb.ExperimentRun.id</code>.
     */
    public final TableField<ExperimentrunRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb.ExperimentRun.experiment</code>.
     */
    public final TableField<ExperimentrunRecord, Integer> EXPERIMENT = createField("experiment", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb.ExperimentRun.description</code>.
     */
    public final TableField<ExperimentrunRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>modeldb.ExperimentRun.sha</code>.
     */
    public final TableField<ExperimentrunRecord, String> SHA = createField("sha", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>modeldb.ExperimentRun.created</code>.
     */
    public final TableField<ExperimentrunRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>modeldb.ExperimentRun</code> table reference
     */
    public Experimentrun() {
        this("ExperimentRun", null);
    }

    /**
     * Create an aliased <code>modeldb.ExperimentRun</code> table reference
     */
    public Experimentrun(String alias) {
        this(alias, EXPERIMENTRUN);
    }

    private Experimentrun(String alias, Table<ExperimentrunRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experimentrun(String alias, Table<ExperimentrunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Modeldb.MODELDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExperimentrunRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXPERIMENTRUN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExperimentrunRecord> getPrimaryKey() {
        return Keys.KEY_EXPERIMENTRUN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExperimentrunRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperimentrunRecord>>asList(Keys.KEY_EXPERIMENTRUN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExperimentrunRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExperimentrunRecord, ?>>asList(Keys.EXPERIMENTRUN_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Experimentrun as(String alias) {
        return new Experimentrun(alias, this);
    }

    /**
     * Rename this table
     */
    public Experimentrun rename(String name) {
        return new Experimentrun(name, null);
    }
}
