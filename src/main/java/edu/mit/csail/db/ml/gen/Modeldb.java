/**
 * This class is generated by jOOQ
 */
package edu.mit.csail.db.ml.gen;


import edu.mit.csail.db.ml.gen.tables.*;
import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Modeldb extends SchemaImpl {

    private static final long serialVersionUID = -2090700155;

    /**
     * The reference instance of <code>modeldb</code>
     */
    public static final Modeldb MODELDB = new Modeldb();

    /**
     * The table <code>modeldb.Annotation</code>.
     */
    public final Annotation ANNOTATION = Annotation.ANNOTATION;

    /**
     * The table <code>modeldb.AnnotationFragment</code>.
     */
    public final Annotationfragment ANNOTATIONFRAGMENT = Annotationfragment.ANNOTATIONFRAGMENT;

    /**
     * The table <code>modeldb.CrossValidationEvent</code>.
     */
    public final Crossvalidationevent CROSSVALIDATIONEVENT = Crossvalidationevent.CROSSVALIDATIONEVENT;

    /**
     * The table <code>modeldb.CrossValidationFold</code>.
     */
    public final Crossvalidationfold CROSSVALIDATIONFOLD = Crossvalidationfold.CROSSVALIDATIONFOLD;

    /**
     * The table <code>modeldb.DataFrame</code>.
     */
    public final Dataframe DATAFRAME = Dataframe.DATAFRAME;

    /**
     * The table <code>modeldb.DataFrameColumn</code>.
     */
    public final Dataframecolumn DATAFRAMECOLUMN = Dataframecolumn.DATAFRAMECOLUMN;

    /**
     * The table <code>modeldb.DataFrameMetadata</code>.
     */
    public final Dataframemetadata DATAFRAMEMETADATA = Dataframemetadata.DATAFRAMEMETADATA;

    /**
     * The table <code>modeldb.DataFrameSplit</code>.
     */
    public final Dataframesplit DATAFRAMESPLIT = Dataframesplit.DATAFRAMESPLIT;

    /**
     * The table <code>modeldb.Event</code>.
     */
    public final Event EVENT = Event.EVENT;

    /**
     * The table <code>modeldb.Experiment</code>.
     */
    public final Experiment EXPERIMENT = Experiment.EXPERIMENT;

    /**
     * The table <code>modeldb.ExperimentRun</code>.
     */
    public final Experimentrun EXPERIMENTRUN = Experimentrun.EXPERIMENTRUN;

    /**
     * VIEW
     */
    public final ExperimentRunView EXPERIMENT_RUN_VIEW = ExperimentRunView.EXPERIMENT_RUN_VIEW;

    /**
     * The table <code>modeldb.Feature</code>.
     */
    public final Feature FEATURE = Feature.FEATURE;

    /**
     * The table <code>modeldb.FitEvent</code>.
     */
    public final Fitevent FITEVENT = Fitevent.FITEVENT;

    /**
     * The table <code>modeldb.GridCellCrossValidation</code>.
     */
    public final Gridcellcrossvalidation GRIDCELLCROSSVALIDATION = Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION;

    /**
     * The table <code>modeldb.GridSearchCrossValidationEvent</code>.
     */
    public final Gridsearchcrossvalidationevent GRIDSEARCHCROSSVALIDATIONEVENT = Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT;

    /**
     * The table <code>modeldb.HyperParameter</code>.
     */
    public final Hyperparameter HYPERPARAMETER = Hyperparameter.HYPERPARAMETER;

    /**
     * The table <code>modeldb.LinearModel</code>.
     */
    public final Linearmodel LINEARMODEL = Linearmodel.LINEARMODEL;

    /**
     * The table <code>modeldb.LinearModelTerm</code>.
     */
    public final Linearmodelterm LINEARMODELTERM = Linearmodelterm.LINEARMODELTERM;

    /**
     * The table <code>modeldb.MetadataKV</code>.
     */
    public final Metadatakv METADATAKV = Metadatakv.METADATAKV;

    /**
     * The table <code>modeldb.MetricEvent</code>.
     */
    public final Metricevent METRICEVENT = Metricevent.METRICEVENT;

    /**
     * The table <code>modeldb.ModelObjectiveHistory</code>.
     */
    public final Modelobjectivehistory MODELOBJECTIVEHISTORY = Modelobjectivehistory.MODELOBJECTIVEHISTORY;

    /**
     * VIEW
     */
    public final ModelView MODEL_VIEW = ModelView.MODEL_VIEW;

    /**
     * The table <code>modeldb.PipelineStage</code>.
     */
    public final Pipelinestage PIPELINESTAGE = Pipelinestage.PIPELINESTAGE;

    /**
     * VIEW
     */
    public final PipelineView PIPELINE_VIEW = PipelineView.PIPELINE_VIEW;

    /**
     * The table <code>modeldb.Project</code>.
     */
    public final Project PROJECT = Project.PROJECT;

    /**
     * The table <code>modeldb.RandomSplitEvent</code>.
     */
    public final Randomsplitevent RANDOMSPLITEVENT = Randomsplitevent.RANDOMSPLITEVENT;

    /**
     * The table <code>modeldb.Transformer</code>.
     */
    public final Transformer TRANSFORMER = Transformer.TRANSFORMER;

    /**
     * The table <code>modeldb.TransformerSpec</code>.
     */
    public final Transformerspec TRANSFORMERSPEC = Transformerspec.TRANSFORMERSPEC;

    /**
     * VIEW
     */
    public final TransformerView TRANSFORMER_VIEW = TransformerView.TRANSFORMER_VIEW;

    /**
     * The table <code>modeldb.TransformEvent</code>.
     */
    public final Transformevent TRANSFORMEVENT = Transformevent.TRANSFORMEVENT;

    /**
     * The table <code>modeldb.TreeLink</code>.
     */
    public final Treelink TREELINK = Treelink.TREELINK;

    /**
     * The table <code>modeldb.TreeModel</code>.
     */
    public final Treemodel TREEMODEL = Treemodel.TREEMODEL;

    /**
     * The table <code>modeldb.TreeModelComponent</code>.
     */
    public final Treemodelcomponent TREEMODELCOMPONENT = Treemodelcomponent.TREEMODELCOMPONENT;

    /**
     * The table <code>modeldb.TreeNode</code>.
     */
    public final Treenode TREENODE = Treenode.TREENODE;

    /**
     * No further instances allowed
     */
    private Modeldb() {
        super("modeldb", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Annotation.ANNOTATION,
            Annotationfragment.ANNOTATIONFRAGMENT,
            Crossvalidationevent.CROSSVALIDATIONEVENT,
            Crossvalidationfold.CROSSVALIDATIONFOLD,
            Dataframe.DATAFRAME,
            Dataframecolumn.DATAFRAMECOLUMN,
            Dataframemetadata.DATAFRAMEMETADATA,
            Dataframesplit.DATAFRAMESPLIT,
            Event.EVENT,
            Experiment.EXPERIMENT,
            Experimentrun.EXPERIMENTRUN,
            ExperimentRunView.EXPERIMENT_RUN_VIEW,
            Feature.FEATURE,
            Fitevent.FITEVENT,
            Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION,
            Gridsearchcrossvalidationevent.GRIDSEARCHCROSSVALIDATIONEVENT,
            Hyperparameter.HYPERPARAMETER,
            Linearmodel.LINEARMODEL,
            Linearmodelterm.LINEARMODELTERM,
            Metadatakv.METADATAKV,
            Metricevent.METRICEVENT,
            Modelobjectivehistory.MODELOBJECTIVEHISTORY,
            ModelView.MODEL_VIEW,
            Pipelinestage.PIPELINESTAGE,
            PipelineView.PIPELINE_VIEW,
            Project.PROJECT,
            Randomsplitevent.RANDOMSPLITEVENT,
            Transformer.TRANSFORMER,
            Transformerspec.TRANSFORMERSPEC,
            TransformerView.TRANSFORMER_VIEW,
            Transformevent.TRANSFORMEVENT,
            Treelink.TREELINK,
            Treemodel.TREEMODEL,
            Treemodelcomponent.TREEMODELCOMPONENT,
            Treenode.TREENODE);
    }
}
