/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class RandomSplitEvent implements org.apache.thrift.TBase<RandomSplitEvent, RandomSplitEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RandomSplitEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RandomSplitEvent");

  private static final org.apache.thrift.protocol.TField OLD_DATA_FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldDataFrame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField WEIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("weights", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("seed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SPLIT_DATA_FRAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("splitDataFrames", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RandomSplitEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RandomSplitEventTupleSchemeFactory());
  }

  public DataFrame oldDataFrame; // required
  public List<Double> weights; // required
  public long seed; // required
  public List<DataFrame> splitDataFrames; // required
  public int experimentRunId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OLD_DATA_FRAME((short)1, "oldDataFrame"),
    WEIGHTS((short)2, "weights"),
    SEED((short)3, "seed"),
    SPLIT_DATA_FRAMES((short)4, "splitDataFrames"),
    EXPERIMENT_RUN_ID((short)5, "experimentRunId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OLD_DATA_FRAME
          return OLD_DATA_FRAME;
        case 2: // WEIGHTS
          return WEIGHTS;
        case 3: // SEED
          return SEED;
        case 4: // SPLIT_DATA_FRAMES
          return SPLIT_DATA_FRAMES;
        case 5: // EXPERIMENT_RUN_ID
          return EXPERIMENT_RUN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEED_ISSET_ID = 0;
  private static final int __EXPERIMENTRUNID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OLD_DATA_FRAME, new org.apache.thrift.meta_data.FieldMetaData("oldDataFrame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.WEIGHTS, new org.apache.thrift.meta_data.FieldMetaData("weights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPLIT_DATA_FRAMES, new org.apache.thrift.meta_data.FieldMetaData("splitDataFrames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class))));
    tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RandomSplitEvent.class, metaDataMap);
  }

  public RandomSplitEvent() {
  }

  public RandomSplitEvent(
    DataFrame oldDataFrame,
    List<Double> weights,
    long seed,
    List<DataFrame> splitDataFrames,
    int experimentRunId)
  {
    this();
    this.oldDataFrame = oldDataFrame;
    this.weights = weights;
    this.seed = seed;
    setSeedIsSet(true);
    this.splitDataFrames = splitDataFrames;
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RandomSplitEvent(RandomSplitEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOldDataFrame()) {
      this.oldDataFrame = new DataFrame(other.oldDataFrame);
    }
    if (other.isSetWeights()) {
      List<Double> __this__weights = new ArrayList<Double>(other.weights);
      this.weights = __this__weights;
    }
    this.seed = other.seed;
    if (other.isSetSplitDataFrames()) {
      List<DataFrame> __this__splitDataFrames = new ArrayList<DataFrame>(other.splitDataFrames.size());
      for (DataFrame other_element : other.splitDataFrames) {
        __this__splitDataFrames.add(new DataFrame(other_element));
      }
      this.splitDataFrames = __this__splitDataFrames;
    }
    this.experimentRunId = other.experimentRunId;
  }

  public RandomSplitEvent deepCopy() {
    return new RandomSplitEvent(this);
  }

  @Override
  public void clear() {
    this.oldDataFrame = null;
    this.weights = null;
    setSeedIsSet(false);
    this.seed = 0;
    this.splitDataFrames = null;
    setExperimentRunIdIsSet(false);
    this.experimentRunId = 0;
  }

  public DataFrame getOldDataFrame() {
    return this.oldDataFrame;
  }

  public RandomSplitEvent setOldDataFrame(DataFrame oldDataFrame) {
    this.oldDataFrame = oldDataFrame;
    return this;
  }

  public void unsetOldDataFrame() {
    this.oldDataFrame = null;
  }

  /** Returns true if field oldDataFrame is set (has been assigned a value) and false otherwise */
  public boolean isSetOldDataFrame() {
    return this.oldDataFrame != null;
  }

  public void setOldDataFrameIsSet(boolean value) {
    if (!value) {
      this.oldDataFrame = null;
    }
  }

  public int getWeightsSize() {
    return (this.weights == null) ? 0 : this.weights.size();
  }

  public java.util.Iterator<Double> getWeightsIterator() {
    return (this.weights == null) ? null : this.weights.iterator();
  }

  public void addToWeights(double elem) {
    if (this.weights == null) {
      this.weights = new ArrayList<Double>();
    }
    this.weights.add(elem);
  }

  public List<Double> getWeights() {
    return this.weights;
  }

  public RandomSplitEvent setWeights(List<Double> weights) {
    this.weights = weights;
    return this;
  }

  public void unsetWeights() {
    this.weights = null;
  }

  /** Returns true if field weights is set (has been assigned a value) and false otherwise */
  public boolean isSetWeights() {
    return this.weights != null;
  }

  public void setWeightsIsSet(boolean value) {
    if (!value) {
      this.weights = null;
    }
  }

  public long getSeed() {
    return this.seed;
  }

  public RandomSplitEvent setSeed(long seed) {
    this.seed = seed;
    setSeedIsSet(true);
    return this;
  }

  public void unsetSeed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEED_ISSET_ID);
  }

  /** Returns true if field seed is set (has been assigned a value) and false otherwise */
  public boolean isSetSeed() {
    return EncodingUtils.testBit(__isset_bitfield, __SEED_ISSET_ID);
  }

  public void setSeedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEED_ISSET_ID, value);
  }

  public int getSplitDataFramesSize() {
    return (this.splitDataFrames == null) ? 0 : this.splitDataFrames.size();
  }

  public java.util.Iterator<DataFrame> getSplitDataFramesIterator() {
    return (this.splitDataFrames == null) ? null : this.splitDataFrames.iterator();
  }

  public void addToSplitDataFrames(DataFrame elem) {
    if (this.splitDataFrames == null) {
      this.splitDataFrames = new ArrayList<DataFrame>();
    }
    this.splitDataFrames.add(elem);
  }

  public List<DataFrame> getSplitDataFrames() {
    return this.splitDataFrames;
  }

  public RandomSplitEvent setSplitDataFrames(List<DataFrame> splitDataFrames) {
    this.splitDataFrames = splitDataFrames;
    return this;
  }

  public void unsetSplitDataFrames() {
    this.splitDataFrames = null;
  }

  /** Returns true if field splitDataFrames is set (has been assigned a value) and false otherwise */
  public boolean isSetSplitDataFrames() {
    return this.splitDataFrames != null;
  }

  public void setSplitDataFramesIsSet(boolean value) {
    if (!value) {
      this.splitDataFrames = null;
    }
  }

  public int getExperimentRunId() {
    return this.experimentRunId;
  }

  public RandomSplitEvent setExperimentRunId(int experimentRunId) {
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    return this;
  }

  public void unsetExperimentRunId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRunId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  public void setExperimentRunIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OLD_DATA_FRAME:
      if (value == null) {
        unsetOldDataFrame();
      } else {
        setOldDataFrame((DataFrame)value);
      }
      break;

    case WEIGHTS:
      if (value == null) {
        unsetWeights();
      } else {
        setWeights((List<Double>)value);
      }
      break;

    case SEED:
      if (value == null) {
        unsetSeed();
      } else {
        setSeed((Long)value);
      }
      break;

    case SPLIT_DATA_FRAMES:
      if (value == null) {
        unsetSplitDataFrames();
      } else {
        setSplitDataFrames((List<DataFrame>)value);
      }
      break;

    case EXPERIMENT_RUN_ID:
      if (value == null) {
        unsetExperimentRunId();
      } else {
        setExperimentRunId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OLD_DATA_FRAME:
      return getOldDataFrame();

    case WEIGHTS:
      return getWeights();

    case SEED:
      return getSeed();

    case SPLIT_DATA_FRAMES:
      return getSplitDataFrames();

    case EXPERIMENT_RUN_ID:
      return getExperimentRunId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OLD_DATA_FRAME:
      return isSetOldDataFrame();
    case WEIGHTS:
      return isSetWeights();
    case SEED:
      return isSetSeed();
    case SPLIT_DATA_FRAMES:
      return isSetSplitDataFrames();
    case EXPERIMENT_RUN_ID:
      return isSetExperimentRunId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RandomSplitEvent)
      return this.equals((RandomSplitEvent)that);
    return false;
  }

  public boolean equals(RandomSplitEvent that) {
    if (that == null)
      return false;

    boolean this_present_oldDataFrame = true && this.isSetOldDataFrame();
    boolean that_present_oldDataFrame = true && that.isSetOldDataFrame();
    if (this_present_oldDataFrame || that_present_oldDataFrame) {
      if (!(this_present_oldDataFrame && that_present_oldDataFrame))
        return false;
      if (!this.oldDataFrame.equals(that.oldDataFrame))
        return false;
    }

    boolean this_present_weights = true && this.isSetWeights();
    boolean that_present_weights = true && that.isSetWeights();
    if (this_present_weights || that_present_weights) {
      if (!(this_present_weights && that_present_weights))
        return false;
      if (!this.weights.equals(that.weights))
        return false;
    }

    boolean this_present_seed = true;
    boolean that_present_seed = true;
    if (this_present_seed || that_present_seed) {
      if (!(this_present_seed && that_present_seed))
        return false;
      if (this.seed != that.seed)
        return false;
    }

    boolean this_present_splitDataFrames = true && this.isSetSplitDataFrames();
    boolean that_present_splitDataFrames = true && that.isSetSplitDataFrames();
    if (this_present_splitDataFrames || that_present_splitDataFrames) {
      if (!(this_present_splitDataFrames && that_present_splitDataFrames))
        return false;
      if (!this.splitDataFrames.equals(that.splitDataFrames))
        return false;
    }

    boolean this_present_experimentRunId = true;
    boolean that_present_experimentRunId = true;
    if (this_present_experimentRunId || that_present_experimentRunId) {
      if (!(this_present_experimentRunId && that_present_experimentRunId))
        return false;
      if (this.experimentRunId != that.experimentRunId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_oldDataFrame = true && (isSetOldDataFrame());
    list.add(present_oldDataFrame);
    if (present_oldDataFrame)
      list.add(oldDataFrame);

    boolean present_weights = true && (isSetWeights());
    list.add(present_weights);
    if (present_weights)
      list.add(weights);

    boolean present_seed = true;
    list.add(present_seed);
    if (present_seed)
      list.add(seed);

    boolean present_splitDataFrames = true && (isSetSplitDataFrames());
    list.add(present_splitDataFrames);
    if (present_splitDataFrames)
      list.add(splitDataFrames);

    boolean present_experimentRunId = true;
    list.add(present_experimentRunId);
    if (present_experimentRunId)
      list.add(experimentRunId);

    return list.hashCode();
  }

  @Override
  public int compareTo(RandomSplitEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOldDataFrame()).compareTo(other.isSetOldDataFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldDataFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldDataFrame, other.oldDataFrame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeights()).compareTo(other.isSetWeights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weights, other.weights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeed()).compareTo(other.isSetSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, other.seed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplitDataFrames()).compareTo(other.isSetSplitDataFrames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplitDataFrames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitDataFrames, other.splitDataFrames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RandomSplitEvent(");
    boolean first = true;

    sb.append("oldDataFrame:");
    if (this.oldDataFrame == null) {
      sb.append("null");
    } else {
      sb.append(this.oldDataFrame);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weights:");
    if (this.weights == null) {
      sb.append("null");
    } else {
      sb.append(this.weights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seed:");
    sb.append(this.seed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("splitDataFrames:");
    if (this.splitDataFrames == null) {
      sb.append("null");
    } else {
      sb.append(this.splitDataFrames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRunId:");
    sb.append(this.experimentRunId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (oldDataFrame != null) {
      oldDataFrame.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RandomSplitEventStandardSchemeFactory implements SchemeFactory {
    public RandomSplitEventStandardScheme getScheme() {
      return new RandomSplitEventStandardScheme();
    }
  }

  private static class RandomSplitEventStandardScheme extends StandardScheme<RandomSplitEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RandomSplitEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OLD_DATA_FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.oldDataFrame = new DataFrame();
              struct.oldDataFrame.read(iprot);
              struct.setOldDataFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.weights = new ArrayList<Double>(_list80.size);
                double _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = iprot.readDouble();
                  struct.weights.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setWeightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.seed = iprot.readI64();
              struct.setSeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPLIT_DATA_FRAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.splitDataFrames = new ArrayList<DataFrame>(_list83.size);
                DataFrame _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = new DataFrame();
                  _elem84.read(iprot);
                  struct.splitDataFrames.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setSplitDataFramesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPERIMENT_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentRunId = iprot.readI32();
              struct.setExperimentRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RandomSplitEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.oldDataFrame != null) {
        oprot.writeFieldBegin(OLD_DATA_FRAME_FIELD_DESC);
        struct.oldDataFrame.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.weights != null) {
        oprot.writeFieldBegin(WEIGHTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.weights.size()));
          for (double _iter86 : struct.weights)
          {
            oprot.writeDouble(_iter86);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEED_FIELD_DESC);
      oprot.writeI64(struct.seed);
      oprot.writeFieldEnd();
      if (struct.splitDataFrames != null) {
        oprot.writeFieldBegin(SPLIT_DATA_FRAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.splitDataFrames.size()));
          for (DataFrame _iter87 : struct.splitDataFrames)
          {
            _iter87.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentRunId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RandomSplitEventTupleSchemeFactory implements SchemeFactory {
    public RandomSplitEventTupleScheme getScheme() {
      return new RandomSplitEventTupleScheme();
    }
  }

  private static class RandomSplitEventTupleScheme extends TupleScheme<RandomSplitEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RandomSplitEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOldDataFrame()) {
        optionals.set(0);
      }
      if (struct.isSetWeights()) {
        optionals.set(1);
      }
      if (struct.isSetSeed()) {
        optionals.set(2);
      }
      if (struct.isSetSplitDataFrames()) {
        optionals.set(3);
      }
      if (struct.isSetExperimentRunId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOldDataFrame()) {
        struct.oldDataFrame.write(oprot);
      }
      if (struct.isSetWeights()) {
        {
          oprot.writeI32(struct.weights.size());
          for (double _iter88 : struct.weights)
          {
            oprot.writeDouble(_iter88);
          }
        }
      }
      if (struct.isSetSeed()) {
        oprot.writeI64(struct.seed);
      }
      if (struct.isSetSplitDataFrames()) {
        {
          oprot.writeI32(struct.splitDataFrames.size());
          for (DataFrame _iter89 : struct.splitDataFrames)
          {
            _iter89.write(oprot);
          }
        }
      }
      if (struct.isSetExperimentRunId()) {
        oprot.writeI32(struct.experimentRunId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RandomSplitEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.oldDataFrame = new DataFrame();
        struct.oldDataFrame.read(iprot);
        struct.setOldDataFrameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.weights = new ArrayList<Double>(_list90.size);
          double _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = iprot.readDouble();
            struct.weights.add(_elem91);
          }
        }
        struct.setWeightsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.seed = iprot.readI64();
        struct.setSeedIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.splitDataFrames = new ArrayList<DataFrame>(_list93.size);
          DataFrame _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new DataFrame();
            _elem94.read(iprot);
            struct.splitDataFrames.add(_elem94);
          }
        }
        struct.setSplitDataFramesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.experimentRunId = iprot.readI32();
        struct.setExperimentRunIdIsSet(true);
      }
    }
  }

}

