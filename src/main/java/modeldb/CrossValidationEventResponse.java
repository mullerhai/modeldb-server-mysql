/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class CrossValidationEventResponse implements org.apache.thrift.TBase<CrossValidationEventResponse, CrossValidationEventResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CrossValidationEventResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrossValidationEventResponse");

  private static final org.apache.thrift.protocol.TField DF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dfId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FOLD_RESPONSES_FIELD_DESC = new org.apache.thrift.protocol.TField("foldResponses", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CROSS_VALIDATION_EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("crossValidationEventId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrossValidationEventResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrossValidationEventResponseTupleSchemeFactory());
  }

  public int dfId; // required
  public int specId; // required
  public int eventId; // required
  public List<CrossValidationFoldResponse> foldResponses; // required
  public int crossValidationEventId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DF_ID((short)1, "dfId"),
    SPEC_ID((short)2, "specId"),
    EVENT_ID((short)3, "eventId"),
    FOLD_RESPONSES((short)4, "foldResponses"),
    CROSS_VALIDATION_EVENT_ID((short)5, "crossValidationEventId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DF_ID
          return DF_ID;
        case 2: // SPEC_ID
          return SPEC_ID;
        case 3: // EVENT_ID
          return EVENT_ID;
        case 4: // FOLD_RESPONSES
          return FOLD_RESPONSES;
        case 5: // CROSS_VALIDATION_EVENT_ID
          return CROSS_VALIDATION_EVENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DFID_ISSET_ID = 0;
  private static final int __SPECID_ISSET_ID = 1;
  private static final int __EVENTID_ISSET_ID = 2;
  private static final int __CROSSVALIDATIONEVENTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DF_ID, new org.apache.thrift.meta_data.FieldMetaData("dfId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEC_ID, new org.apache.thrift.meta_data.FieldMetaData("specId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLD_RESPONSES, new org.apache.thrift.meta_data.FieldMetaData("foldResponses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossValidationFoldResponse.class))));
    tmpMap.put(_Fields.CROSS_VALIDATION_EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("crossValidationEventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrossValidationEventResponse.class, metaDataMap);
  }

  public CrossValidationEventResponse() {
  }

  public CrossValidationEventResponse(
    int dfId,
    int specId,
    int eventId,
    List<CrossValidationFoldResponse> foldResponses,
    int crossValidationEventId)
  {
    this();
    this.dfId = dfId;
    setDfIdIsSet(true);
    this.specId = specId;
    setSpecIdIsSet(true);
    this.eventId = eventId;
    setEventIdIsSet(true);
    this.foldResponses = foldResponses;
    this.crossValidationEventId = crossValidationEventId;
    setCrossValidationEventIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrossValidationEventResponse(CrossValidationEventResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dfId = other.dfId;
    this.specId = other.specId;
    this.eventId = other.eventId;
    if (other.isSetFoldResponses()) {
      List<CrossValidationFoldResponse> __this__foldResponses = new ArrayList<CrossValidationFoldResponse>(other.foldResponses.size());
      for (CrossValidationFoldResponse other_element : other.foldResponses) {
        __this__foldResponses.add(new CrossValidationFoldResponse(other_element));
      }
      this.foldResponses = __this__foldResponses;
    }
    this.crossValidationEventId = other.crossValidationEventId;
  }

  public CrossValidationEventResponse deepCopy() {
    return new CrossValidationEventResponse(this);
  }

  @Override
  public void clear() {
    setDfIdIsSet(false);
    this.dfId = 0;
    setSpecIdIsSet(false);
    this.specId = 0;
    setEventIdIsSet(false);
    this.eventId = 0;
    this.foldResponses = null;
    setCrossValidationEventIdIsSet(false);
    this.crossValidationEventId = 0;
  }

  public int getDfId() {
    return this.dfId;
  }

  public CrossValidationEventResponse setDfId(int dfId) {
    this.dfId = dfId;
    setDfIdIsSet(true);
    return this;
  }

  public void unsetDfId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DFID_ISSET_ID);
  }

  /** Returns true if field dfId is set (has been assigned a value) and false otherwise */
  public boolean isSetDfId() {
    return EncodingUtils.testBit(__isset_bitfield, __DFID_ISSET_ID);
  }

  public void setDfIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DFID_ISSET_ID, value);
  }

  public int getSpecId() {
    return this.specId;
  }

  public CrossValidationEventResponse setSpecId(int specId) {
    this.specId = specId;
    setSpecIdIsSet(true);
    return this;
  }

  public void unsetSpecId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECID_ISSET_ID);
  }

  /** Returns true if field specId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECID_ISSET_ID);
  }

  public void setSpecIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECID_ISSET_ID, value);
  }

  public int getEventId() {
    return this.eventId;
  }

  public CrossValidationEventResponse setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public int getFoldResponsesSize() {
    return (this.foldResponses == null) ? 0 : this.foldResponses.size();
  }

  public java.util.Iterator<CrossValidationFoldResponse> getFoldResponsesIterator() {
    return (this.foldResponses == null) ? null : this.foldResponses.iterator();
  }

  public void addToFoldResponses(CrossValidationFoldResponse elem) {
    if (this.foldResponses == null) {
      this.foldResponses = new ArrayList<CrossValidationFoldResponse>();
    }
    this.foldResponses.add(elem);
  }

  public List<CrossValidationFoldResponse> getFoldResponses() {
    return this.foldResponses;
  }

  public CrossValidationEventResponse setFoldResponses(List<CrossValidationFoldResponse> foldResponses) {
    this.foldResponses = foldResponses;
    return this;
  }

  public void unsetFoldResponses() {
    this.foldResponses = null;
  }

  /** Returns true if field foldResponses is set (has been assigned a value) and false otherwise */
  public boolean isSetFoldResponses() {
    return this.foldResponses != null;
  }

  public void setFoldResponsesIsSet(boolean value) {
    if (!value) {
      this.foldResponses = null;
    }
  }

  public int getCrossValidationEventId() {
    return this.crossValidationEventId;
  }

  public CrossValidationEventResponse setCrossValidationEventId(int crossValidationEventId) {
    this.crossValidationEventId = crossValidationEventId;
    setCrossValidationEventIdIsSet(true);
    return this;
  }

  public void unsetCrossValidationEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSVALIDATIONEVENTID_ISSET_ID);
  }

  /** Returns true if field crossValidationEventId is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossValidationEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSVALIDATIONEVENTID_ISSET_ID);
  }

  public void setCrossValidationEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSVALIDATIONEVENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DF_ID:
      if (value == null) {
        unsetDfId();
      } else {
        setDfId((Integer)value);
      }
      break;

    case SPEC_ID:
      if (value == null) {
        unsetSpecId();
      } else {
        setSpecId((Integer)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Integer)value);
      }
      break;

    case FOLD_RESPONSES:
      if (value == null) {
        unsetFoldResponses();
      } else {
        setFoldResponses((List<CrossValidationFoldResponse>)value);
      }
      break;

    case CROSS_VALIDATION_EVENT_ID:
      if (value == null) {
        unsetCrossValidationEventId();
      } else {
        setCrossValidationEventId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DF_ID:
      return getDfId();

    case SPEC_ID:
      return getSpecId();

    case EVENT_ID:
      return getEventId();

    case FOLD_RESPONSES:
      return getFoldResponses();

    case CROSS_VALIDATION_EVENT_ID:
      return getCrossValidationEventId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DF_ID:
      return isSetDfId();
    case SPEC_ID:
      return isSetSpecId();
    case EVENT_ID:
      return isSetEventId();
    case FOLD_RESPONSES:
      return isSetFoldResponses();
    case CROSS_VALIDATION_EVENT_ID:
      return isSetCrossValidationEventId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrossValidationEventResponse)
      return this.equals((CrossValidationEventResponse)that);
    return false;
  }

  public boolean equals(CrossValidationEventResponse that) {
    if (that == null)
      return false;

    boolean this_present_dfId = true;
    boolean that_present_dfId = true;
    if (this_present_dfId || that_present_dfId) {
      if (!(this_present_dfId && that_present_dfId))
        return false;
      if (this.dfId != that.dfId)
        return false;
    }

    boolean this_present_specId = true;
    boolean that_present_specId = true;
    if (this_present_specId || that_present_specId) {
      if (!(this_present_specId && that_present_specId))
        return false;
      if (this.specId != that.specId)
        return false;
    }

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_foldResponses = true && this.isSetFoldResponses();
    boolean that_present_foldResponses = true && that.isSetFoldResponses();
    if (this_present_foldResponses || that_present_foldResponses) {
      if (!(this_present_foldResponses && that_present_foldResponses))
        return false;
      if (!this.foldResponses.equals(that.foldResponses))
        return false;
    }

    boolean this_present_crossValidationEventId = true;
    boolean that_present_crossValidationEventId = true;
    if (this_present_crossValidationEventId || that_present_crossValidationEventId) {
      if (!(this_present_crossValidationEventId && that_present_crossValidationEventId))
        return false;
      if (this.crossValidationEventId != that.crossValidationEventId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dfId = true;
    list.add(present_dfId);
    if (present_dfId)
      list.add(dfId);

    boolean present_specId = true;
    list.add(present_specId);
    if (present_specId)
      list.add(specId);

    boolean present_eventId = true;
    list.add(present_eventId);
    if (present_eventId)
      list.add(eventId);

    boolean present_foldResponses = true && (isSetFoldResponses());
    list.add(present_foldResponses);
    if (present_foldResponses)
      list.add(foldResponses);

    boolean present_crossValidationEventId = true;
    list.add(present_crossValidationEventId);
    if (present_crossValidationEventId)
      list.add(crossValidationEventId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CrossValidationEventResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDfId()).compareTo(other.isSetDfId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDfId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dfId, other.dfId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecId()).compareTo(other.isSetSpecId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specId, other.specId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoldResponses()).compareTo(other.isSetFoldResponses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoldResponses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foldResponses, other.foldResponses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossValidationEventId()).compareTo(other.isSetCrossValidationEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossValidationEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossValidationEventId, other.crossValidationEventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrossValidationEventResponse(");
    boolean first = true;

    sb.append("dfId:");
    sb.append(this.dfId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specId:");
    sb.append(this.specId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("foldResponses:");
    if (this.foldResponses == null) {
      sb.append("null");
    } else {
      sb.append(this.foldResponses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossValidationEventId:");
    sb.append(this.crossValidationEventId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrossValidationEventResponseStandardSchemeFactory implements SchemeFactory {
    public CrossValidationEventResponseStandardScheme getScheme() {
      return new CrossValidationEventResponseStandardScheme();
    }
  }

  private static class CrossValidationEventResponseStandardScheme extends StandardScheme<CrossValidationEventResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrossValidationEventResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dfId = iprot.readI32();
              struct.setDfIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPEC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specId = iprot.readI32();
              struct.setSpecIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOLD_RESPONSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list322 = iprot.readListBegin();
                struct.foldResponses = new ArrayList<CrossValidationFoldResponse>(_list322.size);
                CrossValidationFoldResponse _elem323;
                for (int _i324 = 0; _i324 < _list322.size; ++_i324)
                {
                  _elem323 = new CrossValidationFoldResponse();
                  _elem323.read(iprot);
                  struct.foldResponses.add(_elem323);
                }
                iprot.readListEnd();
              }
              struct.setFoldResponsesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CROSS_VALIDATION_EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crossValidationEventId = iprot.readI32();
              struct.setCrossValidationEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrossValidationEventResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DF_ID_FIELD_DESC);
      oprot.writeI32(struct.dfId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPEC_ID_FIELD_DESC);
      oprot.writeI32(struct.specId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.eventId);
      oprot.writeFieldEnd();
      if (struct.foldResponses != null) {
        oprot.writeFieldBegin(FOLD_RESPONSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.foldResponses.size()));
          for (CrossValidationFoldResponse _iter325 : struct.foldResponses)
          {
            _iter325.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CROSS_VALIDATION_EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.crossValidationEventId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrossValidationEventResponseTupleSchemeFactory implements SchemeFactory {
    public CrossValidationEventResponseTupleScheme getScheme() {
      return new CrossValidationEventResponseTupleScheme();
    }
  }

  private static class CrossValidationEventResponseTupleScheme extends TupleScheme<CrossValidationEventResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrossValidationEventResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDfId()) {
        optionals.set(0);
      }
      if (struct.isSetSpecId()) {
        optionals.set(1);
      }
      if (struct.isSetEventId()) {
        optionals.set(2);
      }
      if (struct.isSetFoldResponses()) {
        optionals.set(3);
      }
      if (struct.isSetCrossValidationEventId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDfId()) {
        oprot.writeI32(struct.dfId);
      }
      if (struct.isSetSpecId()) {
        oprot.writeI32(struct.specId);
      }
      if (struct.isSetEventId()) {
        oprot.writeI32(struct.eventId);
      }
      if (struct.isSetFoldResponses()) {
        {
          oprot.writeI32(struct.foldResponses.size());
          for (CrossValidationFoldResponse _iter326 : struct.foldResponses)
          {
            _iter326.write(oprot);
          }
        }
      }
      if (struct.isSetCrossValidationEventId()) {
        oprot.writeI32(struct.crossValidationEventId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrossValidationEventResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.dfId = iprot.readI32();
        struct.setDfIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.specId = iprot.readI32();
        struct.setSpecIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eventId = iprot.readI32();
        struct.setEventIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list327 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.foldResponses = new ArrayList<CrossValidationFoldResponse>(_list327.size);
          CrossValidationFoldResponse _elem328;
          for (int _i329 = 0; _i329 < _list327.size; ++_i329)
          {
            _elem328 = new CrossValidationFoldResponse();
            _elem328.read(iprot);
            struct.foldResponses.add(_elem328);
          }
        }
        struct.setFoldResponsesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.crossValidationEventId = iprot.readI32();
        struct.setCrossValidationEventIdIsSet(true);
      }
    }
  }

}

