/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class TransformEventResponse implements org.apache.thrift.TBase<TransformEventResponse, TransformEventResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TransformEventResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformEventResponse");

  private static final org.apache.thrift.protocol.TField OLD_DATA_FRAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldDataFrameId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_DATA_FRAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newDataFrameId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSFORMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transformerId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filepath", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransformEventResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransformEventResponseTupleSchemeFactory());
  }

  public int oldDataFrameId; // required
  public int newDataFrameId; // required
  public int transformerId; // required
  public int eventId; // required
  public String filepath; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OLD_DATA_FRAME_ID((short)1, "oldDataFrameId"),
    NEW_DATA_FRAME_ID((short)2, "newDataFrameId"),
    TRANSFORMER_ID((short)3, "transformerId"),
    EVENT_ID((short)4, "eventId"),
    FILEPATH((short)5, "filepath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OLD_DATA_FRAME_ID
          return OLD_DATA_FRAME_ID;
        case 2: // NEW_DATA_FRAME_ID
          return NEW_DATA_FRAME_ID;
        case 3: // TRANSFORMER_ID
          return TRANSFORMER_ID;
        case 4: // EVENT_ID
          return EVENT_ID;
        case 5: // FILEPATH
          return FILEPATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OLDDATAFRAMEID_ISSET_ID = 0;
  private static final int __NEWDATAFRAMEID_ISSET_ID = 1;
  private static final int __TRANSFORMERID_ISSET_ID = 2;
  private static final int __EVENTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OLD_DATA_FRAME_ID, new org.apache.thrift.meta_data.FieldMetaData("oldDataFrameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_DATA_FRAME_ID, new org.apache.thrift.meta_data.FieldMetaData("newDataFrameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSFORMER_ID, new org.apache.thrift.meta_data.FieldMetaData("transformerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILEPATH, new org.apache.thrift.meta_data.FieldMetaData("filepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformEventResponse.class, metaDataMap);
  }

  public TransformEventResponse() {
  }

  public TransformEventResponse(
    int oldDataFrameId,
    int newDataFrameId,
    int transformerId,
    int eventId,
    String filepath)
  {
    this();
    this.oldDataFrameId = oldDataFrameId;
    setOldDataFrameIdIsSet(true);
    this.newDataFrameId = newDataFrameId;
    setNewDataFrameIdIsSet(true);
    this.transformerId = transformerId;
    setTransformerIdIsSet(true);
    this.eventId = eventId;
    setEventIdIsSet(true);
    this.filepath = filepath;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransformEventResponse(TransformEventResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.oldDataFrameId = other.oldDataFrameId;
    this.newDataFrameId = other.newDataFrameId;
    this.transformerId = other.transformerId;
    this.eventId = other.eventId;
    if (other.isSetFilepath()) {
      this.filepath = other.filepath;
    }
  }

  public TransformEventResponse deepCopy() {
    return new TransformEventResponse(this);
  }

  @Override
  public void clear() {
    setOldDataFrameIdIsSet(false);
    this.oldDataFrameId = 0;
    setNewDataFrameIdIsSet(false);
    this.newDataFrameId = 0;
    setTransformerIdIsSet(false);
    this.transformerId = 0;
    setEventIdIsSet(false);
    this.eventId = 0;
    this.filepath = null;
  }

  public int getOldDataFrameId() {
    return this.oldDataFrameId;
  }

  public TransformEventResponse setOldDataFrameId(int oldDataFrameId) {
    this.oldDataFrameId = oldDataFrameId;
    setOldDataFrameIdIsSet(true);
    return this;
  }

  public void unsetOldDataFrameId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDDATAFRAMEID_ISSET_ID);
  }

  /** Returns true if field oldDataFrameId is set (has been assigned a value) and false otherwise */
  public boolean isSetOldDataFrameId() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDDATAFRAMEID_ISSET_ID);
  }

  public void setOldDataFrameIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDDATAFRAMEID_ISSET_ID, value);
  }

  public int getNewDataFrameId() {
    return this.newDataFrameId;
  }

  public TransformEventResponse setNewDataFrameId(int newDataFrameId) {
    this.newDataFrameId = newDataFrameId;
    setNewDataFrameIdIsSet(true);
    return this;
  }

  public void unsetNewDataFrameId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWDATAFRAMEID_ISSET_ID);
  }

  /** Returns true if field newDataFrameId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewDataFrameId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWDATAFRAMEID_ISSET_ID);
  }

  public void setNewDataFrameIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWDATAFRAMEID_ISSET_ID, value);
  }

  public int getTransformerId() {
    return this.transformerId;
  }

  public TransformEventResponse setTransformerId(int transformerId) {
    this.transformerId = transformerId;
    setTransformerIdIsSet(true);
    return this;
  }

  public void unsetTransformerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSFORMERID_ISSET_ID);
  }

  /** Returns true if field transformerId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransformerId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSFORMERID_ISSET_ID);
  }

  public void setTransformerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSFORMERID_ISSET_ID, value);
  }

  public int getEventId() {
    return this.eventId;
  }

  public TransformEventResponse setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public String getFilepath() {
    return this.filepath;
  }

  public TransformEventResponse setFilepath(String filepath) {
    this.filepath = filepath;
    return this;
  }

  public void unsetFilepath() {
    this.filepath = null;
  }

  /** Returns true if field filepath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilepath() {
    return this.filepath != null;
  }

  public void setFilepathIsSet(boolean value) {
    if (!value) {
      this.filepath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OLD_DATA_FRAME_ID:
      if (value == null) {
        unsetOldDataFrameId();
      } else {
        setOldDataFrameId((Integer)value);
      }
      break;

    case NEW_DATA_FRAME_ID:
      if (value == null) {
        unsetNewDataFrameId();
      } else {
        setNewDataFrameId((Integer)value);
      }
      break;

    case TRANSFORMER_ID:
      if (value == null) {
        unsetTransformerId();
      } else {
        setTransformerId((Integer)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Integer)value);
      }
      break;

    case FILEPATH:
      if (value == null) {
        unsetFilepath();
      } else {
        setFilepath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OLD_DATA_FRAME_ID:
      return getOldDataFrameId();

    case NEW_DATA_FRAME_ID:
      return getNewDataFrameId();

    case TRANSFORMER_ID:
      return getTransformerId();

    case EVENT_ID:
      return getEventId();

    case FILEPATH:
      return getFilepath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OLD_DATA_FRAME_ID:
      return isSetOldDataFrameId();
    case NEW_DATA_FRAME_ID:
      return isSetNewDataFrameId();
    case TRANSFORMER_ID:
      return isSetTransformerId();
    case EVENT_ID:
      return isSetEventId();
    case FILEPATH:
      return isSetFilepath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransformEventResponse)
      return this.equals((TransformEventResponse)that);
    return false;
  }

  public boolean equals(TransformEventResponse that) {
    if (that == null)
      return false;

    boolean this_present_oldDataFrameId = true;
    boolean that_present_oldDataFrameId = true;
    if (this_present_oldDataFrameId || that_present_oldDataFrameId) {
      if (!(this_present_oldDataFrameId && that_present_oldDataFrameId))
        return false;
      if (this.oldDataFrameId != that.oldDataFrameId)
        return false;
    }

    boolean this_present_newDataFrameId = true;
    boolean that_present_newDataFrameId = true;
    if (this_present_newDataFrameId || that_present_newDataFrameId) {
      if (!(this_present_newDataFrameId && that_present_newDataFrameId))
        return false;
      if (this.newDataFrameId != that.newDataFrameId)
        return false;
    }

    boolean this_present_transformerId = true;
    boolean that_present_transformerId = true;
    if (this_present_transformerId || that_present_transformerId) {
      if (!(this_present_transformerId && that_present_transformerId))
        return false;
      if (this.transformerId != that.transformerId)
        return false;
    }

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_filepath = true && this.isSetFilepath();
    boolean that_present_filepath = true && that.isSetFilepath();
    if (this_present_filepath || that_present_filepath) {
      if (!(this_present_filepath && that_present_filepath))
        return false;
      if (!this.filepath.equals(that.filepath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_oldDataFrameId = true;
    list.add(present_oldDataFrameId);
    if (present_oldDataFrameId)
      list.add(oldDataFrameId);

    boolean present_newDataFrameId = true;
    list.add(present_newDataFrameId);
    if (present_newDataFrameId)
      list.add(newDataFrameId);

    boolean present_transformerId = true;
    list.add(present_transformerId);
    if (present_transformerId)
      list.add(transformerId);

    boolean present_eventId = true;
    list.add(present_eventId);
    if (present_eventId)
      list.add(eventId);

    boolean present_filepath = true && (isSetFilepath());
    list.add(present_filepath);
    if (present_filepath)
      list.add(filepath);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransformEventResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOldDataFrameId()).compareTo(other.isSetOldDataFrameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldDataFrameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldDataFrameId, other.oldDataFrameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewDataFrameId()).compareTo(other.isSetNewDataFrameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewDataFrameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newDataFrameId, other.newDataFrameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransformerId()).compareTo(other.isSetTransformerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransformerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformerId, other.transformerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilepath()).compareTo(other.isSetFilepath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilepath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filepath, other.filepath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransformEventResponse(");
    boolean first = true;

    sb.append("oldDataFrameId:");
    sb.append(this.oldDataFrameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newDataFrameId:");
    sb.append(this.newDataFrameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transformerId:");
    sb.append(this.transformerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filepath:");
    if (this.filepath == null) {
      sb.append("null");
    } else {
      sb.append(this.filepath);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransformEventResponseStandardSchemeFactory implements SchemeFactory {
    public TransformEventResponseStandardScheme getScheme() {
      return new TransformEventResponseStandardScheme();
    }
  }

  private static class TransformEventResponseStandardScheme extends StandardScheme<TransformEventResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransformEventResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OLD_DATA_FRAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oldDataFrameId = iprot.readI32();
              struct.setOldDataFrameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_DATA_FRAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newDataFrameId = iprot.readI32();
              struct.setNewDataFrameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSFORMER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transformerId = iprot.readI32();
              struct.setTransformerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILEPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filepath = iprot.readString();
              struct.setFilepathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransformEventResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OLD_DATA_FRAME_ID_FIELD_DESC);
      oprot.writeI32(struct.oldDataFrameId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_DATA_FRAME_ID_FIELD_DESC);
      oprot.writeI32(struct.newDataFrameId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSFORMER_ID_FIELD_DESC);
      oprot.writeI32(struct.transformerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.eventId);
      oprot.writeFieldEnd();
      if (struct.filepath != null) {
        oprot.writeFieldBegin(FILEPATH_FIELD_DESC);
        oprot.writeString(struct.filepath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransformEventResponseTupleSchemeFactory implements SchemeFactory {
    public TransformEventResponseTupleScheme getScheme() {
      return new TransformEventResponseTupleScheme();
    }
  }

  private static class TransformEventResponseTupleScheme extends TupleScheme<TransformEventResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransformEventResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOldDataFrameId()) {
        optionals.set(0);
      }
      if (struct.isSetNewDataFrameId()) {
        optionals.set(1);
      }
      if (struct.isSetTransformerId()) {
        optionals.set(2);
      }
      if (struct.isSetEventId()) {
        optionals.set(3);
      }
      if (struct.isSetFilepath()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOldDataFrameId()) {
        oprot.writeI32(struct.oldDataFrameId);
      }
      if (struct.isSetNewDataFrameId()) {
        oprot.writeI32(struct.newDataFrameId);
      }
      if (struct.isSetTransformerId()) {
        oprot.writeI32(struct.transformerId);
      }
      if (struct.isSetEventId()) {
        oprot.writeI32(struct.eventId);
      }
      if (struct.isSetFilepath()) {
        oprot.writeString(struct.filepath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransformEventResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.oldDataFrameId = iprot.readI32();
        struct.setOldDataFrameIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.newDataFrameId = iprot.readI32();
        struct.setNewDataFrameIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transformerId = iprot.readI32();
        struct.setTransformerIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventId = iprot.readI32();
        struct.setEventIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.filepath = iprot.readString();
        struct.setFilepathIsSet(true);
      }
    }
  }

}

