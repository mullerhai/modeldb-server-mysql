/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class CompareHyperParametersResponse implements org.apache.thrift.TBase<CompareHyperParametersResponse, CompareHyperParametersResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CompareHyperParametersResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareHyperParametersResponse");

  private static final org.apache.thrift.protocol.TField MODEL1_ONLY_HYPERPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("model1OnlyHyperparams", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL2_ONLY_HYPERPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("model2OnlyHyperparams", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField SHARED_HYPERPARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedHyperparams", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompareHyperParametersResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompareHyperParametersResponseTupleSchemeFactory());
  }

  public Map<String,String> model1OnlyHyperparams; // required
  public Map<String,String> model2OnlyHyperparams; // required
  public Map<String,StringPair> sharedHyperparams; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL1_ONLY_HYPERPARAMS((short)1, "model1OnlyHyperparams"),
    MODEL2_ONLY_HYPERPARAMS((short)2, "model2OnlyHyperparams"),
    SHARED_HYPERPARAMS((short)3, "sharedHyperparams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL1_ONLY_HYPERPARAMS
          return MODEL1_ONLY_HYPERPARAMS;
        case 2: // MODEL2_ONLY_HYPERPARAMS
          return MODEL2_ONLY_HYPERPARAMS;
        case 3: // SHARED_HYPERPARAMS
          return SHARED_HYPERPARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL1_ONLY_HYPERPARAMS, new org.apache.thrift.meta_data.FieldMetaData("model1OnlyHyperparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MODEL2_ONLY_HYPERPARAMS, new org.apache.thrift.meta_data.FieldMetaData("model2OnlyHyperparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SHARED_HYPERPARAMS, new org.apache.thrift.meta_data.FieldMetaData("sharedHyperparams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StringPair.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareHyperParametersResponse.class, metaDataMap);
  }

  public CompareHyperParametersResponse() {
  }

  public CompareHyperParametersResponse(
    Map<String,String> model1OnlyHyperparams,
    Map<String,String> model2OnlyHyperparams,
    Map<String,StringPair> sharedHyperparams)
  {
    this();
    this.model1OnlyHyperparams = model1OnlyHyperparams;
    this.model2OnlyHyperparams = model2OnlyHyperparams;
    this.sharedHyperparams = sharedHyperparams;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompareHyperParametersResponse(CompareHyperParametersResponse other) {
    if (other.isSetModel1OnlyHyperparams()) {
      Map<String,String> __this__model1OnlyHyperparams = new HashMap<String,String>(other.model1OnlyHyperparams);
      this.model1OnlyHyperparams = __this__model1OnlyHyperparams;
    }
    if (other.isSetModel2OnlyHyperparams()) {
      Map<String,String> __this__model2OnlyHyperparams = new HashMap<String,String>(other.model2OnlyHyperparams);
      this.model2OnlyHyperparams = __this__model2OnlyHyperparams;
    }
    if (other.isSetSharedHyperparams()) {
      Map<String,StringPair> __this__sharedHyperparams = new HashMap<String,StringPair>(other.sharedHyperparams.size());
      for (Map.Entry<String, StringPair> other_element : other.sharedHyperparams.entrySet()) {

        String other_element_key = other_element.getKey();
        StringPair other_element_value = other_element.getValue();

        String __this__sharedHyperparams_copy_key = other_element_key;

        StringPair __this__sharedHyperparams_copy_value = new StringPair(other_element_value);

        __this__sharedHyperparams.put(__this__sharedHyperparams_copy_key, __this__sharedHyperparams_copy_value);
      }
      this.sharedHyperparams = __this__sharedHyperparams;
    }
  }

  public CompareHyperParametersResponse deepCopy() {
    return new CompareHyperParametersResponse(this);
  }

  @Override
  public void clear() {
    this.model1OnlyHyperparams = null;
    this.model2OnlyHyperparams = null;
    this.sharedHyperparams = null;
  }

  public int getModel1OnlyHyperparamsSize() {
    return (this.model1OnlyHyperparams == null) ? 0 : this.model1OnlyHyperparams.size();
  }

  public void putToModel1OnlyHyperparams(String key, String val) {
    if (this.model1OnlyHyperparams == null) {
      this.model1OnlyHyperparams = new HashMap<String,String>();
    }
    this.model1OnlyHyperparams.put(key, val);
  }

  public Map<String,String> getModel1OnlyHyperparams() {
    return this.model1OnlyHyperparams;
  }

  public CompareHyperParametersResponse setModel1OnlyHyperparams(Map<String,String> model1OnlyHyperparams) {
    this.model1OnlyHyperparams = model1OnlyHyperparams;
    return this;
  }

  public void unsetModel1OnlyHyperparams() {
    this.model1OnlyHyperparams = null;
  }

  /** Returns true if field model1OnlyHyperparams is set (has been assigned a value) and false otherwise */
  public boolean isSetModel1OnlyHyperparams() {
    return this.model1OnlyHyperparams != null;
  }

  public void setModel1OnlyHyperparamsIsSet(boolean value) {
    if (!value) {
      this.model1OnlyHyperparams = null;
    }
  }

  public int getModel2OnlyHyperparamsSize() {
    return (this.model2OnlyHyperparams == null) ? 0 : this.model2OnlyHyperparams.size();
  }

  public void putToModel2OnlyHyperparams(String key, String val) {
    if (this.model2OnlyHyperparams == null) {
      this.model2OnlyHyperparams = new HashMap<String,String>();
    }
    this.model2OnlyHyperparams.put(key, val);
  }

  public Map<String,String> getModel2OnlyHyperparams() {
    return this.model2OnlyHyperparams;
  }

  public CompareHyperParametersResponse setModel2OnlyHyperparams(Map<String,String> model2OnlyHyperparams) {
    this.model2OnlyHyperparams = model2OnlyHyperparams;
    return this;
  }

  public void unsetModel2OnlyHyperparams() {
    this.model2OnlyHyperparams = null;
  }

  /** Returns true if field model2OnlyHyperparams is set (has been assigned a value) and false otherwise */
  public boolean isSetModel2OnlyHyperparams() {
    return this.model2OnlyHyperparams != null;
  }

  public void setModel2OnlyHyperparamsIsSet(boolean value) {
    if (!value) {
      this.model2OnlyHyperparams = null;
    }
  }

  public int getSharedHyperparamsSize() {
    return (this.sharedHyperparams == null) ? 0 : this.sharedHyperparams.size();
  }

  public void putToSharedHyperparams(String key, StringPair val) {
    if (this.sharedHyperparams == null) {
      this.sharedHyperparams = new HashMap<String,StringPair>();
    }
    this.sharedHyperparams.put(key, val);
  }

  public Map<String,StringPair> getSharedHyperparams() {
    return this.sharedHyperparams;
  }

  public CompareHyperParametersResponse setSharedHyperparams(Map<String,StringPair> sharedHyperparams) {
    this.sharedHyperparams = sharedHyperparams;
    return this;
  }

  public void unsetSharedHyperparams() {
    this.sharedHyperparams = null;
  }

  /** Returns true if field sharedHyperparams is set (has been assigned a value) and false otherwise */
  public boolean isSetSharedHyperparams() {
    return this.sharedHyperparams != null;
  }

  public void setSharedHyperparamsIsSet(boolean value) {
    if (!value) {
      this.sharedHyperparams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL1_ONLY_HYPERPARAMS:
      if (value == null) {
        unsetModel1OnlyHyperparams();
      } else {
        setModel1OnlyHyperparams((Map<String,String>)value);
      }
      break;

    case MODEL2_ONLY_HYPERPARAMS:
      if (value == null) {
        unsetModel2OnlyHyperparams();
      } else {
        setModel2OnlyHyperparams((Map<String,String>)value);
      }
      break;

    case SHARED_HYPERPARAMS:
      if (value == null) {
        unsetSharedHyperparams();
      } else {
        setSharedHyperparams((Map<String,StringPair>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL1_ONLY_HYPERPARAMS:
      return getModel1OnlyHyperparams();

    case MODEL2_ONLY_HYPERPARAMS:
      return getModel2OnlyHyperparams();

    case SHARED_HYPERPARAMS:
      return getSharedHyperparams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL1_ONLY_HYPERPARAMS:
      return isSetModel1OnlyHyperparams();
    case MODEL2_ONLY_HYPERPARAMS:
      return isSetModel2OnlyHyperparams();
    case SHARED_HYPERPARAMS:
      return isSetSharedHyperparams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompareHyperParametersResponse)
      return this.equals((CompareHyperParametersResponse)that);
    return false;
  }

  public boolean equals(CompareHyperParametersResponse that) {
    if (that == null)
      return false;

    boolean this_present_model1OnlyHyperparams = true && this.isSetModel1OnlyHyperparams();
    boolean that_present_model1OnlyHyperparams = true && that.isSetModel1OnlyHyperparams();
    if (this_present_model1OnlyHyperparams || that_present_model1OnlyHyperparams) {
      if (!(this_present_model1OnlyHyperparams && that_present_model1OnlyHyperparams))
        return false;
      if (!this.model1OnlyHyperparams.equals(that.model1OnlyHyperparams))
        return false;
    }

    boolean this_present_model2OnlyHyperparams = true && this.isSetModel2OnlyHyperparams();
    boolean that_present_model2OnlyHyperparams = true && that.isSetModel2OnlyHyperparams();
    if (this_present_model2OnlyHyperparams || that_present_model2OnlyHyperparams) {
      if (!(this_present_model2OnlyHyperparams && that_present_model2OnlyHyperparams))
        return false;
      if (!this.model2OnlyHyperparams.equals(that.model2OnlyHyperparams))
        return false;
    }

    boolean this_present_sharedHyperparams = true && this.isSetSharedHyperparams();
    boolean that_present_sharedHyperparams = true && that.isSetSharedHyperparams();
    if (this_present_sharedHyperparams || that_present_sharedHyperparams) {
      if (!(this_present_sharedHyperparams && that_present_sharedHyperparams))
        return false;
      if (!this.sharedHyperparams.equals(that.sharedHyperparams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_model1OnlyHyperparams = true && (isSetModel1OnlyHyperparams());
    list.add(present_model1OnlyHyperparams);
    if (present_model1OnlyHyperparams)
      list.add(model1OnlyHyperparams);

    boolean present_model2OnlyHyperparams = true && (isSetModel2OnlyHyperparams());
    list.add(present_model2OnlyHyperparams);
    if (present_model2OnlyHyperparams)
      list.add(model2OnlyHyperparams);

    boolean present_sharedHyperparams = true && (isSetSharedHyperparams());
    list.add(present_sharedHyperparams);
    if (present_sharedHyperparams)
      list.add(sharedHyperparams);

    return list.hashCode();
  }

  @Override
  public int compareTo(CompareHyperParametersResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModel1OnlyHyperparams()).compareTo(other.isSetModel1OnlyHyperparams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel1OnlyHyperparams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model1OnlyHyperparams, other.model1OnlyHyperparams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel2OnlyHyperparams()).compareTo(other.isSetModel2OnlyHyperparams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel2OnlyHyperparams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model2OnlyHyperparams, other.model2OnlyHyperparams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSharedHyperparams()).compareTo(other.isSetSharedHyperparams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSharedHyperparams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedHyperparams, other.sharedHyperparams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompareHyperParametersResponse(");
    boolean first = true;

    sb.append("model1OnlyHyperparams:");
    if (this.model1OnlyHyperparams == null) {
      sb.append("null");
    } else {
      sb.append(this.model1OnlyHyperparams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model2OnlyHyperparams:");
    if (this.model2OnlyHyperparams == null) {
      sb.append("null");
    } else {
      sb.append(this.model2OnlyHyperparams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sharedHyperparams:");
    if (this.sharedHyperparams == null) {
      sb.append("null");
    } else {
      sb.append(this.sharedHyperparams);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompareHyperParametersResponseStandardSchemeFactory implements SchemeFactory {
    public CompareHyperParametersResponseStandardScheme getScheme() {
      return new CompareHyperParametersResponseStandardScheme();
    }
  }

  private static class CompareHyperParametersResponseStandardScheme extends StandardScheme<CompareHyperParametersResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompareHyperParametersResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL1_ONLY_HYPERPARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                struct.model1OnlyHyperparams = new HashMap<String,String>(2*_map160.size);
                String _key161;
                String _val162;
                for (int _i163 = 0; _i163 < _map160.size; ++_i163)
                {
                  _key161 = iprot.readString();
                  _val162 = iprot.readString();
                  struct.model1OnlyHyperparams.put(_key161, _val162);
                }
                iprot.readMapEnd();
              }
              struct.setModel1OnlyHyperparamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL2_ONLY_HYPERPARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map164 = iprot.readMapBegin();
                struct.model2OnlyHyperparams = new HashMap<String,String>(2*_map164.size);
                String _key165;
                String _val166;
                for (int _i167 = 0; _i167 < _map164.size; ++_i167)
                {
                  _key165 = iprot.readString();
                  _val166 = iprot.readString();
                  struct.model2OnlyHyperparams.put(_key165, _val166);
                }
                iprot.readMapEnd();
              }
              struct.setModel2OnlyHyperparamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHARED_HYPERPARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                struct.sharedHyperparams = new HashMap<String,StringPair>(2*_map168.size);
                String _key169;
                StringPair _val170;
                for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                {
                  _key169 = iprot.readString();
                  _val170 = new StringPair();
                  _val170.read(iprot);
                  struct.sharedHyperparams.put(_key169, _val170);
                }
                iprot.readMapEnd();
              }
              struct.setSharedHyperparamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompareHyperParametersResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.model1OnlyHyperparams != null) {
        oprot.writeFieldBegin(MODEL1_ONLY_HYPERPARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.model1OnlyHyperparams.size()));
          for (Map.Entry<String, String> _iter172 : struct.model1OnlyHyperparams.entrySet())
          {
            oprot.writeString(_iter172.getKey());
            oprot.writeString(_iter172.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.model2OnlyHyperparams != null) {
        oprot.writeFieldBegin(MODEL2_ONLY_HYPERPARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.model2OnlyHyperparams.size()));
          for (Map.Entry<String, String> _iter173 : struct.model2OnlyHyperparams.entrySet())
          {
            oprot.writeString(_iter173.getKey());
            oprot.writeString(_iter173.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sharedHyperparams != null) {
        oprot.writeFieldBegin(SHARED_HYPERPARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.sharedHyperparams.size()));
          for (Map.Entry<String, StringPair> _iter174 : struct.sharedHyperparams.entrySet())
          {
            oprot.writeString(_iter174.getKey());
            _iter174.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompareHyperParametersResponseTupleSchemeFactory implements SchemeFactory {
    public CompareHyperParametersResponseTupleScheme getScheme() {
      return new CompareHyperParametersResponseTupleScheme();
    }
  }

  private static class CompareHyperParametersResponseTupleScheme extends TupleScheme<CompareHyperParametersResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompareHyperParametersResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModel1OnlyHyperparams()) {
        optionals.set(0);
      }
      if (struct.isSetModel2OnlyHyperparams()) {
        optionals.set(1);
      }
      if (struct.isSetSharedHyperparams()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetModel1OnlyHyperparams()) {
        {
          oprot.writeI32(struct.model1OnlyHyperparams.size());
          for (Map.Entry<String, String> _iter175 : struct.model1OnlyHyperparams.entrySet())
          {
            oprot.writeString(_iter175.getKey());
            oprot.writeString(_iter175.getValue());
          }
        }
      }
      if (struct.isSetModel2OnlyHyperparams()) {
        {
          oprot.writeI32(struct.model2OnlyHyperparams.size());
          for (Map.Entry<String, String> _iter176 : struct.model2OnlyHyperparams.entrySet())
          {
            oprot.writeString(_iter176.getKey());
            oprot.writeString(_iter176.getValue());
          }
        }
      }
      if (struct.isSetSharedHyperparams()) {
        {
          oprot.writeI32(struct.sharedHyperparams.size());
          for (Map.Entry<String, StringPair> _iter177 : struct.sharedHyperparams.entrySet())
          {
            oprot.writeString(_iter177.getKey());
            _iter177.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompareHyperParametersResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.model1OnlyHyperparams = new HashMap<String,String>(2*_map178.size);
          String _key179;
          String _val180;
          for (int _i181 = 0; _i181 < _map178.size; ++_i181)
          {
            _key179 = iprot.readString();
            _val180 = iprot.readString();
            struct.model1OnlyHyperparams.put(_key179, _val180);
          }
        }
        struct.setModel1OnlyHyperparamsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map182 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.model2OnlyHyperparams = new HashMap<String,String>(2*_map182.size);
          String _key183;
          String _val184;
          for (int _i185 = 0; _i185 < _map182.size; ++_i185)
          {
            _key183 = iprot.readString();
            _val184 = iprot.readString();
            struct.model2OnlyHyperparams.put(_key183, _val184);
          }
        }
        struct.setModel2OnlyHyperparamsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map186 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sharedHyperparams = new HashMap<String,StringPair>(2*_map186.size);
          String _key187;
          StringPair _val188;
          for (int _i189 = 0; _i189 < _map186.size; ++_i189)
          {
            _key187 = iprot.readString();
            _val188 = new StringPair();
            _val188.read(iprot);
            struct.sharedHyperparams.put(_key187, _val188);
          }
        }
        struct.setSharedHyperparamsIsSet(true);
      }
    }
  }

}

