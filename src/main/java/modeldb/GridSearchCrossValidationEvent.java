/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class GridSearchCrossValidationEvent implements org.apache.thrift.TBase<GridSearchCrossValidationEvent, GridSearchCrossValidationEvent._Fields>, java.io.Serializable, Cloneable, Comparable<GridSearchCrossValidationEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GridSearchCrossValidationEvent");

  private static final org.apache.thrift.protocol.TField NUM_FOLDS_FIELD_DESC = new org.apache.thrift.protocol.TField("numFolds", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BEST_FIT_FIELD_DESC = new org.apache.thrift.protocol.TField("bestFit", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CROSS_VALIDATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("crossValidations", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROBLEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("problemType", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GridSearchCrossValidationEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GridSearchCrossValidationEventTupleSchemeFactory());
  }

  public int numFolds; // required
  public FitEvent bestFit; // required
  public List<CrossValidationEvent> crossValidations; // required
  public int experimentRunId; // required
  /**
   * 
   * @see ProblemType
   */
  public ProblemType problemType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_FOLDS((short)1, "numFolds"),
    BEST_FIT((short)2, "bestFit"),
    CROSS_VALIDATIONS((short)3, "crossValidations"),
    EXPERIMENT_RUN_ID((short)4, "experimentRunId"),
    /**
     * 
     * @see ProblemType
     */
    PROBLEM_TYPE((short)5, "problemType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_FOLDS
          return NUM_FOLDS;
        case 2: // BEST_FIT
          return BEST_FIT;
        case 3: // CROSS_VALIDATIONS
          return CROSS_VALIDATIONS;
        case 4: // EXPERIMENT_RUN_ID
          return EXPERIMENT_RUN_ID;
        case 5: // PROBLEM_TYPE
          return PROBLEM_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMFOLDS_ISSET_ID = 0;
  private static final int __EXPERIMENTRUNID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROBLEM_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_FOLDS, new org.apache.thrift.meta_data.FieldMetaData("numFolds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEST_FIT, new org.apache.thrift.meta_data.FieldMetaData("bestFit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FitEvent.class)));
    tmpMap.put(_Fields.CROSS_VALIDATIONS, new org.apache.thrift.meta_data.FieldMetaData("crossValidations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossValidationEvent.class))));
    tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROBLEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("problemType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProblemType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GridSearchCrossValidationEvent.class, metaDataMap);
  }

  public GridSearchCrossValidationEvent() {
    this.problemType = modeldb.ProblemType.UNDEFINED;

  }

  public GridSearchCrossValidationEvent(
    int numFolds,
    FitEvent bestFit,
    List<CrossValidationEvent> crossValidations,
    int experimentRunId)
  {
    this();
    this.numFolds = numFolds;
    setNumFoldsIsSet(true);
    this.bestFit = bestFit;
    this.crossValidations = crossValidations;
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GridSearchCrossValidationEvent(GridSearchCrossValidationEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numFolds = other.numFolds;
    if (other.isSetBestFit()) {
      this.bestFit = new FitEvent(other.bestFit);
    }
    if (other.isSetCrossValidations()) {
      List<CrossValidationEvent> __this__crossValidations = new ArrayList<CrossValidationEvent>(other.crossValidations.size());
      for (CrossValidationEvent other_element : other.crossValidations) {
        __this__crossValidations.add(new CrossValidationEvent(other_element));
      }
      this.crossValidations = __this__crossValidations;
    }
    this.experimentRunId = other.experimentRunId;
    if (other.isSetProblemType()) {
      this.problemType = other.problemType;
    }
  }

  public GridSearchCrossValidationEvent deepCopy() {
    return new GridSearchCrossValidationEvent(this);
  }

  @Override
  public void clear() {
    setNumFoldsIsSet(false);
    this.numFolds = 0;
    this.bestFit = null;
    this.crossValidations = null;
    setExperimentRunIdIsSet(false);
    this.experimentRunId = 0;
    this.problemType = modeldb.ProblemType.UNDEFINED;

  }

  public int getNumFolds() {
    return this.numFolds;
  }

  public GridSearchCrossValidationEvent setNumFolds(int numFolds) {
    this.numFolds = numFolds;
    setNumFoldsIsSet(true);
    return this;
  }

  public void unsetNumFolds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMFOLDS_ISSET_ID);
  }

  /** Returns true if field numFolds is set (has been assigned a value) and false otherwise */
  public boolean isSetNumFolds() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMFOLDS_ISSET_ID);
  }

  public void setNumFoldsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMFOLDS_ISSET_ID, value);
  }

  public FitEvent getBestFit() {
    return this.bestFit;
  }

  public GridSearchCrossValidationEvent setBestFit(FitEvent bestFit) {
    this.bestFit = bestFit;
    return this;
  }

  public void unsetBestFit() {
    this.bestFit = null;
  }

  /** Returns true if field bestFit is set (has been assigned a value) and false otherwise */
  public boolean isSetBestFit() {
    return this.bestFit != null;
  }

  public void setBestFitIsSet(boolean value) {
    if (!value) {
      this.bestFit = null;
    }
  }

  public int getCrossValidationsSize() {
    return (this.crossValidations == null) ? 0 : this.crossValidations.size();
  }

  public java.util.Iterator<CrossValidationEvent> getCrossValidationsIterator() {
    return (this.crossValidations == null) ? null : this.crossValidations.iterator();
  }

  public void addToCrossValidations(CrossValidationEvent elem) {
    if (this.crossValidations == null) {
      this.crossValidations = new ArrayList<CrossValidationEvent>();
    }
    this.crossValidations.add(elem);
  }

  public List<CrossValidationEvent> getCrossValidations() {
    return this.crossValidations;
  }

  public GridSearchCrossValidationEvent setCrossValidations(List<CrossValidationEvent> crossValidations) {
    this.crossValidations = crossValidations;
    return this;
  }

  public void unsetCrossValidations() {
    this.crossValidations = null;
  }

  /** Returns true if field crossValidations is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossValidations() {
    return this.crossValidations != null;
  }

  public void setCrossValidationsIsSet(boolean value) {
    if (!value) {
      this.crossValidations = null;
    }
  }

  public int getExperimentRunId() {
    return this.experimentRunId;
  }

  public GridSearchCrossValidationEvent setExperimentRunId(int experimentRunId) {
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    return this;
  }

  public void unsetExperimentRunId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRunId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  public void setExperimentRunIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
  }

  /**
   * 
   * @see ProblemType
   */
  public ProblemType getProblemType() {
    return this.problemType;
  }

  /**
   * 
   * @see ProblemType
   */
  public GridSearchCrossValidationEvent setProblemType(ProblemType problemType) {
    this.problemType = problemType;
    return this;
  }

  public void unsetProblemType() {
    this.problemType = null;
  }

  /** Returns true if field problemType is set (has been assigned a value) and false otherwise */
  public boolean isSetProblemType() {
    return this.problemType != null;
  }

  public void setProblemTypeIsSet(boolean value) {
    if (!value) {
      this.problemType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_FOLDS:
      if (value == null) {
        unsetNumFolds();
      } else {
        setNumFolds((Integer)value);
      }
      break;

    case BEST_FIT:
      if (value == null) {
        unsetBestFit();
      } else {
        setBestFit((FitEvent)value);
      }
      break;

    case CROSS_VALIDATIONS:
      if (value == null) {
        unsetCrossValidations();
      } else {
        setCrossValidations((List<CrossValidationEvent>)value);
      }
      break;

    case EXPERIMENT_RUN_ID:
      if (value == null) {
        unsetExperimentRunId();
      } else {
        setExperimentRunId((Integer)value);
      }
      break;

    case PROBLEM_TYPE:
      if (value == null) {
        unsetProblemType();
      } else {
        setProblemType((ProblemType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_FOLDS:
      return getNumFolds();

    case BEST_FIT:
      return getBestFit();

    case CROSS_VALIDATIONS:
      return getCrossValidations();

    case EXPERIMENT_RUN_ID:
      return getExperimentRunId();

    case PROBLEM_TYPE:
      return getProblemType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_FOLDS:
      return isSetNumFolds();
    case BEST_FIT:
      return isSetBestFit();
    case CROSS_VALIDATIONS:
      return isSetCrossValidations();
    case EXPERIMENT_RUN_ID:
      return isSetExperimentRunId();
    case PROBLEM_TYPE:
      return isSetProblemType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GridSearchCrossValidationEvent)
      return this.equals((GridSearchCrossValidationEvent)that);
    return false;
  }

  public boolean equals(GridSearchCrossValidationEvent that) {
    if (that == null)
      return false;

    boolean this_present_numFolds = true;
    boolean that_present_numFolds = true;
    if (this_present_numFolds || that_present_numFolds) {
      if (!(this_present_numFolds && that_present_numFolds))
        return false;
      if (this.numFolds != that.numFolds)
        return false;
    }

    boolean this_present_bestFit = true && this.isSetBestFit();
    boolean that_present_bestFit = true && that.isSetBestFit();
    if (this_present_bestFit || that_present_bestFit) {
      if (!(this_present_bestFit && that_present_bestFit))
        return false;
      if (!this.bestFit.equals(that.bestFit))
        return false;
    }

    boolean this_present_crossValidations = true && this.isSetCrossValidations();
    boolean that_present_crossValidations = true && that.isSetCrossValidations();
    if (this_present_crossValidations || that_present_crossValidations) {
      if (!(this_present_crossValidations && that_present_crossValidations))
        return false;
      if (!this.crossValidations.equals(that.crossValidations))
        return false;
    }

    boolean this_present_experimentRunId = true;
    boolean that_present_experimentRunId = true;
    if (this_present_experimentRunId || that_present_experimentRunId) {
      if (!(this_present_experimentRunId && that_present_experimentRunId))
        return false;
      if (this.experimentRunId != that.experimentRunId)
        return false;
    }

    boolean this_present_problemType = true && this.isSetProblemType();
    boolean that_present_problemType = true && that.isSetProblemType();
    if (this_present_problemType || that_present_problemType) {
      if (!(this_present_problemType && that_present_problemType))
        return false;
      if (!this.problemType.equals(that.problemType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_numFolds = true;
    list.add(present_numFolds);
    if (present_numFolds)
      list.add(numFolds);

    boolean present_bestFit = true && (isSetBestFit());
    list.add(present_bestFit);
    if (present_bestFit)
      list.add(bestFit);

    boolean present_crossValidations = true && (isSetCrossValidations());
    list.add(present_crossValidations);
    if (present_crossValidations)
      list.add(crossValidations);

    boolean present_experimentRunId = true;
    list.add(present_experimentRunId);
    if (present_experimentRunId)
      list.add(experimentRunId);

    boolean present_problemType = true && (isSetProblemType());
    list.add(present_problemType);
    if (present_problemType)
      list.add(problemType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(GridSearchCrossValidationEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNumFolds()).compareTo(other.isSetNumFolds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumFolds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFolds, other.numFolds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBestFit()).compareTo(other.isSetBestFit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBestFit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestFit, other.bestFit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossValidations()).compareTo(other.isSetCrossValidations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossValidations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossValidations, other.crossValidations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProblemType()).compareTo(other.isSetProblemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProblemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problemType, other.problemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GridSearchCrossValidationEvent(");
    boolean first = true;

    sb.append("numFolds:");
    sb.append(this.numFolds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bestFit:");
    if (this.bestFit == null) {
      sb.append("null");
    } else {
      sb.append(this.bestFit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossValidations:");
    if (this.crossValidations == null) {
      sb.append("null");
    } else {
      sb.append(this.crossValidations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRunId:");
    sb.append(this.experimentRunId);
    first = false;
    if (isSetProblemType()) {
      if (!first) sb.append(", ");
      sb.append("problemType:");
      if (this.problemType == null) {
        sb.append("null");
      } else {
        sb.append(this.problemType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (bestFit != null) {
      bestFit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GridSearchCrossValidationEventStandardSchemeFactory implements SchemeFactory {
    public GridSearchCrossValidationEventStandardScheme getScheme() {
      return new GridSearchCrossValidationEventStandardScheme();
    }
  }

  private static class GridSearchCrossValidationEventStandardScheme extends StandardScheme<GridSearchCrossValidationEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GridSearchCrossValidationEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_FOLDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numFolds = iprot.readI32();
              struct.setNumFoldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEST_FIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bestFit = new FitEvent();
              struct.bestFit.read(iprot);
              struct.setBestFitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CROSS_VALIDATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list330 = iprot.readListBegin();
                struct.crossValidations = new ArrayList<CrossValidationEvent>(_list330.size);
                CrossValidationEvent _elem331;
                for (int _i332 = 0; _i332 < _list330.size; ++_i332)
                {
                  _elem331 = new CrossValidationEvent();
                  _elem331.read(iprot);
                  struct.crossValidations.add(_elem331);
                }
                iprot.readListEnd();
              }
              struct.setCrossValidationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPERIMENT_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentRunId = iprot.readI32();
              struct.setExperimentRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROBLEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.problemType = modeldb.ProblemType.findByValue(iprot.readI32());
              struct.setProblemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GridSearchCrossValidationEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_FOLDS_FIELD_DESC);
      oprot.writeI32(struct.numFolds);
      oprot.writeFieldEnd();
      if (struct.bestFit != null) {
        oprot.writeFieldBegin(BEST_FIT_FIELD_DESC);
        struct.bestFit.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.crossValidations != null) {
        oprot.writeFieldBegin(CROSS_VALIDATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.crossValidations.size()));
          for (CrossValidationEvent _iter333 : struct.crossValidations)
          {
            _iter333.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentRunId);
      oprot.writeFieldEnd();
      if (struct.problemType != null) {
        if (struct.isSetProblemType()) {
          oprot.writeFieldBegin(PROBLEM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.problemType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GridSearchCrossValidationEventTupleSchemeFactory implements SchemeFactory {
    public GridSearchCrossValidationEventTupleScheme getScheme() {
      return new GridSearchCrossValidationEventTupleScheme();
    }
  }

  private static class GridSearchCrossValidationEventTupleScheme extends TupleScheme<GridSearchCrossValidationEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GridSearchCrossValidationEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNumFolds()) {
        optionals.set(0);
      }
      if (struct.isSetBestFit()) {
        optionals.set(1);
      }
      if (struct.isSetCrossValidations()) {
        optionals.set(2);
      }
      if (struct.isSetExperimentRunId()) {
        optionals.set(3);
      }
      if (struct.isSetProblemType()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNumFolds()) {
        oprot.writeI32(struct.numFolds);
      }
      if (struct.isSetBestFit()) {
        struct.bestFit.write(oprot);
      }
      if (struct.isSetCrossValidations()) {
        {
          oprot.writeI32(struct.crossValidations.size());
          for (CrossValidationEvent _iter334 : struct.crossValidations)
          {
            _iter334.write(oprot);
          }
        }
      }
      if (struct.isSetExperimentRunId()) {
        oprot.writeI32(struct.experimentRunId);
      }
      if (struct.isSetProblemType()) {
        oprot.writeI32(struct.problemType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GridSearchCrossValidationEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.numFolds = iprot.readI32();
        struct.setNumFoldsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bestFit = new FitEvent();
        struct.bestFit.read(iprot);
        struct.setBestFitIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list335 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.crossValidations = new ArrayList<CrossValidationEvent>(_list335.size);
          CrossValidationEvent _elem336;
          for (int _i337 = 0; _i337 < _list335.size; ++_i337)
          {
            _elem336 = new CrossValidationEvent();
            _elem336.read(iprot);
            struct.crossValidations.add(_elem336);
          }
        }
        struct.setCrossValidationsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.experimentRunId = iprot.readI32();
        struct.setExperimentRunIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.problemType = modeldb.ProblemType.findByValue(iprot.readI32());
        struct.setProblemTypeIsSet(true);
      }
    }
  }

}

