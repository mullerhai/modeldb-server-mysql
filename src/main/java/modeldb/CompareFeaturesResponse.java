/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class CompareFeaturesResponse implements org.apache.thrift.TBase<CompareFeaturesResponse, CompareFeaturesResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFeaturesResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFeaturesResponse");

  private static final org.apache.thrift.protocol.TField MODEL1_ONLY_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("model1OnlyFeatures", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL2_ONLY_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("model2OnlyFeatures", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COMMON_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("commonFeatures", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompareFeaturesResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompareFeaturesResponseTupleSchemeFactory());
  }

  public List<String> model1OnlyFeatures; // required
  public List<String> model2OnlyFeatures; // required
  public List<String> commonFeatures; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL1_ONLY_FEATURES((short)1, "model1OnlyFeatures"),
    MODEL2_ONLY_FEATURES((short)2, "model2OnlyFeatures"),
    COMMON_FEATURES((short)3, "commonFeatures");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL1_ONLY_FEATURES
          return MODEL1_ONLY_FEATURES;
        case 2: // MODEL2_ONLY_FEATURES
          return MODEL2_ONLY_FEATURES;
        case 3: // COMMON_FEATURES
          return COMMON_FEATURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL1_ONLY_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("model1OnlyFeatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MODEL2_ONLY_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("model2OnlyFeatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMON_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("commonFeatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFeaturesResponse.class, metaDataMap);
  }

  public CompareFeaturesResponse() {
  }

  public CompareFeaturesResponse(
    List<String> model1OnlyFeatures,
    List<String> model2OnlyFeatures,
    List<String> commonFeatures)
  {
    this();
    this.model1OnlyFeatures = model1OnlyFeatures;
    this.model2OnlyFeatures = model2OnlyFeatures;
    this.commonFeatures = commonFeatures;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompareFeaturesResponse(CompareFeaturesResponse other) {
    if (other.isSetModel1OnlyFeatures()) {
      List<String> __this__model1OnlyFeatures = new ArrayList<String>(other.model1OnlyFeatures);
      this.model1OnlyFeatures = __this__model1OnlyFeatures;
    }
    if (other.isSetModel2OnlyFeatures()) {
      List<String> __this__model2OnlyFeatures = new ArrayList<String>(other.model2OnlyFeatures);
      this.model2OnlyFeatures = __this__model2OnlyFeatures;
    }
    if (other.isSetCommonFeatures()) {
      List<String> __this__commonFeatures = new ArrayList<String>(other.commonFeatures);
      this.commonFeatures = __this__commonFeatures;
    }
  }

  public CompareFeaturesResponse deepCopy() {
    return new CompareFeaturesResponse(this);
  }

  @Override
  public void clear() {
    this.model1OnlyFeatures = null;
    this.model2OnlyFeatures = null;
    this.commonFeatures = null;
  }

  public int getModel1OnlyFeaturesSize() {
    return (this.model1OnlyFeatures == null) ? 0 : this.model1OnlyFeatures.size();
  }

  public java.util.Iterator<String> getModel1OnlyFeaturesIterator() {
    return (this.model1OnlyFeatures == null) ? null : this.model1OnlyFeatures.iterator();
  }

  public void addToModel1OnlyFeatures(String elem) {
    if (this.model1OnlyFeatures == null) {
      this.model1OnlyFeatures = new ArrayList<String>();
    }
    this.model1OnlyFeatures.add(elem);
  }

  public List<String> getModel1OnlyFeatures() {
    return this.model1OnlyFeatures;
  }

  public CompareFeaturesResponse setModel1OnlyFeatures(List<String> model1OnlyFeatures) {
    this.model1OnlyFeatures = model1OnlyFeatures;
    return this;
  }

  public void unsetModel1OnlyFeatures() {
    this.model1OnlyFeatures = null;
  }

  /** Returns true if field model1OnlyFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetModel1OnlyFeatures() {
    return this.model1OnlyFeatures != null;
  }

  public void setModel1OnlyFeaturesIsSet(boolean value) {
    if (!value) {
      this.model1OnlyFeatures = null;
    }
  }

  public int getModel2OnlyFeaturesSize() {
    return (this.model2OnlyFeatures == null) ? 0 : this.model2OnlyFeatures.size();
  }

  public java.util.Iterator<String> getModel2OnlyFeaturesIterator() {
    return (this.model2OnlyFeatures == null) ? null : this.model2OnlyFeatures.iterator();
  }

  public void addToModel2OnlyFeatures(String elem) {
    if (this.model2OnlyFeatures == null) {
      this.model2OnlyFeatures = new ArrayList<String>();
    }
    this.model2OnlyFeatures.add(elem);
  }

  public List<String> getModel2OnlyFeatures() {
    return this.model2OnlyFeatures;
  }

  public CompareFeaturesResponse setModel2OnlyFeatures(List<String> model2OnlyFeatures) {
    this.model2OnlyFeatures = model2OnlyFeatures;
    return this;
  }

  public void unsetModel2OnlyFeatures() {
    this.model2OnlyFeatures = null;
  }

  /** Returns true if field model2OnlyFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetModel2OnlyFeatures() {
    return this.model2OnlyFeatures != null;
  }

  public void setModel2OnlyFeaturesIsSet(boolean value) {
    if (!value) {
      this.model2OnlyFeatures = null;
    }
  }

  public int getCommonFeaturesSize() {
    return (this.commonFeatures == null) ? 0 : this.commonFeatures.size();
  }

  public java.util.Iterator<String> getCommonFeaturesIterator() {
    return (this.commonFeatures == null) ? null : this.commonFeatures.iterator();
  }

  public void addToCommonFeatures(String elem) {
    if (this.commonFeatures == null) {
      this.commonFeatures = new ArrayList<String>();
    }
    this.commonFeatures.add(elem);
  }

  public List<String> getCommonFeatures() {
    return this.commonFeatures;
  }

  public CompareFeaturesResponse setCommonFeatures(List<String> commonFeatures) {
    this.commonFeatures = commonFeatures;
    return this;
  }

  public void unsetCommonFeatures() {
    this.commonFeatures = null;
  }

  /** Returns true if field commonFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonFeatures() {
    return this.commonFeatures != null;
  }

  public void setCommonFeaturesIsSet(boolean value) {
    if (!value) {
      this.commonFeatures = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL1_ONLY_FEATURES:
      if (value == null) {
        unsetModel1OnlyFeatures();
      } else {
        setModel1OnlyFeatures((List<String>)value);
      }
      break;

    case MODEL2_ONLY_FEATURES:
      if (value == null) {
        unsetModel2OnlyFeatures();
      } else {
        setModel2OnlyFeatures((List<String>)value);
      }
      break;

    case COMMON_FEATURES:
      if (value == null) {
        unsetCommonFeatures();
      } else {
        setCommonFeatures((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL1_ONLY_FEATURES:
      return getModel1OnlyFeatures();

    case MODEL2_ONLY_FEATURES:
      return getModel2OnlyFeatures();

    case COMMON_FEATURES:
      return getCommonFeatures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL1_ONLY_FEATURES:
      return isSetModel1OnlyFeatures();
    case MODEL2_ONLY_FEATURES:
      return isSetModel2OnlyFeatures();
    case COMMON_FEATURES:
      return isSetCommonFeatures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompareFeaturesResponse)
      return this.equals((CompareFeaturesResponse)that);
    return false;
  }

  public boolean equals(CompareFeaturesResponse that) {
    if (that == null)
      return false;

    boolean this_present_model1OnlyFeatures = true && this.isSetModel1OnlyFeatures();
    boolean that_present_model1OnlyFeatures = true && that.isSetModel1OnlyFeatures();
    if (this_present_model1OnlyFeatures || that_present_model1OnlyFeatures) {
      if (!(this_present_model1OnlyFeatures && that_present_model1OnlyFeatures))
        return false;
      if (!this.model1OnlyFeatures.equals(that.model1OnlyFeatures))
        return false;
    }

    boolean this_present_model2OnlyFeatures = true && this.isSetModel2OnlyFeatures();
    boolean that_present_model2OnlyFeatures = true && that.isSetModel2OnlyFeatures();
    if (this_present_model2OnlyFeatures || that_present_model2OnlyFeatures) {
      if (!(this_present_model2OnlyFeatures && that_present_model2OnlyFeatures))
        return false;
      if (!this.model2OnlyFeatures.equals(that.model2OnlyFeatures))
        return false;
    }

    boolean this_present_commonFeatures = true && this.isSetCommonFeatures();
    boolean that_present_commonFeatures = true && that.isSetCommonFeatures();
    if (this_present_commonFeatures || that_present_commonFeatures) {
      if (!(this_present_commonFeatures && that_present_commonFeatures))
        return false;
      if (!this.commonFeatures.equals(that.commonFeatures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_model1OnlyFeatures = true && (isSetModel1OnlyFeatures());
    list.add(present_model1OnlyFeatures);
    if (present_model1OnlyFeatures)
      list.add(model1OnlyFeatures);

    boolean present_model2OnlyFeatures = true && (isSetModel2OnlyFeatures());
    list.add(present_model2OnlyFeatures);
    if (present_model2OnlyFeatures)
      list.add(model2OnlyFeatures);

    boolean present_commonFeatures = true && (isSetCommonFeatures());
    list.add(present_commonFeatures);
    if (present_commonFeatures)
      list.add(commonFeatures);

    return list.hashCode();
  }

  @Override
  public int compareTo(CompareFeaturesResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModel1OnlyFeatures()).compareTo(other.isSetModel1OnlyFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel1OnlyFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model1OnlyFeatures, other.model1OnlyFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel2OnlyFeatures()).compareTo(other.isSetModel2OnlyFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel2OnlyFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model2OnlyFeatures, other.model2OnlyFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommonFeatures()).compareTo(other.isSetCommonFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonFeatures, other.commonFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompareFeaturesResponse(");
    boolean first = true;

    sb.append("model1OnlyFeatures:");
    if (this.model1OnlyFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.model1OnlyFeatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model2OnlyFeatures:");
    if (this.model2OnlyFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.model2OnlyFeatures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("commonFeatures:");
    if (this.commonFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.commonFeatures);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompareFeaturesResponseStandardSchemeFactory implements SchemeFactory {
    public CompareFeaturesResponseStandardScheme getScheme() {
      return new CompareFeaturesResponseStandardScheme();
    }
  }

  private static class CompareFeaturesResponseStandardScheme extends StandardScheme<CompareFeaturesResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFeaturesResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL1_ONLY_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                struct.model1OnlyFeatures = new ArrayList<String>(_list190.size);
                String _elem191;
                for (int _i192 = 0; _i192 < _list190.size; ++_i192)
                {
                  _elem191 = iprot.readString();
                  struct.model1OnlyFeatures.add(_elem191);
                }
                iprot.readListEnd();
              }
              struct.setModel1OnlyFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL2_ONLY_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list193 = iprot.readListBegin();
                struct.model2OnlyFeatures = new ArrayList<String>(_list193.size);
                String _elem194;
                for (int _i195 = 0; _i195 < _list193.size; ++_i195)
                {
                  _elem194 = iprot.readString();
                  struct.model2OnlyFeatures.add(_elem194);
                }
                iprot.readListEnd();
              }
              struct.setModel2OnlyFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMON_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
                struct.commonFeatures = new ArrayList<String>(_list196.size);
                String _elem197;
                for (int _i198 = 0; _i198 < _list196.size; ++_i198)
                {
                  _elem197 = iprot.readString();
                  struct.commonFeatures.add(_elem197);
                }
                iprot.readListEnd();
              }
              struct.setCommonFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFeaturesResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.model1OnlyFeatures != null) {
        oprot.writeFieldBegin(MODEL1_ONLY_FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.model1OnlyFeatures.size()));
          for (String _iter199 : struct.model1OnlyFeatures)
          {
            oprot.writeString(_iter199);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.model2OnlyFeatures != null) {
        oprot.writeFieldBegin(MODEL2_ONLY_FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.model2OnlyFeatures.size()));
          for (String _iter200 : struct.model2OnlyFeatures)
          {
            oprot.writeString(_iter200);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.commonFeatures != null) {
        oprot.writeFieldBegin(COMMON_FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.commonFeatures.size()));
          for (String _iter201 : struct.commonFeatures)
          {
            oprot.writeString(_iter201);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompareFeaturesResponseTupleSchemeFactory implements SchemeFactory {
    public CompareFeaturesResponseTupleScheme getScheme() {
      return new CompareFeaturesResponseTupleScheme();
    }
  }

  private static class CompareFeaturesResponseTupleScheme extends TupleScheme<CompareFeaturesResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompareFeaturesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModel1OnlyFeatures()) {
        optionals.set(0);
      }
      if (struct.isSetModel2OnlyFeatures()) {
        optionals.set(1);
      }
      if (struct.isSetCommonFeatures()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetModel1OnlyFeatures()) {
        {
          oprot.writeI32(struct.model1OnlyFeatures.size());
          for (String _iter202 : struct.model1OnlyFeatures)
          {
            oprot.writeString(_iter202);
          }
        }
      }
      if (struct.isSetModel2OnlyFeatures()) {
        {
          oprot.writeI32(struct.model2OnlyFeatures.size());
          for (String _iter203 : struct.model2OnlyFeatures)
          {
            oprot.writeString(_iter203);
          }
        }
      }
      if (struct.isSetCommonFeatures()) {
        {
          oprot.writeI32(struct.commonFeatures.size());
          for (String _iter204 : struct.commonFeatures)
          {
            oprot.writeString(_iter204);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompareFeaturesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.model1OnlyFeatures = new ArrayList<String>(_list205.size);
          String _elem206;
          for (int _i207 = 0; _i207 < _list205.size; ++_i207)
          {
            _elem206 = iprot.readString();
            struct.model1OnlyFeatures.add(_elem206);
          }
        }
        struct.setModel1OnlyFeaturesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list208 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.model2OnlyFeatures = new ArrayList<String>(_list208.size);
          String _elem209;
          for (int _i210 = 0; _i210 < _list208.size; ++_i210)
          {
            _elem209 = iprot.readString();
            struct.model2OnlyFeatures.add(_elem209);
          }
        }
        struct.setModel2OnlyFeaturesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list211 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.commonFeatures = new ArrayList<String>(_list211.size);
          String _elem212;
          for (int _i213 = 0; _i213 < _list211.size; ++_i213)
          {
            _elem212 = iprot.readString();
            struct.commonFeatures.add(_elem212);
          }
        }
        struct.setCommonFeaturesIsSet(true);
      }
    }
  }

}

