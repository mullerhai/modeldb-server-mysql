/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class AnnotationFragment implements org.apache.thrift.TBase<AnnotationFragment, AnnotationFragment._Fields>, java.io.Serializable, Cloneable, Comparable<AnnotationFragment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnnotationFragment");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DF_FIELD_DESC = new org.apache.thrift.protocol.TField("df", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TRANSFORMER_FIELD_DESC = new org.apache.thrift.protocol.TField("transformer", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnnotationFragmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnnotationFragmentTupleSchemeFactory());
  }

  public String type; // required
  public DataFrame df; // required
  public TransformerSpec spec; // required
  public Transformer transformer; // required
  public String message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    DF((short)2, "df"),
    SPEC((short)3, "spec"),
    TRANSFORMER((short)4, "transformer"),
    MESSAGE((short)5, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // DF
          return DF;
        case 3: // SPEC
          return SPEC;
        case 4: // TRANSFORMER
          return TRANSFORMER;
        case 5: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DF, new org.apache.thrift.meta_data.FieldMetaData("df", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformerSpec.class)));
    tmpMap.put(_Fields.TRANSFORMER, new org.apache.thrift.meta_data.FieldMetaData("transformer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transformer.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnnotationFragment.class, metaDataMap);
  }

  public AnnotationFragment() {
  }

  public AnnotationFragment(
    String type,
    DataFrame df,
    TransformerSpec spec,
    Transformer transformer,
    String message)
  {
    this();
    this.type = type;
    this.df = df;
    this.spec = spec;
    this.transformer = transformer;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnnotationFragment(AnnotationFragment other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDf()) {
      this.df = new DataFrame(other.df);
    }
    if (other.isSetSpec()) {
      this.spec = new TransformerSpec(other.spec);
    }
    if (other.isSetTransformer()) {
      this.transformer = new Transformer(other.transformer);
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public AnnotationFragment deepCopy() {
    return new AnnotationFragment(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.df = null;
    this.spec = null;
    this.transformer = null;
    this.message = null;
  }

  public String getType() {
    return this.type;
  }

  public AnnotationFragment setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public DataFrame getDf() {
    return this.df;
  }

  public AnnotationFragment setDf(DataFrame df) {
    this.df = df;
    return this;
  }

  public void unsetDf() {
    this.df = null;
  }

  /** Returns true if field df is set (has been assigned a value) and false otherwise */
  public boolean isSetDf() {
    return this.df != null;
  }

  public void setDfIsSet(boolean value) {
    if (!value) {
      this.df = null;
    }
  }

  public TransformerSpec getSpec() {
    return this.spec;
  }

  public AnnotationFragment setSpec(TransformerSpec spec) {
    this.spec = spec;
    return this;
  }

  public void unsetSpec() {
    this.spec = null;
  }

  /** Returns true if field spec is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec() {
    return this.spec != null;
  }

  public void setSpecIsSet(boolean value) {
    if (!value) {
      this.spec = null;
    }
  }

  public Transformer getTransformer() {
    return this.transformer;
  }

  public AnnotationFragment setTransformer(Transformer transformer) {
    this.transformer = transformer;
    return this;
  }

  public void unsetTransformer() {
    this.transformer = null;
  }

  /** Returns true if field transformer is set (has been assigned a value) and false otherwise */
  public boolean isSetTransformer() {
    return this.transformer != null;
  }

  public void setTransformerIsSet(boolean value) {
    if (!value) {
      this.transformer = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public AnnotationFragment setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DF:
      if (value == null) {
        unsetDf();
      } else {
        setDf((DataFrame)value);
      }
      break;

    case SPEC:
      if (value == null) {
        unsetSpec();
      } else {
        setSpec((TransformerSpec)value);
      }
      break;

    case TRANSFORMER:
      if (value == null) {
        unsetTransformer();
      } else {
        setTransformer((Transformer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case DF:
      return getDf();

    case SPEC:
      return getSpec();

    case TRANSFORMER:
      return getTransformer();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case DF:
      return isSetDf();
    case SPEC:
      return isSetSpec();
    case TRANSFORMER:
      return isSetTransformer();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnnotationFragment)
      return this.equals((AnnotationFragment)that);
    return false;
  }

  public boolean equals(AnnotationFragment that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_df = true && this.isSetDf();
    boolean that_present_df = true && that.isSetDf();
    if (this_present_df || that_present_df) {
      if (!(this_present_df && that_present_df))
        return false;
      if (!this.df.equals(that.df))
        return false;
    }

    boolean this_present_spec = true && this.isSetSpec();
    boolean that_present_spec = true && that.isSetSpec();
    if (this_present_spec || that_present_spec) {
      if (!(this_present_spec && that_present_spec))
        return false;
      if (!this.spec.equals(that.spec))
        return false;
    }

    boolean this_present_transformer = true && this.isSetTransformer();
    boolean that_present_transformer = true && that.isSetTransformer();
    if (this_present_transformer || that_present_transformer) {
      if (!(this_present_transformer && that_present_transformer))
        return false;
      if (!this.transformer.equals(that.transformer))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_df = true && (isSetDf());
    list.add(present_df);
    if (present_df)
      list.add(df);

    boolean present_spec = true && (isSetSpec());
    list.add(present_spec);
    if (present_spec)
      list.add(spec);

    boolean present_transformer = true && (isSetTransformer());
    list.add(present_transformer);
    if (present_transformer)
      list.add(transformer);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    return list.hashCode();
  }

  @Override
  public int compareTo(AnnotationFragment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDf()).compareTo(other.isSetDf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.df, other.df);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransformer()).compareTo(other.isSetTransformer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransformer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformer, other.transformer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AnnotationFragment(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("df:");
    if (this.df == null) {
      sb.append("null");
    } else {
      sb.append(this.df);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spec:");
    if (this.spec == null) {
      sb.append("null");
    } else {
      sb.append(this.spec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transformer:");
    if (this.transformer == null) {
      sb.append("null");
    } else {
      sb.append(this.transformer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (df != null) {
      df.validate();
    }
    if (spec != null) {
      spec.validate();
    }
    if (transformer != null) {
      transformer.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnnotationFragmentStandardSchemeFactory implements SchemeFactory {
    public AnnotationFragmentStandardScheme getScheme() {
      return new AnnotationFragmentStandardScheme();
    }
  }

  private static class AnnotationFragmentStandardScheme extends StandardScheme<AnnotationFragment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnnotationFragment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.df = new DataFrame();
              struct.df.read(iprot);
              struct.setDfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec = new TransformerSpec();
              struct.spec.read(iprot);
              struct.setSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANSFORMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.transformer = new Transformer();
              struct.transformer.read(iprot);
              struct.setTransformerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnnotationFragment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.df != null) {
        oprot.writeFieldBegin(DF_FIELD_DESC);
        struct.df.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.spec != null) {
        oprot.writeFieldBegin(SPEC_FIELD_DESC);
        struct.spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.transformer != null) {
        oprot.writeFieldBegin(TRANSFORMER_FIELD_DESC);
        struct.transformer.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnnotationFragmentTupleSchemeFactory implements SchemeFactory {
    public AnnotationFragmentTupleScheme getScheme() {
      return new AnnotationFragmentTupleScheme();
    }
  }

  private static class AnnotationFragmentTupleScheme extends TupleScheme<AnnotationFragment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnnotationFragment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetDf()) {
        optionals.set(1);
      }
      if (struct.isSetSpec()) {
        optionals.set(2);
      }
      if (struct.isSetTransformer()) {
        optionals.set(3);
      }
      if (struct.isSetMessage()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDf()) {
        struct.df.write(oprot);
      }
      if (struct.isSetSpec()) {
        struct.spec.write(oprot);
      }
      if (struct.isSetTransformer()) {
        struct.transformer.write(oprot);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnnotationFragment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.df = new DataFrame();
        struct.df.read(iprot);
        struct.setDfIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spec = new TransformerSpec();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
      if (incoming.get(3)) {
        struct.transformer = new Transformer();
        struct.transformer.read(iprot);
        struct.setTransformerIsSet(true);
      }
      if (incoming.get(4)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
    }
  }

}

