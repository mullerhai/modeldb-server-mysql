/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class ProjectExperimentsAndRuns implements org.apache.thrift.TBase<ProjectExperimentsAndRuns, ProjectExperimentsAndRuns._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectExperimentsAndRuns> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectExperimentsAndRuns");

  private static final org.apache.thrift.protocol.TField PROJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXPERIMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("experiments", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRuns", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectExperimentsAndRunsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectExperimentsAndRunsTupleSchemeFactory());
  }

  public int projId; // required
  public List<Experiment> experiments; // required
  public List<ExperimentRun> experimentRuns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJ_ID((short)1, "projId"),
    EXPERIMENTS((short)2, "experiments"),
    EXPERIMENT_RUNS((short)3, "experimentRuns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJ_ID
          return PROJ_ID;
        case 2: // EXPERIMENTS
          return EXPERIMENTS;
        case 3: // EXPERIMENT_RUNS
          return EXPERIMENT_RUNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJ_ID, new org.apache.thrift.meta_data.FieldMetaData("projId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIMENTS, new org.apache.thrift.meta_data.FieldMetaData("experiments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Experiment.class))));
    tmpMap.put(_Fields.EXPERIMENT_RUNS, new org.apache.thrift.meta_data.FieldMetaData("experimentRuns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentRun.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectExperimentsAndRuns.class, metaDataMap);
  }

  public ProjectExperimentsAndRuns() {
  }

  public ProjectExperimentsAndRuns(
    int projId,
    List<Experiment> experiments,
    List<ExperimentRun> experimentRuns)
  {
    this();
    this.projId = projId;
    setProjIdIsSet(true);
    this.experiments = experiments;
    this.experimentRuns = experimentRuns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectExperimentsAndRuns(ProjectExperimentsAndRuns other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projId = other.projId;
    if (other.isSetExperiments()) {
      List<Experiment> __this__experiments = new ArrayList<Experiment>(other.experiments.size());
      for (Experiment other_element : other.experiments) {
        __this__experiments.add(new Experiment(other_element));
      }
      this.experiments = __this__experiments;
    }
    if (other.isSetExperimentRuns()) {
      List<ExperimentRun> __this__experimentRuns = new ArrayList<ExperimentRun>(other.experimentRuns.size());
      for (ExperimentRun other_element : other.experimentRuns) {
        __this__experimentRuns.add(new ExperimentRun(other_element));
      }
      this.experimentRuns = __this__experimentRuns;
    }
  }

  public ProjectExperimentsAndRuns deepCopy() {
    return new ProjectExperimentsAndRuns(this);
  }

  @Override
  public void clear() {
    setProjIdIsSet(false);
    this.projId = 0;
    this.experiments = null;
    this.experimentRuns = null;
  }

  public int getProjId() {
    return this.projId;
  }

  public ProjectExperimentsAndRuns setProjId(int projId) {
    this.projId = projId;
    setProjIdIsSet(true);
    return this;
  }

  public void unsetProjId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJID_ISSET_ID);
  }

  /** Returns true if field projId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJID_ISSET_ID);
  }

  public void setProjIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJID_ISSET_ID, value);
  }

  public int getExperimentsSize() {
    return (this.experiments == null) ? 0 : this.experiments.size();
  }

  public java.util.Iterator<Experiment> getExperimentsIterator() {
    return (this.experiments == null) ? null : this.experiments.iterator();
  }

  public void addToExperiments(Experiment elem) {
    if (this.experiments == null) {
      this.experiments = new ArrayList<Experiment>();
    }
    this.experiments.add(elem);
  }

  public List<Experiment> getExperiments() {
    return this.experiments;
  }

  public ProjectExperimentsAndRuns setExperiments(List<Experiment> experiments) {
    this.experiments = experiments;
    return this;
  }

  public void unsetExperiments() {
    this.experiments = null;
  }

  /** Returns true if field experiments is set (has been assigned a value) and false otherwise */
  public boolean isSetExperiments() {
    return this.experiments != null;
  }

  public void setExperimentsIsSet(boolean value) {
    if (!value) {
      this.experiments = null;
    }
  }

  public int getExperimentRunsSize() {
    return (this.experimentRuns == null) ? 0 : this.experimentRuns.size();
  }

  public java.util.Iterator<ExperimentRun> getExperimentRunsIterator() {
    return (this.experimentRuns == null) ? null : this.experimentRuns.iterator();
  }

  public void addToExperimentRuns(ExperimentRun elem) {
    if (this.experimentRuns == null) {
      this.experimentRuns = new ArrayList<ExperimentRun>();
    }
    this.experimentRuns.add(elem);
  }

  public List<ExperimentRun> getExperimentRuns() {
    return this.experimentRuns;
  }

  public ProjectExperimentsAndRuns setExperimentRuns(List<ExperimentRun> experimentRuns) {
    this.experimentRuns = experimentRuns;
    return this;
  }

  public void unsetExperimentRuns() {
    this.experimentRuns = null;
  }

  /** Returns true if field experimentRuns is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRuns() {
    return this.experimentRuns != null;
  }

  public void setExperimentRunsIsSet(boolean value) {
    if (!value) {
      this.experimentRuns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJ_ID:
      if (value == null) {
        unsetProjId();
      } else {
        setProjId((Integer)value);
      }
      break;

    case EXPERIMENTS:
      if (value == null) {
        unsetExperiments();
      } else {
        setExperiments((List<Experiment>)value);
      }
      break;

    case EXPERIMENT_RUNS:
      if (value == null) {
        unsetExperimentRuns();
      } else {
        setExperimentRuns((List<ExperimentRun>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJ_ID:
      return getProjId();

    case EXPERIMENTS:
      return getExperiments();

    case EXPERIMENT_RUNS:
      return getExperimentRuns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJ_ID:
      return isSetProjId();
    case EXPERIMENTS:
      return isSetExperiments();
    case EXPERIMENT_RUNS:
      return isSetExperimentRuns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectExperimentsAndRuns)
      return this.equals((ProjectExperimentsAndRuns)that);
    return false;
  }

  public boolean equals(ProjectExperimentsAndRuns that) {
    if (that == null)
      return false;

    boolean this_present_projId = true;
    boolean that_present_projId = true;
    if (this_present_projId || that_present_projId) {
      if (!(this_present_projId && that_present_projId))
        return false;
      if (this.projId != that.projId)
        return false;
    }

    boolean this_present_experiments = true && this.isSetExperiments();
    boolean that_present_experiments = true && that.isSetExperiments();
    if (this_present_experiments || that_present_experiments) {
      if (!(this_present_experiments && that_present_experiments))
        return false;
      if (!this.experiments.equals(that.experiments))
        return false;
    }

    boolean this_present_experimentRuns = true && this.isSetExperimentRuns();
    boolean that_present_experimentRuns = true && that.isSetExperimentRuns();
    if (this_present_experimentRuns || that_present_experimentRuns) {
      if (!(this_present_experimentRuns && that_present_experimentRuns))
        return false;
      if (!this.experimentRuns.equals(that.experimentRuns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projId = true;
    list.add(present_projId);
    if (present_projId)
      list.add(projId);

    boolean present_experiments = true && (isSetExperiments());
    list.add(present_experiments);
    if (present_experiments)
      list.add(experiments);

    boolean present_experimentRuns = true && (isSetExperimentRuns());
    list.add(present_experimentRuns);
    if (present_experimentRuns)
      list.add(experimentRuns);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectExperimentsAndRuns other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjId()).compareTo(other.isSetProjId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projId, other.projId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperiments()).compareTo(other.isSetExperiments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperiments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiments, other.experiments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRuns()).compareTo(other.isSetExperimentRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRuns, other.experimentRuns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectExperimentsAndRuns(");
    boolean first = true;

    sb.append("projId:");
    sb.append(this.projId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("experiments:");
    if (this.experiments == null) {
      sb.append("null");
    } else {
      sb.append(this.experiments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRuns:");
    if (this.experimentRuns == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentRuns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectExperimentsAndRunsStandardSchemeFactory implements SchemeFactory {
    public ProjectExperimentsAndRunsStandardScheme getScheme() {
      return new ProjectExperimentsAndRunsStandardScheme();
    }
  }

  private static class ProjectExperimentsAndRunsStandardScheme extends StandardScheme<ProjectExperimentsAndRuns> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectExperimentsAndRuns struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projId = iprot.readI32();
              struct.setProjIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPERIMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.experiments = new ArrayList<Experiment>(_list214.size);
                Experiment _elem215;
                for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                {
                  _elem215 = new Experiment();
                  _elem215.read(iprot);
                  struct.experiments.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setExperimentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPERIMENT_RUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                struct.experimentRuns = new ArrayList<ExperimentRun>(_list217.size);
                ExperimentRun _elem218;
                for (int _i219 = 0; _i219 < _list217.size; ++_i219)
                {
                  _elem218 = new ExperimentRun();
                  _elem218.read(iprot);
                  struct.experimentRuns.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setExperimentRunsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectExperimentsAndRuns struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJ_ID_FIELD_DESC);
      oprot.writeI32(struct.projId);
      oprot.writeFieldEnd();
      if (struct.experiments != null) {
        oprot.writeFieldBegin(EXPERIMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.experiments.size()));
          for (Experiment _iter220 : struct.experiments)
          {
            _iter220.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.experimentRuns != null) {
        oprot.writeFieldBegin(EXPERIMENT_RUNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.experimentRuns.size()));
          for (ExperimentRun _iter221 : struct.experimentRuns)
          {
            _iter221.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectExperimentsAndRunsTupleSchemeFactory implements SchemeFactory {
    public ProjectExperimentsAndRunsTupleScheme getScheme() {
      return new ProjectExperimentsAndRunsTupleScheme();
    }
  }

  private static class ProjectExperimentsAndRunsTupleScheme extends TupleScheme<ProjectExperimentsAndRuns> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectExperimentsAndRuns struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjId()) {
        optionals.set(0);
      }
      if (struct.isSetExperiments()) {
        optionals.set(1);
      }
      if (struct.isSetExperimentRuns()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProjId()) {
        oprot.writeI32(struct.projId);
      }
      if (struct.isSetExperiments()) {
        {
          oprot.writeI32(struct.experiments.size());
          for (Experiment _iter222 : struct.experiments)
          {
            _iter222.write(oprot);
          }
        }
      }
      if (struct.isSetExperimentRuns()) {
        {
          oprot.writeI32(struct.experimentRuns.size());
          for (ExperimentRun _iter223 : struct.experimentRuns)
          {
            _iter223.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectExperimentsAndRuns struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.projId = iprot.readI32();
        struct.setProjIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list224 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.experiments = new ArrayList<Experiment>(_list224.size);
          Experiment _elem225;
          for (int _i226 = 0; _i226 < _list224.size; ++_i226)
          {
            _elem225 = new Experiment();
            _elem225.read(iprot);
            struct.experiments.add(_elem225);
          }
        }
        struct.setExperimentsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.experimentRuns = new ArrayList<ExperimentRun>(_list227.size);
          ExperimentRun _elem228;
          for (int _i229 = 0; _i229 < _list227.size; ++_i229)
          {
            _elem228 = new ExperimentRun();
            _elem228.read(iprot);
            struct.experimentRuns.add(_elem228);
          }
        }
        struct.setExperimentRunsIsSet(true);
      }
    }
  }

}

