/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class TreeModel implements org.apache.thrift.TBase<TreeModel, TreeModel._Fields>, java.io.Serializable, Cloneable, Comparable<TreeModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TreeModel");

  private static final org.apache.thrift.protocol.TField MODEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPONENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("components", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FEATURE_IMPORTANCES_FIELD_DESC = new org.apache.thrift.protocol.TField("featureImportances", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TreeModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TreeModelTupleSchemeFactory());
  }

  public String modelType; // required
  public List<TreeComponent> components; // required
  public List<Double> featureImportances; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_TYPE((short)1, "modelType"),
    COMPONENTS((short)2, "components"),
    FEATURE_IMPORTANCES((short)3, "featureImportances");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_TYPE
          return MODEL_TYPE;
        case 2: // COMPONENTS
          return COMPONENTS;
        case 3: // FEATURE_IMPORTANCES
          return FEATURE_IMPORTANCES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("modelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPONENTS, new org.apache.thrift.meta_data.FieldMetaData("components", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TreeComponent.class))));
    tmpMap.put(_Fields.FEATURE_IMPORTANCES, new org.apache.thrift.meta_data.FieldMetaData("featureImportances", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TreeModel.class, metaDataMap);
  }

  public TreeModel() {
  }

  public TreeModel(
    String modelType,
    List<TreeComponent> components,
    List<Double> featureImportances)
  {
    this();
    this.modelType = modelType;
    this.components = components;
    this.featureImportances = featureImportances;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TreeModel(TreeModel other) {
    if (other.isSetModelType()) {
      this.modelType = other.modelType;
    }
    if (other.isSetComponents()) {
      List<TreeComponent> __this__components = new ArrayList<TreeComponent>(other.components.size());
      for (TreeComponent other_element : other.components) {
        __this__components.add(new TreeComponent(other_element));
      }
      this.components = __this__components;
    }
    if (other.isSetFeatureImportances()) {
      List<Double> __this__featureImportances = new ArrayList<Double>(other.featureImportances);
      this.featureImportances = __this__featureImportances;
    }
  }

  public TreeModel deepCopy() {
    return new TreeModel(this);
  }

  @Override
  public void clear() {
    this.modelType = null;
    this.components = null;
    this.featureImportances = null;
  }

  public String getModelType() {
    return this.modelType;
  }

  public TreeModel setModelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  public void unsetModelType() {
    this.modelType = null;
  }

  /** Returns true if field modelType is set (has been assigned a value) and false otherwise */
  public boolean isSetModelType() {
    return this.modelType != null;
  }

  public void setModelTypeIsSet(boolean value) {
    if (!value) {
      this.modelType = null;
    }
  }

  public int getComponentsSize() {
    return (this.components == null) ? 0 : this.components.size();
  }

  public java.util.Iterator<TreeComponent> getComponentsIterator() {
    return (this.components == null) ? null : this.components.iterator();
  }

  public void addToComponents(TreeComponent elem) {
    if (this.components == null) {
      this.components = new ArrayList<TreeComponent>();
    }
    this.components.add(elem);
  }

  public List<TreeComponent> getComponents() {
    return this.components;
  }

  public TreeModel setComponents(List<TreeComponent> components) {
    this.components = components;
    return this;
  }

  public void unsetComponents() {
    this.components = null;
  }

  /** Returns true if field components is set (has been assigned a value) and false otherwise */
  public boolean isSetComponents() {
    return this.components != null;
  }

  public void setComponentsIsSet(boolean value) {
    if (!value) {
      this.components = null;
    }
  }

  public int getFeatureImportancesSize() {
    return (this.featureImportances == null) ? 0 : this.featureImportances.size();
  }

  public java.util.Iterator<Double> getFeatureImportancesIterator() {
    return (this.featureImportances == null) ? null : this.featureImportances.iterator();
  }

  public void addToFeatureImportances(double elem) {
    if (this.featureImportances == null) {
      this.featureImportances = new ArrayList<Double>();
    }
    this.featureImportances.add(elem);
  }

  public List<Double> getFeatureImportances() {
    return this.featureImportances;
  }

  public TreeModel setFeatureImportances(List<Double> featureImportances) {
    this.featureImportances = featureImportances;
    return this;
  }

  public void unsetFeatureImportances() {
    this.featureImportances = null;
  }

  /** Returns true if field featureImportances is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureImportances() {
    return this.featureImportances != null;
  }

  public void setFeatureImportancesIsSet(boolean value) {
    if (!value) {
      this.featureImportances = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL_TYPE:
      if (value == null) {
        unsetModelType();
      } else {
        setModelType((String)value);
      }
      break;

    case COMPONENTS:
      if (value == null) {
        unsetComponents();
      } else {
        setComponents((List<TreeComponent>)value);
      }
      break;

    case FEATURE_IMPORTANCES:
      if (value == null) {
        unsetFeatureImportances();
      } else {
        setFeatureImportances((List<Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_TYPE:
      return getModelType();

    case COMPONENTS:
      return getComponents();

    case FEATURE_IMPORTANCES:
      return getFeatureImportances();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL_TYPE:
      return isSetModelType();
    case COMPONENTS:
      return isSetComponents();
    case FEATURE_IMPORTANCES:
      return isSetFeatureImportances();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TreeModel)
      return this.equals((TreeModel)that);
    return false;
  }

  public boolean equals(TreeModel that) {
    if (that == null)
      return false;

    boolean this_present_modelType = true && this.isSetModelType();
    boolean that_present_modelType = true && that.isSetModelType();
    if (this_present_modelType || that_present_modelType) {
      if (!(this_present_modelType && that_present_modelType))
        return false;
      if (!this.modelType.equals(that.modelType))
        return false;
    }

    boolean this_present_components = true && this.isSetComponents();
    boolean that_present_components = true && that.isSetComponents();
    if (this_present_components || that_present_components) {
      if (!(this_present_components && that_present_components))
        return false;
      if (!this.components.equals(that.components))
        return false;
    }

    boolean this_present_featureImportances = true && this.isSetFeatureImportances();
    boolean that_present_featureImportances = true && that.isSetFeatureImportances();
    if (this_present_featureImportances || that_present_featureImportances) {
      if (!(this_present_featureImportances && that_present_featureImportances))
        return false;
      if (!this.featureImportances.equals(that.featureImportances))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_modelType = true && (isSetModelType());
    list.add(present_modelType);
    if (present_modelType)
      list.add(modelType);

    boolean present_components = true && (isSetComponents());
    list.add(present_components);
    if (present_components)
      list.add(components);

    boolean present_featureImportances = true && (isSetFeatureImportances());
    list.add(present_featureImportances);
    if (present_featureImportances)
      list.add(featureImportances);

    return list.hashCode();
  }

  @Override
  public int compareTo(TreeModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModelType()).compareTo(other.isSetModelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelType, other.modelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponents()).compareTo(other.isSetComponents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.components, other.components);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureImportances()).compareTo(other.isSetFeatureImportances());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureImportances()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureImportances, other.featureImportances);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TreeModel(");
    boolean first = true;

    sb.append("modelType:");
    if (this.modelType == null) {
      sb.append("null");
    } else {
      sb.append(this.modelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("components:");
    if (this.components == null) {
      sb.append("null");
    } else {
      sb.append(this.components);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureImportances:");
    if (this.featureImportances == null) {
      sb.append("null");
    } else {
      sb.append(this.featureImportances);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TreeModelStandardSchemeFactory implements SchemeFactory {
    public TreeModelStandardScheme getScheme() {
      return new TreeModelStandardScheme();
    }
  }

  private static class TreeModelStandardScheme extends StandardScheme<TreeModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TreeModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelType = iprot.readString();
              struct.setModelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPONENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list362 = iprot.readListBegin();
                struct.components = new ArrayList<TreeComponent>(_list362.size);
                TreeComponent _elem363;
                for (int _i364 = 0; _i364 < _list362.size; ++_i364)
                {
                  _elem363 = new TreeComponent();
                  _elem363.read(iprot);
                  struct.components.add(_elem363);
                }
                iprot.readListEnd();
              }
              struct.setComponentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEATURE_IMPORTANCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list365 = iprot.readListBegin();
                struct.featureImportances = new ArrayList<Double>(_list365.size);
                double _elem366;
                for (int _i367 = 0; _i367 < _list365.size; ++_i367)
                {
                  _elem366 = iprot.readDouble();
                  struct.featureImportances.add(_elem366);
                }
                iprot.readListEnd();
              }
              struct.setFeatureImportancesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TreeModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.modelType != null) {
        oprot.writeFieldBegin(MODEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.modelType);
        oprot.writeFieldEnd();
      }
      if (struct.components != null) {
        oprot.writeFieldBegin(COMPONENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.components.size()));
          for (TreeComponent _iter368 : struct.components)
          {
            _iter368.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.featureImportances != null) {
        oprot.writeFieldBegin(FEATURE_IMPORTANCES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.featureImportances.size()));
          for (double _iter369 : struct.featureImportances)
          {
            oprot.writeDouble(_iter369);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TreeModelTupleSchemeFactory implements SchemeFactory {
    public TreeModelTupleScheme getScheme() {
      return new TreeModelTupleScheme();
    }
  }

  private static class TreeModelTupleScheme extends TupleScheme<TreeModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TreeModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModelType()) {
        optionals.set(0);
      }
      if (struct.isSetComponents()) {
        optionals.set(1);
      }
      if (struct.isSetFeatureImportances()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetModelType()) {
        oprot.writeString(struct.modelType);
      }
      if (struct.isSetComponents()) {
        {
          oprot.writeI32(struct.components.size());
          for (TreeComponent _iter370 : struct.components)
          {
            _iter370.write(oprot);
          }
        }
      }
      if (struct.isSetFeatureImportances()) {
        {
          oprot.writeI32(struct.featureImportances.size());
          for (double _iter371 : struct.featureImportances)
          {
            oprot.writeDouble(_iter371);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TreeModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.modelType = iprot.readString();
        struct.setModelTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list372 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.components = new ArrayList<TreeComponent>(_list372.size);
          TreeComponent _elem373;
          for (int _i374 = 0; _i374 < _list372.size; ++_i374)
          {
            _elem373 = new TreeComponent();
            _elem373.read(iprot);
            struct.components.add(_elem373);
          }
        }
        struct.setComponentsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list375 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.featureImportances = new ArrayList<Double>(_list375.size);
          double _elem376;
          for (int _i377 = 0; _i377 < _list375.size; ++_i377)
          {
            _elem376 = iprot.readDouble();
            struct.featureImportances.add(_elem376);
          }
        }
        struct.setFeatureImportancesIsSet(true);
      }
    }
  }

}

