/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class FitEvent implements org.apache.thrift.TBase<FitEvent, FitEvent._Fields>, java.io.Serializable, Cloneable, Comparable<FitEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FitEvent");

  private static final org.apache.thrift.protocol.TField DF_FIELD_DESC = new org.apache.thrift.protocol.TField("df", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("spec", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FEATURE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("featureColumns", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PREDICTION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("predictionColumns", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LABEL_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("labelColumns", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PROBLEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("problemType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FitEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FitEventTupleSchemeFactory());
  }

  public DataFrame df; // required
  public TransformerSpec spec; // required
  public Transformer model; // required
  public List<String> featureColumns; // required
  public List<String> predictionColumns; // required
  public List<String> labelColumns; // required
  public int experimentRunId; // required
  /**
   * 
   * @see ProblemType
   */
  public ProblemType problemType; // optional
  public String metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DF((short)1, "df"),
    SPEC((short)2, "spec"),
    MODEL((short)3, "model"),
    FEATURE_COLUMNS((short)4, "featureColumns"),
    PREDICTION_COLUMNS((short)5, "predictionColumns"),
    LABEL_COLUMNS((short)6, "labelColumns"),
    EXPERIMENT_RUN_ID((short)7, "experimentRunId"),
    /**
     * 
     * @see ProblemType
     */
    PROBLEM_TYPE((short)8, "problemType"),
    METADATA((short)9, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DF
          return DF;
        case 2: // SPEC
          return SPEC;
        case 3: // MODEL
          return MODEL;
        case 4: // FEATURE_COLUMNS
          return FEATURE_COLUMNS;
        case 5: // PREDICTION_COLUMNS
          return PREDICTION_COLUMNS;
        case 6: // LABEL_COLUMNS
          return LABEL_COLUMNS;
        case 7: // EXPERIMENT_RUN_ID
          return EXPERIMENT_RUN_ID;
        case 8: // PROBLEM_TYPE
          return PROBLEM_TYPE;
        case 9: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPERIMENTRUNID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROBLEM_TYPE,_Fields.METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DF, new org.apache.thrift.meta_data.FieldMetaData("df", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.SPEC, new org.apache.thrift.meta_data.FieldMetaData("spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformerSpec.class)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transformer.class)));
    tmpMap.put(_Fields.FEATURE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("featureColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PREDICTION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("predictionColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LABEL_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("labelColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROBLEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("problemType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProblemType.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FitEvent.class, metaDataMap);
  }

  public FitEvent() {
    this.problemType = modeldb.ProblemType.UNDEFINED;

  }

  public FitEvent(
    DataFrame df,
    TransformerSpec spec,
    Transformer model,
    List<String> featureColumns,
    List<String> predictionColumns,
    List<String> labelColumns,
    int experimentRunId)
  {
    this();
    this.df = df;
    this.spec = spec;
    this.model = model;
    this.featureColumns = featureColumns;
    this.predictionColumns = predictionColumns;
    this.labelColumns = labelColumns;
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FitEvent(FitEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDf()) {
      this.df = new DataFrame(other.df);
    }
    if (other.isSetSpec()) {
      this.spec = new TransformerSpec(other.spec);
    }
    if (other.isSetModel()) {
      this.model = new Transformer(other.model);
    }
    if (other.isSetFeatureColumns()) {
      List<String> __this__featureColumns = new ArrayList<String>(other.featureColumns);
      this.featureColumns = __this__featureColumns;
    }
    if (other.isSetPredictionColumns()) {
      List<String> __this__predictionColumns = new ArrayList<String>(other.predictionColumns);
      this.predictionColumns = __this__predictionColumns;
    }
    if (other.isSetLabelColumns()) {
      List<String> __this__labelColumns = new ArrayList<String>(other.labelColumns);
      this.labelColumns = __this__labelColumns;
    }
    this.experimentRunId = other.experimentRunId;
    if (other.isSetProblemType()) {
      this.problemType = other.problemType;
    }
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
  }

  public FitEvent deepCopy() {
    return new FitEvent(this);
  }

  @Override
  public void clear() {
    this.df = null;
    this.spec = null;
    this.model = null;
    this.featureColumns = null;
    this.predictionColumns = null;
    this.labelColumns = null;
    setExperimentRunIdIsSet(false);
    this.experimentRunId = 0;
    this.problemType = modeldb.ProblemType.UNDEFINED;

    this.metadata = null;
  }

  public DataFrame getDf() {
    return this.df;
  }

  public FitEvent setDf(DataFrame df) {
    this.df = df;
    return this;
  }

  public void unsetDf() {
    this.df = null;
  }

  /** Returns true if field df is set (has been assigned a value) and false otherwise */
  public boolean isSetDf() {
    return this.df != null;
  }

  public void setDfIsSet(boolean value) {
    if (!value) {
      this.df = null;
    }
  }

  public TransformerSpec getSpec() {
    return this.spec;
  }

  public FitEvent setSpec(TransformerSpec spec) {
    this.spec = spec;
    return this;
  }

  public void unsetSpec() {
    this.spec = null;
  }

  /** Returns true if field spec is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec() {
    return this.spec != null;
  }

  public void setSpecIsSet(boolean value) {
    if (!value) {
      this.spec = null;
    }
  }

  public Transformer getModel() {
    return this.model;
  }

  public FitEvent setModel(Transformer model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public int getFeatureColumnsSize() {
    return (this.featureColumns == null) ? 0 : this.featureColumns.size();
  }

  public java.util.Iterator<String> getFeatureColumnsIterator() {
    return (this.featureColumns == null) ? null : this.featureColumns.iterator();
  }

  public void addToFeatureColumns(String elem) {
    if (this.featureColumns == null) {
      this.featureColumns = new ArrayList<String>();
    }
    this.featureColumns.add(elem);
  }

  public List<String> getFeatureColumns() {
    return this.featureColumns;
  }

  public FitEvent setFeatureColumns(List<String> featureColumns) {
    this.featureColumns = featureColumns;
    return this;
  }

  public void unsetFeatureColumns() {
    this.featureColumns = null;
  }

  /** Returns true if field featureColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureColumns() {
    return this.featureColumns != null;
  }

  public void setFeatureColumnsIsSet(boolean value) {
    if (!value) {
      this.featureColumns = null;
    }
  }

  public int getPredictionColumnsSize() {
    return (this.predictionColumns == null) ? 0 : this.predictionColumns.size();
  }

  public java.util.Iterator<String> getPredictionColumnsIterator() {
    return (this.predictionColumns == null) ? null : this.predictionColumns.iterator();
  }

  public void addToPredictionColumns(String elem) {
    if (this.predictionColumns == null) {
      this.predictionColumns = new ArrayList<String>();
    }
    this.predictionColumns.add(elem);
  }

  public List<String> getPredictionColumns() {
    return this.predictionColumns;
  }

  public FitEvent setPredictionColumns(List<String> predictionColumns) {
    this.predictionColumns = predictionColumns;
    return this;
  }

  public void unsetPredictionColumns() {
    this.predictionColumns = null;
  }

  /** Returns true if field predictionColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictionColumns() {
    return this.predictionColumns != null;
  }

  public void setPredictionColumnsIsSet(boolean value) {
    if (!value) {
      this.predictionColumns = null;
    }
  }

  public int getLabelColumnsSize() {
    return (this.labelColumns == null) ? 0 : this.labelColumns.size();
  }

  public java.util.Iterator<String> getLabelColumnsIterator() {
    return (this.labelColumns == null) ? null : this.labelColumns.iterator();
  }

  public void addToLabelColumns(String elem) {
    if (this.labelColumns == null) {
      this.labelColumns = new ArrayList<String>();
    }
    this.labelColumns.add(elem);
  }

  public List<String> getLabelColumns() {
    return this.labelColumns;
  }

  public FitEvent setLabelColumns(List<String> labelColumns) {
    this.labelColumns = labelColumns;
    return this;
  }

  public void unsetLabelColumns() {
    this.labelColumns = null;
  }

  /** Returns true if field labelColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetLabelColumns() {
    return this.labelColumns != null;
  }

  public void setLabelColumnsIsSet(boolean value) {
    if (!value) {
      this.labelColumns = null;
    }
  }

  public int getExperimentRunId() {
    return this.experimentRunId;
  }

  public FitEvent setExperimentRunId(int experimentRunId) {
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    return this;
  }

  public void unsetExperimentRunId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRunId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  public void setExperimentRunIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
  }

  /**
   * 
   * @see ProblemType
   */
  public ProblemType getProblemType() {
    return this.problemType;
  }

  /**
   * 
   * @see ProblemType
   */
  public FitEvent setProblemType(ProblemType problemType) {
    this.problemType = problemType;
    return this;
  }

  public void unsetProblemType() {
    this.problemType = null;
  }

  /** Returns true if field problemType is set (has been assigned a value) and false otherwise */
  public boolean isSetProblemType() {
    return this.problemType != null;
  }

  public void setProblemTypeIsSet(boolean value) {
    if (!value) {
      this.problemType = null;
    }
  }

  public String getMetadata() {
    return this.metadata;
  }

  public FitEvent setMetadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DF:
      if (value == null) {
        unsetDf();
      } else {
        setDf((DataFrame)value);
      }
      break;

    case SPEC:
      if (value == null) {
        unsetSpec();
      } else {
        setSpec((TransformerSpec)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((Transformer)value);
      }
      break;

    case FEATURE_COLUMNS:
      if (value == null) {
        unsetFeatureColumns();
      } else {
        setFeatureColumns((List<String>)value);
      }
      break;

    case PREDICTION_COLUMNS:
      if (value == null) {
        unsetPredictionColumns();
      } else {
        setPredictionColumns((List<String>)value);
      }
      break;

    case LABEL_COLUMNS:
      if (value == null) {
        unsetLabelColumns();
      } else {
        setLabelColumns((List<String>)value);
      }
      break;

    case EXPERIMENT_RUN_ID:
      if (value == null) {
        unsetExperimentRunId();
      } else {
        setExperimentRunId((Integer)value);
      }
      break;

    case PROBLEM_TYPE:
      if (value == null) {
        unsetProblemType();
      } else {
        setProblemType((ProblemType)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DF:
      return getDf();

    case SPEC:
      return getSpec();

    case MODEL:
      return getModel();

    case FEATURE_COLUMNS:
      return getFeatureColumns();

    case PREDICTION_COLUMNS:
      return getPredictionColumns();

    case LABEL_COLUMNS:
      return getLabelColumns();

    case EXPERIMENT_RUN_ID:
      return getExperimentRunId();

    case PROBLEM_TYPE:
      return getProblemType();

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DF:
      return isSetDf();
    case SPEC:
      return isSetSpec();
    case MODEL:
      return isSetModel();
    case FEATURE_COLUMNS:
      return isSetFeatureColumns();
    case PREDICTION_COLUMNS:
      return isSetPredictionColumns();
    case LABEL_COLUMNS:
      return isSetLabelColumns();
    case EXPERIMENT_RUN_ID:
      return isSetExperimentRunId();
    case PROBLEM_TYPE:
      return isSetProblemType();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FitEvent)
      return this.equals((FitEvent)that);
    return false;
  }

  public boolean equals(FitEvent that) {
    if (that == null)
      return false;

    boolean this_present_df = true && this.isSetDf();
    boolean that_present_df = true && that.isSetDf();
    if (this_present_df || that_present_df) {
      if (!(this_present_df && that_present_df))
        return false;
      if (!this.df.equals(that.df))
        return false;
    }

    boolean this_present_spec = true && this.isSetSpec();
    boolean that_present_spec = true && that.isSetSpec();
    if (this_present_spec || that_present_spec) {
      if (!(this_present_spec && that_present_spec))
        return false;
      if (!this.spec.equals(that.spec))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_featureColumns = true && this.isSetFeatureColumns();
    boolean that_present_featureColumns = true && that.isSetFeatureColumns();
    if (this_present_featureColumns || that_present_featureColumns) {
      if (!(this_present_featureColumns && that_present_featureColumns))
        return false;
      if (!this.featureColumns.equals(that.featureColumns))
        return false;
    }

    boolean this_present_predictionColumns = true && this.isSetPredictionColumns();
    boolean that_present_predictionColumns = true && that.isSetPredictionColumns();
    if (this_present_predictionColumns || that_present_predictionColumns) {
      if (!(this_present_predictionColumns && that_present_predictionColumns))
        return false;
      if (!this.predictionColumns.equals(that.predictionColumns))
        return false;
    }

    boolean this_present_labelColumns = true && this.isSetLabelColumns();
    boolean that_present_labelColumns = true && that.isSetLabelColumns();
    if (this_present_labelColumns || that_present_labelColumns) {
      if (!(this_present_labelColumns && that_present_labelColumns))
        return false;
      if (!this.labelColumns.equals(that.labelColumns))
        return false;
    }

    boolean this_present_experimentRunId = true;
    boolean that_present_experimentRunId = true;
    if (this_present_experimentRunId || that_present_experimentRunId) {
      if (!(this_present_experimentRunId && that_present_experimentRunId))
        return false;
      if (this.experimentRunId != that.experimentRunId)
        return false;
    }

    boolean this_present_problemType = true && this.isSetProblemType();
    boolean that_present_problemType = true && that.isSetProblemType();
    if (this_present_problemType || that_present_problemType) {
      if (!(this_present_problemType && that_present_problemType))
        return false;
      if (!this.problemType.equals(that.problemType))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_df = true && (isSetDf());
    list.add(present_df);
    if (present_df)
      list.add(df);

    boolean present_spec = true && (isSetSpec());
    list.add(present_spec);
    if (present_spec)
      list.add(spec);

    boolean present_model = true && (isSetModel());
    list.add(present_model);
    if (present_model)
      list.add(model);

    boolean present_featureColumns = true && (isSetFeatureColumns());
    list.add(present_featureColumns);
    if (present_featureColumns)
      list.add(featureColumns);

    boolean present_predictionColumns = true && (isSetPredictionColumns());
    list.add(present_predictionColumns);
    if (present_predictionColumns)
      list.add(predictionColumns);

    boolean present_labelColumns = true && (isSetLabelColumns());
    list.add(present_labelColumns);
    if (present_labelColumns)
      list.add(labelColumns);

    boolean present_experimentRunId = true;
    list.add(present_experimentRunId);
    if (present_experimentRunId)
      list.add(experimentRunId);

    boolean present_problemType = true && (isSetProblemType());
    list.add(present_problemType);
    if (present_problemType)
      list.add(problemType.getValue());

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    return list.hashCode();
  }

  @Override
  public int compareTo(FitEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDf()).compareTo(other.isSetDf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.df, other.df);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpec()).compareTo(other.isSetSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec, other.spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureColumns()).compareTo(other.isSetFeatureColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureColumns, other.featureColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictionColumns()).compareTo(other.isSetPredictionColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictionColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictionColumns, other.predictionColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabelColumns()).compareTo(other.isSetLabelColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabelColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelColumns, other.labelColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProblemType()).compareTo(other.isSetProblemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProblemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problemType, other.problemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FitEvent(");
    boolean first = true;

    sb.append("df:");
    if (this.df == null) {
      sb.append("null");
    } else {
      sb.append(this.df);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spec:");
    if (this.spec == null) {
      sb.append("null");
    } else {
      sb.append(this.spec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureColumns:");
    if (this.featureColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.featureColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictionColumns:");
    if (this.predictionColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.predictionColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labelColumns:");
    if (this.labelColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.labelColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRunId:");
    sb.append(this.experimentRunId);
    first = false;
    if (isSetProblemType()) {
      if (!first) sb.append(", ");
      sb.append("problemType:");
      if (this.problemType == null) {
        sb.append("null");
      } else {
        sb.append(this.problemType);
      }
      first = false;
    }
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (df != null) {
      df.validate();
    }
    if (spec != null) {
      spec.validate();
    }
    if (model != null) {
      model.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FitEventStandardSchemeFactory implements SchemeFactory {
    public FitEventStandardScheme getScheme() {
      return new FitEventStandardScheme();
    }
  }

  private static class FitEventStandardScheme extends StandardScheme<FitEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FitEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.df = new DataFrame();
              struct.df.read(iprot);
              struct.setDfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spec = new TransformerSpec();
              struct.spec.read(iprot);
              struct.setSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.model = new Transformer();
              struct.model.read(iprot);
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEATURE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.featureColumns = new ArrayList<String>(_list40.size);
                String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.featureColumns.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setFeatureColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PREDICTION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.predictionColumns = new ArrayList<String>(_list43.size);
                String _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = iprot.readString();
                  struct.predictionColumns.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setPredictionColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LABEL_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.labelColumns = new ArrayList<String>(_list46.size);
                String _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = iprot.readString();
                  struct.labelColumns.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setLabelColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPERIMENT_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentRunId = iprot.readI32();
              struct.setExperimentRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PROBLEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.problemType = modeldb.ProblemType.findByValue(iprot.readI32());
              struct.setProblemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FitEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.df != null) {
        oprot.writeFieldBegin(DF_FIELD_DESC);
        struct.df.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.spec != null) {
        oprot.writeFieldBegin(SPEC_FIELD_DESC);
        struct.spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        struct.model.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.featureColumns != null) {
        oprot.writeFieldBegin(FEATURE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.featureColumns.size()));
          for (String _iter49 : struct.featureColumns)
          {
            oprot.writeString(_iter49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.predictionColumns != null) {
        oprot.writeFieldBegin(PREDICTION_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.predictionColumns.size()));
          for (String _iter50 : struct.predictionColumns)
          {
            oprot.writeString(_iter50);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.labelColumns != null) {
        oprot.writeFieldBegin(LABEL_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.labelColumns.size()));
          for (String _iter51 : struct.labelColumns)
          {
            oprot.writeString(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentRunId);
      oprot.writeFieldEnd();
      if (struct.problemType != null) {
        if (struct.isSetProblemType()) {
          oprot.writeFieldBegin(PROBLEM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.problemType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FitEventTupleSchemeFactory implements SchemeFactory {
    public FitEventTupleScheme getScheme() {
      return new FitEventTupleScheme();
    }
  }

  private static class FitEventTupleScheme extends TupleScheme<FitEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FitEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDf()) {
        optionals.set(0);
      }
      if (struct.isSetSpec()) {
        optionals.set(1);
      }
      if (struct.isSetModel()) {
        optionals.set(2);
      }
      if (struct.isSetFeatureColumns()) {
        optionals.set(3);
      }
      if (struct.isSetPredictionColumns()) {
        optionals.set(4);
      }
      if (struct.isSetLabelColumns()) {
        optionals.set(5);
      }
      if (struct.isSetExperimentRunId()) {
        optionals.set(6);
      }
      if (struct.isSetProblemType()) {
        optionals.set(7);
      }
      if (struct.isSetMetadata()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDf()) {
        struct.df.write(oprot);
      }
      if (struct.isSetSpec()) {
        struct.spec.write(oprot);
      }
      if (struct.isSetModel()) {
        struct.model.write(oprot);
      }
      if (struct.isSetFeatureColumns()) {
        {
          oprot.writeI32(struct.featureColumns.size());
          for (String _iter52 : struct.featureColumns)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetPredictionColumns()) {
        {
          oprot.writeI32(struct.predictionColumns.size());
          for (String _iter53 : struct.predictionColumns)
          {
            oprot.writeString(_iter53);
          }
        }
      }
      if (struct.isSetLabelColumns()) {
        {
          oprot.writeI32(struct.labelColumns.size());
          for (String _iter54 : struct.labelColumns)
          {
            oprot.writeString(_iter54);
          }
        }
      }
      if (struct.isSetExperimentRunId()) {
        oprot.writeI32(struct.experimentRunId);
      }
      if (struct.isSetProblemType()) {
        oprot.writeI32(struct.problemType.getValue());
      }
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FitEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.df = new DataFrame();
        struct.df.read(iprot);
        struct.setDfIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spec = new TransformerSpec();
        struct.spec.read(iprot);
        struct.setSpecIsSet(true);
      }
      if (incoming.get(2)) {
        struct.model = new Transformer();
        struct.model.read(iprot);
        struct.setModelIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.featureColumns = new ArrayList<String>(_list55.size);
          String _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.featureColumns.add(_elem56);
          }
        }
        struct.setFeatureColumnsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.predictionColumns = new ArrayList<String>(_list58.size);
          String _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readString();
            struct.predictionColumns.add(_elem59);
          }
        }
        struct.setPredictionColumnsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.labelColumns = new ArrayList<String>(_list61.size);
          String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.labelColumns.add(_elem62);
          }
        }
        struct.setLabelColumnsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.experimentRunId = iprot.readI32();
        struct.setExperimentRunIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.problemType = modeldb.ProblemType.findByValue(iprot.readI32());
        struct.setProblemTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
    }
  }

}

