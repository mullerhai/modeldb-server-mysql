/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class CrossValidationFold implements org.apache.thrift.TBase<CrossValidationFold, CrossValidationFold._Fields>, java.io.Serializable, Cloneable, Comparable<CrossValidationFold> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrossValidationFold");

  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VALIDATION_DF_FIELD_DESC = new org.apache.thrift.protocol.TField("validationDf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TRAINING_DF_FIELD_DESC = new org.apache.thrift.protocol.TField("trainingDf", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrossValidationFoldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrossValidationFoldTupleSchemeFactory());
  }

  public Transformer model; // required
  public DataFrame validationDf; // required
  public DataFrame trainingDf; // required
  public double score; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL((short)1, "model"),
    VALIDATION_DF((short)2, "validationDf"),
    TRAINING_DF((short)3, "trainingDf"),
    SCORE((short)4, "score");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL
          return MODEL;
        case 2: // VALIDATION_DF
          return VALIDATION_DF;
        case 3: // TRAINING_DF
          return TRAINING_DF;
        case 4: // SCORE
          return SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transformer.class)));
    tmpMap.put(_Fields.VALIDATION_DF, new org.apache.thrift.meta_data.FieldMetaData("validationDf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.TRAINING_DF, new org.apache.thrift.meta_data.FieldMetaData("trainingDf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrossValidationFold.class, metaDataMap);
  }

  public CrossValidationFold() {
  }

  public CrossValidationFold(
    Transformer model,
    DataFrame validationDf,
    DataFrame trainingDf,
    double score)
  {
    this();
    this.model = model;
    this.validationDf = validationDf;
    this.trainingDf = trainingDf;
    this.score = score;
    setScoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrossValidationFold(CrossValidationFold other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetModel()) {
      this.model = new Transformer(other.model);
    }
    if (other.isSetValidationDf()) {
      this.validationDf = new DataFrame(other.validationDf);
    }
    if (other.isSetTrainingDf()) {
      this.trainingDf = new DataFrame(other.trainingDf);
    }
    this.score = other.score;
  }

  public CrossValidationFold deepCopy() {
    return new CrossValidationFold(this);
  }

  @Override
  public void clear() {
    this.model = null;
    this.validationDf = null;
    this.trainingDf = null;
    setScoreIsSet(false);
    this.score = 0.0;
  }

  public Transformer getModel() {
    return this.model;
  }

  public CrossValidationFold setModel(Transformer model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public DataFrame getValidationDf() {
    return this.validationDf;
  }

  public CrossValidationFold setValidationDf(DataFrame validationDf) {
    this.validationDf = validationDf;
    return this;
  }

  public void unsetValidationDf() {
    this.validationDf = null;
  }

  /** Returns true if field validationDf is set (has been assigned a value) and false otherwise */
  public boolean isSetValidationDf() {
    return this.validationDf != null;
  }

  public void setValidationDfIsSet(boolean value) {
    if (!value) {
      this.validationDf = null;
    }
  }

  public DataFrame getTrainingDf() {
    return this.trainingDf;
  }

  public CrossValidationFold setTrainingDf(DataFrame trainingDf) {
    this.trainingDf = trainingDf;
    return this;
  }

  public void unsetTrainingDf() {
    this.trainingDf = null;
  }

  /** Returns true if field trainingDf is set (has been assigned a value) and false otherwise */
  public boolean isSetTrainingDf() {
    return this.trainingDf != null;
  }

  public void setTrainingDfIsSet(boolean value) {
    if (!value) {
      this.trainingDf = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public CrossValidationFold setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((Transformer)value);
      }
      break;

    case VALIDATION_DF:
      if (value == null) {
        unsetValidationDf();
      } else {
        setValidationDf((DataFrame)value);
      }
      break;

    case TRAINING_DF:
      if (value == null) {
        unsetTrainingDf();
      } else {
        setTrainingDf((DataFrame)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL:
      return getModel();

    case VALIDATION_DF:
      return getValidationDf();

    case TRAINING_DF:
      return getTrainingDf();

    case SCORE:
      return getScore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL:
      return isSetModel();
    case VALIDATION_DF:
      return isSetValidationDf();
    case TRAINING_DF:
      return isSetTrainingDf();
    case SCORE:
      return isSetScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrossValidationFold)
      return this.equals((CrossValidationFold)that);
    return false;
  }

  public boolean equals(CrossValidationFold that) {
    if (that == null)
      return false;

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_validationDf = true && this.isSetValidationDf();
    boolean that_present_validationDf = true && that.isSetValidationDf();
    if (this_present_validationDf || that_present_validationDf) {
      if (!(this_present_validationDf && that_present_validationDf))
        return false;
      if (!this.validationDf.equals(that.validationDf))
        return false;
    }

    boolean this_present_trainingDf = true && this.isSetTrainingDf();
    boolean that_present_trainingDf = true && that.isSetTrainingDf();
    if (this_present_trainingDf || that_present_trainingDf) {
      if (!(this_present_trainingDf && that_present_trainingDf))
        return false;
      if (!this.trainingDf.equals(that.trainingDf))
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_model = true && (isSetModel());
    list.add(present_model);
    if (present_model)
      list.add(model);

    boolean present_validationDf = true && (isSetValidationDf());
    list.add(present_validationDf);
    if (present_validationDf)
      list.add(validationDf);

    boolean present_trainingDf = true && (isSetTrainingDf());
    list.add(present_trainingDf);
    if (present_trainingDf)
      list.add(trainingDf);

    boolean present_score = true;
    list.add(present_score);
    if (present_score)
      list.add(score);

    return list.hashCode();
  }

  @Override
  public int compareTo(CrossValidationFold other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidationDf()).compareTo(other.isSetValidationDf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidationDf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validationDf, other.validationDf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrainingDf()).compareTo(other.isSetTrainingDf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrainingDf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trainingDf, other.trainingDf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrossValidationFold(");
    boolean first = true;

    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validationDf:");
    if (this.validationDf == null) {
      sb.append("null");
    } else {
      sb.append(this.validationDf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trainingDf:");
    if (this.trainingDf == null) {
      sb.append("null");
    } else {
      sb.append(this.trainingDf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (model != null) {
      model.validate();
    }
    if (validationDf != null) {
      validationDf.validate();
    }
    if (trainingDf != null) {
      trainingDf.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrossValidationFoldStandardSchemeFactory implements SchemeFactory {
    public CrossValidationFoldStandardScheme getScheme() {
      return new CrossValidationFoldStandardScheme();
    }
  }

  private static class CrossValidationFoldStandardScheme extends StandardScheme<CrossValidationFold> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrossValidationFold struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.model = new Transformer();
              struct.model.read(iprot);
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALIDATION_DF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.validationDf = new DataFrame();
              struct.validationDf.read(iprot);
              struct.setValidationDfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRAINING_DF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.trainingDf = new DataFrame();
              struct.trainingDf.read(iprot);
              struct.setTrainingDfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrossValidationFold struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        struct.model.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.validationDf != null) {
        oprot.writeFieldBegin(VALIDATION_DF_FIELD_DESC);
        struct.validationDf.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.trainingDf != null) {
        oprot.writeFieldBegin(TRAINING_DF_FIELD_DESC);
        struct.trainingDf.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeDouble(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrossValidationFoldTupleSchemeFactory implements SchemeFactory {
    public CrossValidationFoldTupleScheme getScheme() {
      return new CrossValidationFoldTupleScheme();
    }
  }

  private static class CrossValidationFoldTupleScheme extends TupleScheme<CrossValidationFold> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrossValidationFold struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModel()) {
        optionals.set(0);
      }
      if (struct.isSetValidationDf()) {
        optionals.set(1);
      }
      if (struct.isSetTrainingDf()) {
        optionals.set(2);
      }
      if (struct.isSetScore()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetModel()) {
        struct.model.write(oprot);
      }
      if (struct.isSetValidationDf()) {
        struct.validationDf.write(oprot);
      }
      if (struct.isSetTrainingDf()) {
        struct.trainingDf.write(oprot);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrossValidationFold struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.model = new Transformer();
        struct.model.read(iprot);
        struct.setModelIsSet(true);
      }
      if (incoming.get(1)) {
        struct.validationDf = new DataFrame();
        struct.validationDf.read(iprot);
        struct.setValidationDfIsSet(true);
      }
      if (incoming.get(2)) {
        struct.trainingDf = new DataFrame();
        struct.trainingDf.read(iprot);
        struct.setTrainingDfIsSet(true);
      }
      if (incoming.get(3)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
    }
  }

}

