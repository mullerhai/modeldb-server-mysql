/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class FeatureImportanceComparison implements org.apache.thrift.TBase<FeatureImportanceComparison, FeatureImportanceComparison._Fields>, java.io.Serializable, Cloneable, Comparable<FeatureImportanceComparison> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeatureImportanceComparison");

  private static final org.apache.thrift.protocol.TField FEATURE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("featureName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PERCENTILE_RANK_IN_MODEL1_FIELD_DESC = new org.apache.thrift.protocol.TField("percentileRankInModel1", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PERCENTILE_RANK_IN_MODEL2_FIELD_DESC = new org.apache.thrift.protocol.TField("percentileRankInModel2", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeatureImportanceComparisonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeatureImportanceComparisonTupleSchemeFactory());
  }

  public String featureName; // required
  public double percentileRankInModel1; // optional
  public double percentileRankInModel2; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEATURE_NAME((short)1, "featureName"),
    PERCENTILE_RANK_IN_MODEL1((short)2, "percentileRankInModel1"),
    PERCENTILE_RANK_IN_MODEL2((short)3, "percentileRankInModel2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEATURE_NAME
          return FEATURE_NAME;
        case 2: // PERCENTILE_RANK_IN_MODEL1
          return PERCENTILE_RANK_IN_MODEL1;
        case 3: // PERCENTILE_RANK_IN_MODEL2
          return PERCENTILE_RANK_IN_MODEL2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PERCENTILERANKINMODEL1_ISSET_ID = 0;
  private static final int __PERCENTILERANKINMODEL2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PERCENTILE_RANK_IN_MODEL1,_Fields.PERCENTILE_RANK_IN_MODEL2};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEATURE_NAME, new org.apache.thrift.meta_data.FieldMetaData("featureName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERCENTILE_RANK_IN_MODEL1, new org.apache.thrift.meta_data.FieldMetaData("percentileRankInModel1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PERCENTILE_RANK_IN_MODEL2, new org.apache.thrift.meta_data.FieldMetaData("percentileRankInModel2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeatureImportanceComparison.class, metaDataMap);
  }

  public FeatureImportanceComparison() {
  }

  public FeatureImportanceComparison(
    String featureName)
  {
    this();
    this.featureName = featureName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeatureImportanceComparison(FeatureImportanceComparison other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFeatureName()) {
      this.featureName = other.featureName;
    }
    this.percentileRankInModel1 = other.percentileRankInModel1;
    this.percentileRankInModel2 = other.percentileRankInModel2;
  }

  public FeatureImportanceComparison deepCopy() {
    return new FeatureImportanceComparison(this);
  }

  @Override
  public void clear() {
    this.featureName = null;
    setPercentileRankInModel1IsSet(false);
    this.percentileRankInModel1 = 0.0;
    setPercentileRankInModel2IsSet(false);
    this.percentileRankInModel2 = 0.0;
  }

  public String getFeatureName() {
    return this.featureName;
  }

  public FeatureImportanceComparison setFeatureName(String featureName) {
    this.featureName = featureName;
    return this;
  }

  public void unsetFeatureName() {
    this.featureName = null;
  }

  /** Returns true if field featureName is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureName() {
    return this.featureName != null;
  }

  public void setFeatureNameIsSet(boolean value) {
    if (!value) {
      this.featureName = null;
    }
  }

  public double getPercentileRankInModel1() {
    return this.percentileRankInModel1;
  }

  public FeatureImportanceComparison setPercentileRankInModel1(double percentileRankInModel1) {
    this.percentileRankInModel1 = percentileRankInModel1;
    setPercentileRankInModel1IsSet(true);
    return this;
  }

  public void unsetPercentileRankInModel1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCENTILERANKINMODEL1_ISSET_ID);
  }

  /** Returns true if field percentileRankInModel1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPercentileRankInModel1() {
    return EncodingUtils.testBit(__isset_bitfield, __PERCENTILERANKINMODEL1_ISSET_ID);
  }

  public void setPercentileRankInModel1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCENTILERANKINMODEL1_ISSET_ID, value);
  }

  public double getPercentileRankInModel2() {
    return this.percentileRankInModel2;
  }

  public FeatureImportanceComparison setPercentileRankInModel2(double percentileRankInModel2) {
    this.percentileRankInModel2 = percentileRankInModel2;
    setPercentileRankInModel2IsSet(true);
    return this;
  }

  public void unsetPercentileRankInModel2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCENTILERANKINMODEL2_ISSET_ID);
  }

  /** Returns true if field percentileRankInModel2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPercentileRankInModel2() {
    return EncodingUtils.testBit(__isset_bitfield, __PERCENTILERANKINMODEL2_ISSET_ID);
  }

  public void setPercentileRankInModel2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCENTILERANKINMODEL2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEATURE_NAME:
      if (value == null) {
        unsetFeatureName();
      } else {
        setFeatureName((String)value);
      }
      break;

    case PERCENTILE_RANK_IN_MODEL1:
      if (value == null) {
        unsetPercentileRankInModel1();
      } else {
        setPercentileRankInModel1((Double)value);
      }
      break;

    case PERCENTILE_RANK_IN_MODEL2:
      if (value == null) {
        unsetPercentileRankInModel2();
      } else {
        setPercentileRankInModel2((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEATURE_NAME:
      return getFeatureName();

    case PERCENTILE_RANK_IN_MODEL1:
      return getPercentileRankInModel1();

    case PERCENTILE_RANK_IN_MODEL2:
      return getPercentileRankInModel2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEATURE_NAME:
      return isSetFeatureName();
    case PERCENTILE_RANK_IN_MODEL1:
      return isSetPercentileRankInModel1();
    case PERCENTILE_RANK_IN_MODEL2:
      return isSetPercentileRankInModel2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeatureImportanceComparison)
      return this.equals((FeatureImportanceComparison)that);
    return false;
  }

  public boolean equals(FeatureImportanceComparison that) {
    if (that == null)
      return false;

    boolean this_present_featureName = true && this.isSetFeatureName();
    boolean that_present_featureName = true && that.isSetFeatureName();
    if (this_present_featureName || that_present_featureName) {
      if (!(this_present_featureName && that_present_featureName))
        return false;
      if (!this.featureName.equals(that.featureName))
        return false;
    }

    boolean this_present_percentileRankInModel1 = true && this.isSetPercentileRankInModel1();
    boolean that_present_percentileRankInModel1 = true && that.isSetPercentileRankInModel1();
    if (this_present_percentileRankInModel1 || that_present_percentileRankInModel1) {
      if (!(this_present_percentileRankInModel1 && that_present_percentileRankInModel1))
        return false;
      if (this.percentileRankInModel1 != that.percentileRankInModel1)
        return false;
    }

    boolean this_present_percentileRankInModel2 = true && this.isSetPercentileRankInModel2();
    boolean that_present_percentileRankInModel2 = true && that.isSetPercentileRankInModel2();
    if (this_present_percentileRankInModel2 || that_present_percentileRankInModel2) {
      if (!(this_present_percentileRankInModel2 && that_present_percentileRankInModel2))
        return false;
      if (this.percentileRankInModel2 != that.percentileRankInModel2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_featureName = true && (isSetFeatureName());
    list.add(present_featureName);
    if (present_featureName)
      list.add(featureName);

    boolean present_percentileRankInModel1 = true && (isSetPercentileRankInModel1());
    list.add(present_percentileRankInModel1);
    if (present_percentileRankInModel1)
      list.add(percentileRankInModel1);

    boolean present_percentileRankInModel2 = true && (isSetPercentileRankInModel2());
    list.add(present_percentileRankInModel2);
    if (present_percentileRankInModel2)
      list.add(percentileRankInModel2);

    return list.hashCode();
  }

  @Override
  public int compareTo(FeatureImportanceComparison other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeatureName()).compareTo(other.isSetFeatureName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureName, other.featureName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercentileRankInModel1()).compareTo(other.isSetPercentileRankInModel1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercentileRankInModel1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percentileRankInModel1, other.percentileRankInModel1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPercentileRankInModel2()).compareTo(other.isSetPercentileRankInModel2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPercentileRankInModel2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percentileRankInModel2, other.percentileRankInModel2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeatureImportanceComparison(");
    boolean first = true;

    sb.append("featureName:");
    if (this.featureName == null) {
      sb.append("null");
    } else {
      sb.append(this.featureName);
    }
    first = false;
    if (isSetPercentileRankInModel1()) {
      if (!first) sb.append(", ");
      sb.append("percentileRankInModel1:");
      sb.append(this.percentileRankInModel1);
      first = false;
    }
    if (isSetPercentileRankInModel2()) {
      if (!first) sb.append(", ");
      sb.append("percentileRankInModel2:");
      sb.append(this.percentileRankInModel2);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeatureImportanceComparisonStandardSchemeFactory implements SchemeFactory {
    public FeatureImportanceComparisonStandardScheme getScheme() {
      return new FeatureImportanceComparisonStandardScheme();
    }
  }

  private static class FeatureImportanceComparisonStandardScheme extends StandardScheme<FeatureImportanceComparison> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeatureImportanceComparison struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEATURE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.featureName = iprot.readString();
              struct.setFeatureNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERCENTILE_RANK_IN_MODEL1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.percentileRankInModel1 = iprot.readDouble();
              struct.setPercentileRankInModel1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERCENTILE_RANK_IN_MODEL2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.percentileRankInModel2 = iprot.readDouble();
              struct.setPercentileRankInModel2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeatureImportanceComparison struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.featureName != null) {
        oprot.writeFieldBegin(FEATURE_NAME_FIELD_DESC);
        oprot.writeString(struct.featureName);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPercentileRankInModel1()) {
        oprot.writeFieldBegin(PERCENTILE_RANK_IN_MODEL1_FIELD_DESC);
        oprot.writeDouble(struct.percentileRankInModel1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPercentileRankInModel2()) {
        oprot.writeFieldBegin(PERCENTILE_RANK_IN_MODEL2_FIELD_DESC);
        oprot.writeDouble(struct.percentileRankInModel2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeatureImportanceComparisonTupleSchemeFactory implements SchemeFactory {
    public FeatureImportanceComparisonTupleScheme getScheme() {
      return new FeatureImportanceComparisonTupleScheme();
    }
  }

  private static class FeatureImportanceComparisonTupleScheme extends TupleScheme<FeatureImportanceComparison> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeatureImportanceComparison struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeatureName()) {
        optionals.set(0);
      }
      if (struct.isSetPercentileRankInModel1()) {
        optionals.set(1);
      }
      if (struct.isSetPercentileRankInModel2()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFeatureName()) {
        oprot.writeString(struct.featureName);
      }
      if (struct.isSetPercentileRankInModel1()) {
        oprot.writeDouble(struct.percentileRankInModel1);
      }
      if (struct.isSetPercentileRankInModel2()) {
        oprot.writeDouble(struct.percentileRankInModel2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeatureImportanceComparison struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.featureName = iprot.readString();
        struct.setFeatureNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.percentileRankInModel1 = iprot.readDouble();
        struct.setPercentileRankInModel1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.percentileRankInModel2 = iprot.readDouble();
        struct.setPercentileRankInModel2IsSet(true);
      }
    }
  }

}

