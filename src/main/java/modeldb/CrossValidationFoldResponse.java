/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class CrossValidationFoldResponse implements org.apache.thrift.TBase<CrossValidationFoldResponse, CrossValidationFoldResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CrossValidationFoldResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrossValidationFoldResponse");

  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VALIDATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("validationId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRAINING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("trainingId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrossValidationFoldResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrossValidationFoldResponseTupleSchemeFactory());
  }

  public int modelId; // required
  public int validationId; // required
  public int trainingId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_ID((short)1, "modelId"),
    VALIDATION_ID((short)2, "validationId"),
    TRAINING_ID((short)3, "trainingId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_ID
          return MODEL_ID;
        case 2: // VALIDATION_ID
          return VALIDATION_ID;
        case 3: // TRAINING_ID
          return TRAINING_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODELID_ISSET_ID = 0;
  private static final int __VALIDATIONID_ISSET_ID = 1;
  private static final int __TRAININGID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALIDATION_ID, new org.apache.thrift.meta_data.FieldMetaData("validationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRAINING_ID, new org.apache.thrift.meta_data.FieldMetaData("trainingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrossValidationFoldResponse.class, metaDataMap);
  }

  public CrossValidationFoldResponse() {
  }

  public CrossValidationFoldResponse(
    int modelId,
    int validationId,
    int trainingId)
  {
    this();
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.validationId = validationId;
    setValidationIdIsSet(true);
    this.trainingId = trainingId;
    setTrainingIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrossValidationFoldResponse(CrossValidationFoldResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.modelId = other.modelId;
    this.validationId = other.validationId;
    this.trainingId = other.trainingId;
  }

  public CrossValidationFoldResponse deepCopy() {
    return new CrossValidationFoldResponse(this);
  }

  @Override
  public void clear() {
    setModelIdIsSet(false);
    this.modelId = 0;
    setValidationIdIsSet(false);
    this.validationId = 0;
    setTrainingIdIsSet(false);
    this.trainingId = 0;
  }

  public int getModelId() {
    return this.modelId;
  }

  public CrossValidationFoldResponse setModelId(int modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public int getValidationId() {
    return this.validationId;
  }

  public CrossValidationFoldResponse setValidationId(int validationId) {
    this.validationId = validationId;
    setValidationIdIsSet(true);
    return this;
  }

  public void unsetValidationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDATIONID_ISSET_ID);
  }

  /** Returns true if field validationId is set (has been assigned a value) and false otherwise */
  public boolean isSetValidationId() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDATIONID_ISSET_ID);
  }

  public void setValidationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDATIONID_ISSET_ID, value);
  }

  public int getTrainingId() {
    return this.trainingId;
  }

  public CrossValidationFoldResponse setTrainingId(int trainingId) {
    this.trainingId = trainingId;
    setTrainingIdIsSet(true);
    return this;
  }

  public void unsetTrainingId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRAININGID_ISSET_ID);
  }

  /** Returns true if field trainingId is set (has been assigned a value) and false otherwise */
  public boolean isSetTrainingId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRAININGID_ISSET_ID);
  }

  public void setTrainingIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRAININGID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Integer)value);
      }
      break;

    case VALIDATION_ID:
      if (value == null) {
        unsetValidationId();
      } else {
        setValidationId((Integer)value);
      }
      break;

    case TRAINING_ID:
      if (value == null) {
        unsetTrainingId();
      } else {
        setTrainingId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_ID:
      return getModelId();

    case VALIDATION_ID:
      return getValidationId();

    case TRAINING_ID:
      return getTrainingId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL_ID:
      return isSetModelId();
    case VALIDATION_ID:
      return isSetValidationId();
    case TRAINING_ID:
      return isSetTrainingId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrossValidationFoldResponse)
      return this.equals((CrossValidationFoldResponse)that);
    return false;
  }

  public boolean equals(CrossValidationFoldResponse that) {
    if (that == null)
      return false;

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_validationId = true;
    boolean that_present_validationId = true;
    if (this_present_validationId || that_present_validationId) {
      if (!(this_present_validationId && that_present_validationId))
        return false;
      if (this.validationId != that.validationId)
        return false;
    }

    boolean this_present_trainingId = true;
    boolean that_present_trainingId = true;
    if (this_present_trainingId || that_present_trainingId) {
      if (!(this_present_trainingId && that_present_trainingId))
        return false;
      if (this.trainingId != that.trainingId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_modelId = true;
    list.add(present_modelId);
    if (present_modelId)
      list.add(modelId);

    boolean present_validationId = true;
    list.add(present_validationId);
    if (present_validationId)
      list.add(validationId);

    boolean present_trainingId = true;
    list.add(present_trainingId);
    if (present_trainingId)
      list.add(trainingId);

    return list.hashCode();
  }

  @Override
  public int compareTo(CrossValidationFoldResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidationId()).compareTo(other.isSetValidationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validationId, other.validationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrainingId()).compareTo(other.isSetTrainingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrainingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trainingId, other.trainingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrossValidationFoldResponse(");
    boolean first = true;

    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validationId:");
    sb.append(this.validationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trainingId:");
    sb.append(this.trainingId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrossValidationFoldResponseStandardSchemeFactory implements SchemeFactory {
    public CrossValidationFoldResponseStandardScheme getScheme() {
      return new CrossValidationFoldResponseStandardScheme();
    }
  }

  private static class CrossValidationFoldResponseStandardScheme extends StandardScheme<CrossValidationFoldResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrossValidationFoldResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modelId = iprot.readI32();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALIDATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validationId = iprot.readI32();
              struct.setValidationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRAINING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.trainingId = iprot.readI32();
              struct.setTrainingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrossValidationFoldResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI32(struct.modelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALIDATION_ID_FIELD_DESC);
      oprot.writeI32(struct.validationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRAINING_ID_FIELD_DESC);
      oprot.writeI32(struct.trainingId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrossValidationFoldResponseTupleSchemeFactory implements SchemeFactory {
    public CrossValidationFoldResponseTupleScheme getScheme() {
      return new CrossValidationFoldResponseTupleScheme();
    }
  }

  private static class CrossValidationFoldResponseTupleScheme extends TupleScheme<CrossValidationFoldResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrossValidationFoldResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModelId()) {
        optionals.set(0);
      }
      if (struct.isSetValidationId()) {
        optionals.set(1);
      }
      if (struct.isSetTrainingId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetModelId()) {
        oprot.writeI32(struct.modelId);
      }
      if (struct.isSetValidationId()) {
        oprot.writeI32(struct.validationId);
      }
      if (struct.isSetTrainingId()) {
        oprot.writeI32(struct.trainingId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrossValidationFoldResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.modelId = iprot.readI32();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.validationId = iprot.readI32();
        struct.setValidationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.trainingId = iprot.readI32();
        struct.setTrainingIdIsSet(true);
      }
    }
  }

}

