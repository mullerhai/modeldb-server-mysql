/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class ExtractedPipelineResponse implements org.apache.thrift.TBase<ExtractedPipelineResponse, ExtractedPipelineResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ExtractedPipelineResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExtractedPipelineResponse");

  private static final org.apache.thrift.protocol.TField TRANSFORMERS_FIELD_DESC = new org.apache.thrift.protocol.TField("transformers", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SPECS_FIELD_DESC = new org.apache.thrift.protocol.TField("specs", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExtractedPipelineResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExtractedPipelineResponseTupleSchemeFactory());
  }

  public List<Transformer> transformers; // required
  public List<TransformerSpec> specs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRANSFORMERS((short)1, "transformers"),
    SPECS((short)2, "specs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSFORMERS
          return TRANSFORMERS;
        case 2: // SPECS
          return SPECS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSFORMERS, new org.apache.thrift.meta_data.FieldMetaData("transformers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transformer.class))));
    tmpMap.put(_Fields.SPECS, new org.apache.thrift.meta_data.FieldMetaData("specs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformerSpec.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExtractedPipelineResponse.class, metaDataMap);
  }

  public ExtractedPipelineResponse() {
  }

  public ExtractedPipelineResponse(
    List<Transformer> transformers,
    List<TransformerSpec> specs)
  {
    this();
    this.transformers = transformers;
    this.specs = specs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExtractedPipelineResponse(ExtractedPipelineResponse other) {
    if (other.isSetTransformers()) {
      List<Transformer> __this__transformers = new ArrayList<Transformer>(other.transformers.size());
      for (Transformer other_element : other.transformers) {
        __this__transformers.add(new Transformer(other_element));
      }
      this.transformers = __this__transformers;
    }
    if (other.isSetSpecs()) {
      List<TransformerSpec> __this__specs = new ArrayList<TransformerSpec>(other.specs.size());
      for (TransformerSpec other_element : other.specs) {
        __this__specs.add(new TransformerSpec(other_element));
      }
      this.specs = __this__specs;
    }
  }

  public ExtractedPipelineResponse deepCopy() {
    return new ExtractedPipelineResponse(this);
  }

  @Override
  public void clear() {
    this.transformers = null;
    this.specs = null;
  }

  public int getTransformersSize() {
    return (this.transformers == null) ? 0 : this.transformers.size();
  }

  public java.util.Iterator<Transformer> getTransformersIterator() {
    return (this.transformers == null) ? null : this.transformers.iterator();
  }

  public void addToTransformers(Transformer elem) {
    if (this.transformers == null) {
      this.transformers = new ArrayList<Transformer>();
    }
    this.transformers.add(elem);
  }

  public List<Transformer> getTransformers() {
    return this.transformers;
  }

  public ExtractedPipelineResponse setTransformers(List<Transformer> transformers) {
    this.transformers = transformers;
    return this;
  }

  public void unsetTransformers() {
    this.transformers = null;
  }

  /** Returns true if field transformers is set (has been assigned a value) and false otherwise */
  public boolean isSetTransformers() {
    return this.transformers != null;
  }

  public void setTransformersIsSet(boolean value) {
    if (!value) {
      this.transformers = null;
    }
  }

  public int getSpecsSize() {
    return (this.specs == null) ? 0 : this.specs.size();
  }

  public java.util.Iterator<TransformerSpec> getSpecsIterator() {
    return (this.specs == null) ? null : this.specs.iterator();
  }

  public void addToSpecs(TransformerSpec elem) {
    if (this.specs == null) {
      this.specs = new ArrayList<TransformerSpec>();
    }
    this.specs.add(elem);
  }

  public List<TransformerSpec> getSpecs() {
    return this.specs;
  }

  public ExtractedPipelineResponse setSpecs(List<TransformerSpec> specs) {
    this.specs = specs;
    return this;
  }

  public void unsetSpecs() {
    this.specs = null;
  }

  /** Returns true if field specs is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecs() {
    return this.specs != null;
  }

  public void setSpecsIsSet(boolean value) {
    if (!value) {
      this.specs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRANSFORMERS:
      if (value == null) {
        unsetTransformers();
      } else {
        setTransformers((List<Transformer>)value);
      }
      break;

    case SPECS:
      if (value == null) {
        unsetSpecs();
      } else {
        setSpecs((List<TransformerSpec>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSFORMERS:
      return getTransformers();

    case SPECS:
      return getSpecs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRANSFORMERS:
      return isSetTransformers();
    case SPECS:
      return isSetSpecs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExtractedPipelineResponse)
      return this.equals((ExtractedPipelineResponse)that);
    return false;
  }

  public boolean equals(ExtractedPipelineResponse that) {
    if (that == null)
      return false;

    boolean this_present_transformers = true && this.isSetTransformers();
    boolean that_present_transformers = true && that.isSetTransformers();
    if (this_present_transformers || that_present_transformers) {
      if (!(this_present_transformers && that_present_transformers))
        return false;
      if (!this.transformers.equals(that.transformers))
        return false;
    }

    boolean this_present_specs = true && this.isSetSpecs();
    boolean that_present_specs = true && that.isSetSpecs();
    if (this_present_specs || that_present_specs) {
      if (!(this_present_specs && that_present_specs))
        return false;
      if (!this.specs.equals(that.specs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_transformers = true && (isSetTransformers());
    list.add(present_transformers);
    if (present_transformers)
      list.add(transformers);

    boolean present_specs = true && (isSetSpecs());
    list.add(present_specs);
    if (present_specs)
      list.add(specs);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExtractedPipelineResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTransformers()).compareTo(other.isSetTransformers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransformers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformers, other.transformers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecs()).compareTo(other.isSetSpecs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specs, other.specs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExtractedPipelineResponse(");
    boolean first = true;

    sb.append("transformers:");
    if (this.transformers == null) {
      sb.append("null");
    } else {
      sb.append(this.transformers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specs:");
    if (this.specs == null) {
      sb.append("null");
    } else {
      sb.append(this.specs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExtractedPipelineResponseStandardSchemeFactory implements SchemeFactory {
    public ExtractedPipelineResponseStandardScheme getScheme() {
      return new ExtractedPipelineResponseStandardScheme();
    }
  }

  private static class ExtractedPipelineResponseStandardScheme extends StandardScheme<ExtractedPipelineResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExtractedPipelineResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSFORMERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list386 = iprot.readListBegin();
                struct.transformers = new ArrayList<Transformer>(_list386.size);
                Transformer _elem387;
                for (int _i388 = 0; _i388 < _list386.size; ++_i388)
                {
                  _elem387 = new Transformer();
                  _elem387.read(iprot);
                  struct.transformers.add(_elem387);
                }
                iprot.readListEnd();
              }
              struct.setTransformersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPECS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list389 = iprot.readListBegin();
                struct.specs = new ArrayList<TransformerSpec>(_list389.size);
                TransformerSpec _elem390;
                for (int _i391 = 0; _i391 < _list389.size; ++_i391)
                {
                  _elem390 = new TransformerSpec();
                  _elem390.read(iprot);
                  struct.specs.add(_elem390);
                }
                iprot.readListEnd();
              }
              struct.setSpecsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExtractedPipelineResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.transformers != null) {
        oprot.writeFieldBegin(TRANSFORMERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transformers.size()));
          for (Transformer _iter392 : struct.transformers)
          {
            _iter392.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.specs != null) {
        oprot.writeFieldBegin(SPECS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.specs.size()));
          for (TransformerSpec _iter393 : struct.specs)
          {
            _iter393.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExtractedPipelineResponseTupleSchemeFactory implements SchemeFactory {
    public ExtractedPipelineResponseTupleScheme getScheme() {
      return new ExtractedPipelineResponseTupleScheme();
    }
  }

  private static class ExtractedPipelineResponseTupleScheme extends TupleScheme<ExtractedPipelineResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExtractedPipelineResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTransformers()) {
        optionals.set(0);
      }
      if (struct.isSetSpecs()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTransformers()) {
        {
          oprot.writeI32(struct.transformers.size());
          for (Transformer _iter394 : struct.transformers)
          {
            _iter394.write(oprot);
          }
        }
      }
      if (struct.isSetSpecs()) {
        {
          oprot.writeI32(struct.specs.size());
          for (TransformerSpec _iter395 : struct.specs)
          {
            _iter395.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExtractedPipelineResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list396 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.transformers = new ArrayList<Transformer>(_list396.size);
          Transformer _elem397;
          for (int _i398 = 0; _i398 < _list396.size; ++_i398)
          {
            _elem397 = new Transformer();
            _elem397.read(iprot);
            struct.transformers.add(_elem397);
          }
        }
        struct.setTransformersIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list399 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.specs = new ArrayList<TransformerSpec>(_list399.size);
          TransformerSpec _elem400;
          for (int _i401 = 0; _i401 < _list399.size; ++_i401)
          {
            _elem400 = new TransformerSpec();
            _elem400.read(iprot);
            struct.specs.add(_elem400);
          }
        }
        struct.setSpecsIsSet(true);
      }
    }
  }

}

