/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class FitEventResponse implements org.apache.thrift.TBase<FitEventResponse, FitEventResponse._Fields>, java.io.Serializable, Cloneable, Comparable<FitEventResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FitEventResponse");

  private static final org.apache.thrift.protocol.TField DF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dfId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FIT_EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fitEventId", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FitEventResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FitEventResponseTupleSchemeFactory());
  }

  public int dfId; // required
  public int specId; // required
  public int modelId; // required
  public int eventId; // required
  public int fitEventId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DF_ID((short)1, "dfId"),
    SPEC_ID((short)2, "specId"),
    MODEL_ID((short)3, "modelId"),
    EVENT_ID((short)4, "eventId"),
    FIT_EVENT_ID((short)5, "fitEventId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DF_ID
          return DF_ID;
        case 2: // SPEC_ID
          return SPEC_ID;
        case 3: // MODEL_ID
          return MODEL_ID;
        case 4: // EVENT_ID
          return EVENT_ID;
        case 5: // FIT_EVENT_ID
          return FIT_EVENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DFID_ISSET_ID = 0;
  private static final int __SPECID_ISSET_ID = 1;
  private static final int __MODELID_ISSET_ID = 2;
  private static final int __EVENTID_ISSET_ID = 3;
  private static final int __FITEVENTID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DF_ID, new org.apache.thrift.meta_data.FieldMetaData("dfId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEC_ID, new org.apache.thrift.meta_data.FieldMetaData("specId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIT_EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("fitEventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FitEventResponse.class, metaDataMap);
  }

  public FitEventResponse() {
  }

  public FitEventResponse(
    int dfId,
    int specId,
    int modelId,
    int eventId,
    int fitEventId)
  {
    this();
    this.dfId = dfId;
    setDfIdIsSet(true);
    this.specId = specId;
    setSpecIdIsSet(true);
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.eventId = eventId;
    setEventIdIsSet(true);
    this.fitEventId = fitEventId;
    setFitEventIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FitEventResponse(FitEventResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dfId = other.dfId;
    this.specId = other.specId;
    this.modelId = other.modelId;
    this.eventId = other.eventId;
    this.fitEventId = other.fitEventId;
  }

  public FitEventResponse deepCopy() {
    return new FitEventResponse(this);
  }

  @Override
  public void clear() {
    setDfIdIsSet(false);
    this.dfId = 0;
    setSpecIdIsSet(false);
    this.specId = 0;
    setModelIdIsSet(false);
    this.modelId = 0;
    setEventIdIsSet(false);
    this.eventId = 0;
    setFitEventIdIsSet(false);
    this.fitEventId = 0;
  }

  public int getDfId() {
    return this.dfId;
  }

  public FitEventResponse setDfId(int dfId) {
    this.dfId = dfId;
    setDfIdIsSet(true);
    return this;
  }

  public void unsetDfId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DFID_ISSET_ID);
  }

  /** Returns true if field dfId is set (has been assigned a value) and false otherwise */
  public boolean isSetDfId() {
    return EncodingUtils.testBit(__isset_bitfield, __DFID_ISSET_ID);
  }

  public void setDfIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DFID_ISSET_ID, value);
  }

  public int getSpecId() {
    return this.specId;
  }

  public FitEventResponse setSpecId(int specId) {
    this.specId = specId;
    setSpecIdIsSet(true);
    return this;
  }

  public void unsetSpecId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECID_ISSET_ID);
  }

  /** Returns true if field specId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECID_ISSET_ID);
  }

  public void setSpecIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECID_ISSET_ID, value);
  }

  public int getModelId() {
    return this.modelId;
  }

  public FitEventResponse setModelId(int modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public int getEventId() {
    return this.eventId;
  }

  public FitEventResponse setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public int getFitEventId() {
    return this.fitEventId;
  }

  public FitEventResponse setFitEventId(int fitEventId) {
    this.fitEventId = fitEventId;
    setFitEventIdIsSet(true);
    return this;
  }

  public void unsetFitEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FITEVENTID_ISSET_ID);
  }

  /** Returns true if field fitEventId is set (has been assigned a value) and false otherwise */
  public boolean isSetFitEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __FITEVENTID_ISSET_ID);
  }

  public void setFitEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FITEVENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DF_ID:
      if (value == null) {
        unsetDfId();
      } else {
        setDfId((Integer)value);
      }
      break;

    case SPEC_ID:
      if (value == null) {
        unsetSpecId();
      } else {
        setSpecId((Integer)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Integer)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Integer)value);
      }
      break;

    case FIT_EVENT_ID:
      if (value == null) {
        unsetFitEventId();
      } else {
        setFitEventId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DF_ID:
      return getDfId();

    case SPEC_ID:
      return getSpecId();

    case MODEL_ID:
      return getModelId();

    case EVENT_ID:
      return getEventId();

    case FIT_EVENT_ID:
      return getFitEventId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DF_ID:
      return isSetDfId();
    case SPEC_ID:
      return isSetSpecId();
    case MODEL_ID:
      return isSetModelId();
    case EVENT_ID:
      return isSetEventId();
    case FIT_EVENT_ID:
      return isSetFitEventId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FitEventResponse)
      return this.equals((FitEventResponse)that);
    return false;
  }

  public boolean equals(FitEventResponse that) {
    if (that == null)
      return false;

    boolean this_present_dfId = true;
    boolean that_present_dfId = true;
    if (this_present_dfId || that_present_dfId) {
      if (!(this_present_dfId && that_present_dfId))
        return false;
      if (this.dfId != that.dfId)
        return false;
    }

    boolean this_present_specId = true;
    boolean that_present_specId = true;
    if (this_present_specId || that_present_specId) {
      if (!(this_present_specId && that_present_specId))
        return false;
      if (this.specId != that.specId)
        return false;
    }

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_fitEventId = true;
    boolean that_present_fitEventId = true;
    if (this_present_fitEventId || that_present_fitEventId) {
      if (!(this_present_fitEventId && that_present_fitEventId))
        return false;
      if (this.fitEventId != that.fitEventId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dfId = true;
    list.add(present_dfId);
    if (present_dfId)
      list.add(dfId);

    boolean present_specId = true;
    list.add(present_specId);
    if (present_specId)
      list.add(specId);

    boolean present_modelId = true;
    list.add(present_modelId);
    if (present_modelId)
      list.add(modelId);

    boolean present_eventId = true;
    list.add(present_eventId);
    if (present_eventId)
      list.add(eventId);

    boolean present_fitEventId = true;
    list.add(present_fitEventId);
    if (present_fitEventId)
      list.add(fitEventId);

    return list.hashCode();
  }

  @Override
  public int compareTo(FitEventResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDfId()).compareTo(other.isSetDfId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDfId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dfId, other.dfId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecId()).compareTo(other.isSetSpecId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specId, other.specId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFitEventId()).compareTo(other.isSetFitEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFitEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fitEventId, other.fitEventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FitEventResponse(");
    boolean first = true;

    sb.append("dfId:");
    sb.append(this.dfId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specId:");
    sb.append(this.specId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fitEventId:");
    sb.append(this.fitEventId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FitEventResponseStandardSchemeFactory implements SchemeFactory {
    public FitEventResponseStandardScheme getScheme() {
      return new FitEventResponseStandardScheme();
    }
  }

  private static class FitEventResponseStandardScheme extends StandardScheme<FitEventResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FitEventResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dfId = iprot.readI32();
              struct.setDfIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPEC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specId = iprot.readI32();
              struct.setSpecIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modelId = iprot.readI32();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIT_EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fitEventId = iprot.readI32();
              struct.setFitEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FitEventResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DF_ID_FIELD_DESC);
      oprot.writeI32(struct.dfId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPEC_ID_FIELD_DESC);
      oprot.writeI32(struct.specId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI32(struct.modelId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.eventId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIT_EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.fitEventId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FitEventResponseTupleSchemeFactory implements SchemeFactory {
    public FitEventResponseTupleScheme getScheme() {
      return new FitEventResponseTupleScheme();
    }
  }

  private static class FitEventResponseTupleScheme extends TupleScheme<FitEventResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FitEventResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDfId()) {
        optionals.set(0);
      }
      if (struct.isSetSpecId()) {
        optionals.set(1);
      }
      if (struct.isSetModelId()) {
        optionals.set(2);
      }
      if (struct.isSetEventId()) {
        optionals.set(3);
      }
      if (struct.isSetFitEventId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDfId()) {
        oprot.writeI32(struct.dfId);
      }
      if (struct.isSetSpecId()) {
        oprot.writeI32(struct.specId);
      }
      if (struct.isSetModelId()) {
        oprot.writeI32(struct.modelId);
      }
      if (struct.isSetEventId()) {
        oprot.writeI32(struct.eventId);
      }
      if (struct.isSetFitEventId()) {
        oprot.writeI32(struct.fitEventId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FitEventResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.dfId = iprot.readI32();
        struct.setDfIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.specId = iprot.readI32();
        struct.setSpecIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modelId = iprot.readI32();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventId = iprot.readI32();
        struct.setEventIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fitEventId = iprot.readI32();
        struct.setFitEventIdIsSet(true);
      }
    }
  }

}

