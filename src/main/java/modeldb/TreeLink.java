/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class TreeLink implements org.apache.thrift.TBase<TreeLink, TreeLink._Fields>, java.io.Serializable, Cloneable, Comparable<TreeLink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TreeLink");

  private static final org.apache.thrift.protocol.TField PARENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("parentIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHILD_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("childIndex", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_LEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("isLeft", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TreeLinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TreeLinkTupleSchemeFactory());
  }

  public int parentIndex; // required
  public int childIndex; // required
  public boolean isLeft; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_INDEX((short)1, "parentIndex"),
    CHILD_INDEX((short)2, "childIndex"),
    IS_LEFT((short)3, "isLeft");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_INDEX
          return PARENT_INDEX;
        case 2: // CHILD_INDEX
          return CHILD_INDEX;
        case 3: // IS_LEFT
          return IS_LEFT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARENTINDEX_ISSET_ID = 0;
  private static final int __CHILDINDEX_ISSET_ID = 1;
  private static final int __ISLEFT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("parentIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHILD_INDEX, new org.apache.thrift.meta_data.FieldMetaData("childIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_LEFT, new org.apache.thrift.meta_data.FieldMetaData("isLeft", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TreeLink.class, metaDataMap);
  }

  public TreeLink() {
  }

  public TreeLink(
    int parentIndex,
    int childIndex,
    boolean isLeft)
  {
    this();
    this.parentIndex = parentIndex;
    setParentIndexIsSet(true);
    this.childIndex = childIndex;
    setChildIndexIsSet(true);
    this.isLeft = isLeft;
    setIsLeftIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TreeLink(TreeLink other) {
    __isset_bitfield = other.__isset_bitfield;
    this.parentIndex = other.parentIndex;
    this.childIndex = other.childIndex;
    this.isLeft = other.isLeft;
  }

  public TreeLink deepCopy() {
    return new TreeLink(this);
  }

  @Override
  public void clear() {
    setParentIndexIsSet(false);
    this.parentIndex = 0;
    setChildIndexIsSet(false);
    this.childIndex = 0;
    setIsLeftIsSet(false);
    this.isLeft = false;
  }

  public int getParentIndex() {
    return this.parentIndex;
  }

  public TreeLink setParentIndex(int parentIndex) {
    this.parentIndex = parentIndex;
    setParentIndexIsSet(true);
    return this;
  }

  public void unsetParentIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTINDEX_ISSET_ID);
  }

  /** Returns true if field parentIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetParentIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTINDEX_ISSET_ID);
  }

  public void setParentIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTINDEX_ISSET_ID, value);
  }

  public int getChildIndex() {
    return this.childIndex;
  }

  public TreeLink setChildIndex(int childIndex) {
    this.childIndex = childIndex;
    setChildIndexIsSet(true);
    return this;
  }

  public void unsetChildIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHILDINDEX_ISSET_ID);
  }

  /** Returns true if field childIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetChildIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __CHILDINDEX_ISSET_ID);
  }

  public void setChildIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHILDINDEX_ISSET_ID, value);
  }

  public boolean isIsLeft() {
    return this.isLeft;
  }

  public TreeLink setIsLeft(boolean isLeft) {
    this.isLeft = isLeft;
    setIsLeftIsSet(true);
    return this;
  }

  public void unsetIsLeft() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLEFT_ISSET_ID);
  }

  /** Returns true if field isLeft is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLeft() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLEFT_ISSET_ID);
  }

  public void setIsLeftIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLEFT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARENT_INDEX:
      if (value == null) {
        unsetParentIndex();
      } else {
        setParentIndex((Integer)value);
      }
      break;

    case CHILD_INDEX:
      if (value == null) {
        unsetChildIndex();
      } else {
        setChildIndex((Integer)value);
      }
      break;

    case IS_LEFT:
      if (value == null) {
        unsetIsLeft();
      } else {
        setIsLeft((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_INDEX:
      return getParentIndex();

    case CHILD_INDEX:
      return getChildIndex();

    case IS_LEFT:
      return isIsLeft();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARENT_INDEX:
      return isSetParentIndex();
    case CHILD_INDEX:
      return isSetChildIndex();
    case IS_LEFT:
      return isSetIsLeft();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TreeLink)
      return this.equals((TreeLink)that);
    return false;
  }

  public boolean equals(TreeLink that) {
    if (that == null)
      return false;

    boolean this_present_parentIndex = true;
    boolean that_present_parentIndex = true;
    if (this_present_parentIndex || that_present_parentIndex) {
      if (!(this_present_parentIndex && that_present_parentIndex))
        return false;
      if (this.parentIndex != that.parentIndex)
        return false;
    }

    boolean this_present_childIndex = true;
    boolean that_present_childIndex = true;
    if (this_present_childIndex || that_present_childIndex) {
      if (!(this_present_childIndex && that_present_childIndex))
        return false;
      if (this.childIndex != that.childIndex)
        return false;
    }

    boolean this_present_isLeft = true;
    boolean that_present_isLeft = true;
    if (this_present_isLeft || that_present_isLeft) {
      if (!(this_present_isLeft && that_present_isLeft))
        return false;
      if (this.isLeft != that.isLeft)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_parentIndex = true;
    list.add(present_parentIndex);
    if (present_parentIndex)
      list.add(parentIndex);

    boolean present_childIndex = true;
    list.add(present_childIndex);
    if (present_childIndex)
      list.add(childIndex);

    boolean present_isLeft = true;
    list.add(present_isLeft);
    if (present_isLeft)
      list.add(isLeft);

    return list.hashCode();
  }

  @Override
  public int compareTo(TreeLink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParentIndex()).compareTo(other.isSetParentIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentIndex, other.parentIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildIndex()).compareTo(other.isSetChildIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childIndex, other.childIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLeft()).compareTo(other.isSetIsLeft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLeft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLeft, other.isLeft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TreeLink(");
    boolean first = true;

    sb.append("parentIndex:");
    sb.append(this.parentIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("childIndex:");
    sb.append(this.childIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLeft:");
    sb.append(this.isLeft);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TreeLinkStandardSchemeFactory implements SchemeFactory {
    public TreeLinkStandardScheme getScheme() {
      return new TreeLinkStandardScheme();
    }
  }

  private static class TreeLinkStandardScheme extends StandardScheme<TreeLink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TreeLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentIndex = iprot.readI32();
              struct.setParentIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHILD_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.childIndex = iprot.readI32();
              struct.setChildIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_LEFT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLeft = iprot.readBool();
              struct.setIsLeftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TreeLink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARENT_INDEX_FIELD_DESC);
      oprot.writeI32(struct.parentIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHILD_INDEX_FIELD_DESC);
      oprot.writeI32(struct.childIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LEFT_FIELD_DESC);
      oprot.writeBool(struct.isLeft);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TreeLinkTupleSchemeFactory implements SchemeFactory {
    public TreeLinkTupleScheme getScheme() {
      return new TreeLinkTupleScheme();
    }
  }

  private static class TreeLinkTupleScheme extends TupleScheme<TreeLink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TreeLink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetParentIndex()) {
        optionals.set(0);
      }
      if (struct.isSetChildIndex()) {
        optionals.set(1);
      }
      if (struct.isSetIsLeft()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetParentIndex()) {
        oprot.writeI32(struct.parentIndex);
      }
      if (struct.isSetChildIndex()) {
        oprot.writeI32(struct.childIndex);
      }
      if (struct.isSetIsLeft()) {
        oprot.writeBool(struct.isLeft);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TreeLink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.parentIndex = iprot.readI32();
        struct.setParentIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.childIndex = iprot.readI32();
        struct.setChildIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isLeft = iprot.readBool();
        struct.setIsLeftIsSet(true);
      }
    }
  }

}

