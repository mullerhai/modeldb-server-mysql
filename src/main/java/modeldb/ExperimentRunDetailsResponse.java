/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class ExperimentRunDetailsResponse implements org.apache.thrift.TBase<ExperimentRunDetailsResponse, ExperimentRunDetailsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ExperimentRunDetailsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExperimentRunDetailsResponse");

  private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRun", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_RESPONSES_FIELD_DESC = new org.apache.thrift.protocol.TField("modelResponses", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExperimentRunDetailsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExperimentRunDetailsResponseTupleSchemeFactory());
  }

  public Project project; // required
  public Experiment experiment; // required
  public ExperimentRun experimentRun; // required
  public List<ModelResponse> modelResponses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT((short)1, "project"),
    EXPERIMENT((short)2, "experiment"),
    EXPERIMENT_RUN((short)3, "experimentRun"),
    MODEL_RESPONSES((short)4, "modelResponses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT
          return PROJECT;
        case 2: // EXPERIMENT
          return EXPERIMENT;
        case 3: // EXPERIMENT_RUN
          return EXPERIMENT_RUN;
        case 4: // MODEL_RESPONSES
          return MODEL_RESPONSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Project.class)));
    tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Experiment.class)));
    tmpMap.put(_Fields.EXPERIMENT_RUN, new org.apache.thrift.meta_data.FieldMetaData("experimentRun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentRun.class)));
    tmpMap.put(_Fields.MODEL_RESPONSES, new org.apache.thrift.meta_data.FieldMetaData("modelResponses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelResponse.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExperimentRunDetailsResponse.class, metaDataMap);
  }

  public ExperimentRunDetailsResponse() {
  }

  public ExperimentRunDetailsResponse(
    Project project,
    Experiment experiment,
    ExperimentRun experimentRun,
    List<ModelResponse> modelResponses)
  {
    this();
    this.project = project;
    this.experiment = experiment;
    this.experimentRun = experimentRun;
    this.modelResponses = modelResponses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExperimentRunDetailsResponse(ExperimentRunDetailsResponse other) {
    if (other.isSetProject()) {
      this.project = new Project(other.project);
    }
    if (other.isSetExperiment()) {
      this.experiment = new Experiment(other.experiment);
    }
    if (other.isSetExperimentRun()) {
      this.experimentRun = new ExperimentRun(other.experimentRun);
    }
    if (other.isSetModelResponses()) {
      List<ModelResponse> __this__modelResponses = new ArrayList<ModelResponse>(other.modelResponses.size());
      for (ModelResponse other_element : other.modelResponses) {
        __this__modelResponses.add(new ModelResponse(other_element));
      }
      this.modelResponses = __this__modelResponses;
    }
  }

  public ExperimentRunDetailsResponse deepCopy() {
    return new ExperimentRunDetailsResponse(this);
  }

  @Override
  public void clear() {
    this.project = null;
    this.experiment = null;
    this.experimentRun = null;
    this.modelResponses = null;
  }

  public Project getProject() {
    return this.project;
  }

  public ExperimentRunDetailsResponse setProject(Project project) {
    this.project = project;
    return this;
  }

  public void unsetProject() {
    this.project = null;
  }

  /** Returns true if field project is set (has been assigned a value) and false otherwise */
  public boolean isSetProject() {
    return this.project != null;
  }

  public void setProjectIsSet(boolean value) {
    if (!value) {
      this.project = null;
    }
  }

  public Experiment getExperiment() {
    return this.experiment;
  }

  public ExperimentRunDetailsResponse setExperiment(Experiment experiment) {
    this.experiment = experiment;
    return this;
  }

  public void unsetExperiment() {
    this.experiment = null;
  }

  /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
  public boolean isSetExperiment() {
    return this.experiment != null;
  }

  public void setExperimentIsSet(boolean value) {
    if (!value) {
      this.experiment = null;
    }
  }

  public ExperimentRun getExperimentRun() {
    return this.experimentRun;
  }

  public ExperimentRunDetailsResponse setExperimentRun(ExperimentRun experimentRun) {
    this.experimentRun = experimentRun;
    return this;
  }

  public void unsetExperimentRun() {
    this.experimentRun = null;
  }

  /** Returns true if field experimentRun is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRun() {
    return this.experimentRun != null;
  }

  public void setExperimentRunIsSet(boolean value) {
    if (!value) {
      this.experimentRun = null;
    }
  }

  public int getModelResponsesSize() {
    return (this.modelResponses == null) ? 0 : this.modelResponses.size();
  }

  public java.util.Iterator<ModelResponse> getModelResponsesIterator() {
    return (this.modelResponses == null) ? null : this.modelResponses.iterator();
  }

  public void addToModelResponses(ModelResponse elem) {
    if (this.modelResponses == null) {
      this.modelResponses = new ArrayList<ModelResponse>();
    }
    this.modelResponses.add(elem);
  }

  public List<ModelResponse> getModelResponses() {
    return this.modelResponses;
  }

  public ExperimentRunDetailsResponse setModelResponses(List<ModelResponse> modelResponses) {
    this.modelResponses = modelResponses;
    return this;
  }

  public void unsetModelResponses() {
    this.modelResponses = null;
  }

  /** Returns true if field modelResponses is set (has been assigned a value) and false otherwise */
  public boolean isSetModelResponses() {
    return this.modelResponses != null;
  }

  public void setModelResponsesIsSet(boolean value) {
    if (!value) {
      this.modelResponses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT:
      if (value == null) {
        unsetProject();
      } else {
        setProject((Project)value);
      }
      break;

    case EXPERIMENT:
      if (value == null) {
        unsetExperiment();
      } else {
        setExperiment((Experiment)value);
      }
      break;

    case EXPERIMENT_RUN:
      if (value == null) {
        unsetExperimentRun();
      } else {
        setExperimentRun((ExperimentRun)value);
      }
      break;

    case MODEL_RESPONSES:
      if (value == null) {
        unsetModelResponses();
      } else {
        setModelResponses((List<ModelResponse>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT:
      return getProject();

    case EXPERIMENT:
      return getExperiment();

    case EXPERIMENT_RUN:
      return getExperimentRun();

    case MODEL_RESPONSES:
      return getModelResponses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT:
      return isSetProject();
    case EXPERIMENT:
      return isSetExperiment();
    case EXPERIMENT_RUN:
      return isSetExperimentRun();
    case MODEL_RESPONSES:
      return isSetModelResponses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExperimentRunDetailsResponse)
      return this.equals((ExperimentRunDetailsResponse)that);
    return false;
  }

  public boolean equals(ExperimentRunDetailsResponse that) {
    if (that == null)
      return false;

    boolean this_present_project = true && this.isSetProject();
    boolean that_present_project = true && that.isSetProject();
    if (this_present_project || that_present_project) {
      if (!(this_present_project && that_present_project))
        return false;
      if (!this.project.equals(that.project))
        return false;
    }

    boolean this_present_experiment = true && this.isSetExperiment();
    boolean that_present_experiment = true && that.isSetExperiment();
    if (this_present_experiment || that_present_experiment) {
      if (!(this_present_experiment && that_present_experiment))
        return false;
      if (!this.experiment.equals(that.experiment))
        return false;
    }

    boolean this_present_experimentRun = true && this.isSetExperimentRun();
    boolean that_present_experimentRun = true && that.isSetExperimentRun();
    if (this_present_experimentRun || that_present_experimentRun) {
      if (!(this_present_experimentRun && that_present_experimentRun))
        return false;
      if (!this.experimentRun.equals(that.experimentRun))
        return false;
    }

    boolean this_present_modelResponses = true && this.isSetModelResponses();
    boolean that_present_modelResponses = true && that.isSetModelResponses();
    if (this_present_modelResponses || that_present_modelResponses) {
      if (!(this_present_modelResponses && that_present_modelResponses))
        return false;
      if (!this.modelResponses.equals(that.modelResponses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_project = true && (isSetProject());
    list.add(present_project);
    if (present_project)
      list.add(project);

    boolean present_experiment = true && (isSetExperiment());
    list.add(present_experiment);
    if (present_experiment)
      list.add(experiment);

    boolean present_experimentRun = true && (isSetExperimentRun());
    list.add(present_experimentRun);
    if (present_experimentRun)
      list.add(experimentRun);

    boolean present_modelResponses = true && (isSetModelResponses());
    list.add(present_modelResponses);
    if (present_modelResponses)
      list.add(modelResponses);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExperimentRunDetailsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRun()).compareTo(other.isSetExperimentRun());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRun()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRun, other.experimentRun);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelResponses()).compareTo(other.isSetModelResponses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelResponses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelResponses, other.modelResponses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExperimentRunDetailsResponse(");
    boolean first = true;

    sb.append("project:");
    if (this.project == null) {
      sb.append("null");
    } else {
      sb.append(this.project);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experiment:");
    if (this.experiment == null) {
      sb.append("null");
    } else {
      sb.append(this.experiment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRun:");
    if (this.experimentRun == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentRun);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelResponses:");
    if (this.modelResponses == null) {
      sb.append("null");
    } else {
      sb.append(this.modelResponses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (project != null) {
      project.validate();
    }
    if (experiment != null) {
      experiment.validate();
    }
    if (experimentRun != null) {
      experimentRun.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExperimentRunDetailsResponseStandardSchemeFactory implements SchemeFactory {
    public ExperimentRunDetailsResponseStandardScheme getScheme() {
      return new ExperimentRunDetailsResponseStandardScheme();
    }
  }

  private static class ExperimentRunDetailsResponseStandardScheme extends StandardScheme<ExperimentRunDetailsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExperimentRunDetailsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.project = new Project();
              struct.project.read(iprot);
              struct.setProjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPERIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.experiment = new Experiment();
              struct.experiment.read(iprot);
              struct.setExperimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPERIMENT_RUN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.experimentRun = new ExperimentRun();
              struct.experimentRun.read(iprot);
              struct.setExperimentRunIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL_RESPONSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list282 = iprot.readListBegin();
                struct.modelResponses = new ArrayList<ModelResponse>(_list282.size);
                ModelResponse _elem283;
                for (int _i284 = 0; _i284 < _list282.size; ++_i284)
                {
                  _elem283 = new ModelResponse();
                  _elem283.read(iprot);
                  struct.modelResponses.add(_elem283);
                }
                iprot.readListEnd();
              }
              struct.setModelResponsesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExperimentRunDetailsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.project != null) {
        oprot.writeFieldBegin(PROJECT_FIELD_DESC);
        struct.project.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.experiment != null) {
        oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
        struct.experiment.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.experimentRun != null) {
        oprot.writeFieldBegin(EXPERIMENT_RUN_FIELD_DESC);
        struct.experimentRun.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.modelResponses != null) {
        oprot.writeFieldBegin(MODEL_RESPONSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.modelResponses.size()));
          for (ModelResponse _iter285 : struct.modelResponses)
          {
            _iter285.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExperimentRunDetailsResponseTupleSchemeFactory implements SchemeFactory {
    public ExperimentRunDetailsResponseTupleScheme getScheme() {
      return new ExperimentRunDetailsResponseTupleScheme();
    }
  }

  private static class ExperimentRunDetailsResponseTupleScheme extends TupleScheme<ExperimentRunDetailsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExperimentRunDetailsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProject()) {
        optionals.set(0);
      }
      if (struct.isSetExperiment()) {
        optionals.set(1);
      }
      if (struct.isSetExperimentRun()) {
        optionals.set(2);
      }
      if (struct.isSetModelResponses()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProject()) {
        struct.project.write(oprot);
      }
      if (struct.isSetExperiment()) {
        struct.experiment.write(oprot);
      }
      if (struct.isSetExperimentRun()) {
        struct.experimentRun.write(oprot);
      }
      if (struct.isSetModelResponses()) {
        {
          oprot.writeI32(struct.modelResponses.size());
          for (ModelResponse _iter286 : struct.modelResponses)
          {
            _iter286.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExperimentRunDetailsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.project = new Project();
        struct.project.read(iprot);
        struct.setProjectIsSet(true);
      }
      if (incoming.get(1)) {
        struct.experiment = new Experiment();
        struct.experiment.read(iprot);
        struct.setExperimentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.experimentRun = new ExperimentRun();
        struct.experimentRun.read(iprot);
        struct.setExperimentRunIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list287 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.modelResponses = new ArrayList<ModelResponse>(_list287.size);
          ModelResponse _elem288;
          for (int _i289 = 0; _i289 < _list287.size; ++_i289)
          {
            _elem288 = new ModelResponse();
            _elem288.read(iprot);
            struct.modelResponses.add(_elem288);
          }
        }
        struct.setModelResponsesIsSet(true);
      }
    }
  }

}

