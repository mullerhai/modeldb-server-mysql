/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class CommonAncestor implements org.apache.thrift.TBase<CommonAncestor, CommonAncestor._Fields>, java.io.Serializable, Cloneable, Comparable<CommonAncestor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommonAncestor");

  private static final org.apache.thrift.protocol.TField ANCESTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("ancestor", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CHAIN_INDEX_MODEL1_FIELD_DESC = new org.apache.thrift.protocol.TField("chainIndexModel1", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHAIN_INDEX_MODEL2_FIELD_DESC = new org.apache.thrift.protocol.TField("chainIndexModel2", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommonAncestorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommonAncestorTupleSchemeFactory());
  }

  public DataFrame ancestor; // optional
  public int chainIndexModel1; // required
  public int chainIndexModel2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANCESTOR((short)1, "ancestor"),
    CHAIN_INDEX_MODEL1((short)2, "chainIndexModel1"),
    CHAIN_INDEX_MODEL2((short)3, "chainIndexModel2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANCESTOR
          return ANCESTOR;
        case 2: // CHAIN_INDEX_MODEL1
          return CHAIN_INDEX_MODEL1;
        case 3: // CHAIN_INDEX_MODEL2
          return CHAIN_INDEX_MODEL2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHAININDEXMODEL1_ISSET_ID = 0;
  private static final int __CHAININDEXMODEL2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ANCESTOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANCESTOR, new org.apache.thrift.meta_data.FieldMetaData("ancestor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.CHAIN_INDEX_MODEL1, new org.apache.thrift.meta_data.FieldMetaData("chainIndexModel1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHAIN_INDEX_MODEL2, new org.apache.thrift.meta_data.FieldMetaData("chainIndexModel2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommonAncestor.class, metaDataMap);
  }

  public CommonAncestor() {
  }

  public CommonAncestor(
    int chainIndexModel1,
    int chainIndexModel2)
  {
    this();
    this.chainIndexModel1 = chainIndexModel1;
    setChainIndexModel1IsSet(true);
    this.chainIndexModel2 = chainIndexModel2;
    setChainIndexModel2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommonAncestor(CommonAncestor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAncestor()) {
      this.ancestor = new DataFrame(other.ancestor);
    }
    this.chainIndexModel1 = other.chainIndexModel1;
    this.chainIndexModel2 = other.chainIndexModel2;
  }

  public CommonAncestor deepCopy() {
    return new CommonAncestor(this);
  }

  @Override
  public void clear() {
    this.ancestor = null;
    setChainIndexModel1IsSet(false);
    this.chainIndexModel1 = 0;
    setChainIndexModel2IsSet(false);
    this.chainIndexModel2 = 0;
  }

  public DataFrame getAncestor() {
    return this.ancestor;
  }

  public CommonAncestor setAncestor(DataFrame ancestor) {
    this.ancestor = ancestor;
    return this;
  }

  public void unsetAncestor() {
    this.ancestor = null;
  }

  /** Returns true if field ancestor is set (has been assigned a value) and false otherwise */
  public boolean isSetAncestor() {
    return this.ancestor != null;
  }

  public void setAncestorIsSet(boolean value) {
    if (!value) {
      this.ancestor = null;
    }
  }

  public int getChainIndexModel1() {
    return this.chainIndexModel1;
  }

  public CommonAncestor setChainIndexModel1(int chainIndexModel1) {
    this.chainIndexModel1 = chainIndexModel1;
    setChainIndexModel1IsSet(true);
    return this;
  }

  public void unsetChainIndexModel1() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAININDEXMODEL1_ISSET_ID);
  }

  /** Returns true if field chainIndexModel1 is set (has been assigned a value) and false otherwise */
  public boolean isSetChainIndexModel1() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAININDEXMODEL1_ISSET_ID);
  }

  public void setChainIndexModel1IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAININDEXMODEL1_ISSET_ID, value);
  }

  public int getChainIndexModel2() {
    return this.chainIndexModel2;
  }

  public CommonAncestor setChainIndexModel2(int chainIndexModel2) {
    this.chainIndexModel2 = chainIndexModel2;
    setChainIndexModel2IsSet(true);
    return this;
  }

  public void unsetChainIndexModel2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHAININDEXMODEL2_ISSET_ID);
  }

  /** Returns true if field chainIndexModel2 is set (has been assigned a value) and false otherwise */
  public boolean isSetChainIndexModel2() {
    return EncodingUtils.testBit(__isset_bitfield, __CHAININDEXMODEL2_ISSET_ID);
  }

  public void setChainIndexModel2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHAININDEXMODEL2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANCESTOR:
      if (value == null) {
        unsetAncestor();
      } else {
        setAncestor((DataFrame)value);
      }
      break;

    case CHAIN_INDEX_MODEL1:
      if (value == null) {
        unsetChainIndexModel1();
      } else {
        setChainIndexModel1((Integer)value);
      }
      break;

    case CHAIN_INDEX_MODEL2:
      if (value == null) {
        unsetChainIndexModel2();
      } else {
        setChainIndexModel2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANCESTOR:
      return getAncestor();

    case CHAIN_INDEX_MODEL1:
      return getChainIndexModel1();

    case CHAIN_INDEX_MODEL2:
      return getChainIndexModel2();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANCESTOR:
      return isSetAncestor();
    case CHAIN_INDEX_MODEL1:
      return isSetChainIndexModel1();
    case CHAIN_INDEX_MODEL2:
      return isSetChainIndexModel2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommonAncestor)
      return this.equals((CommonAncestor)that);
    return false;
  }

  public boolean equals(CommonAncestor that) {
    if (that == null)
      return false;

    boolean this_present_ancestor = true && this.isSetAncestor();
    boolean that_present_ancestor = true && that.isSetAncestor();
    if (this_present_ancestor || that_present_ancestor) {
      if (!(this_present_ancestor && that_present_ancestor))
        return false;
      if (!this.ancestor.equals(that.ancestor))
        return false;
    }

    boolean this_present_chainIndexModel1 = true;
    boolean that_present_chainIndexModel1 = true;
    if (this_present_chainIndexModel1 || that_present_chainIndexModel1) {
      if (!(this_present_chainIndexModel1 && that_present_chainIndexModel1))
        return false;
      if (this.chainIndexModel1 != that.chainIndexModel1)
        return false;
    }

    boolean this_present_chainIndexModel2 = true;
    boolean that_present_chainIndexModel2 = true;
    if (this_present_chainIndexModel2 || that_present_chainIndexModel2) {
      if (!(this_present_chainIndexModel2 && that_present_chainIndexModel2))
        return false;
      if (this.chainIndexModel2 != that.chainIndexModel2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ancestor = true && (isSetAncestor());
    list.add(present_ancestor);
    if (present_ancestor)
      list.add(ancestor);

    boolean present_chainIndexModel1 = true;
    list.add(present_chainIndexModel1);
    if (present_chainIndexModel1)
      list.add(chainIndexModel1);

    boolean present_chainIndexModel2 = true;
    list.add(present_chainIndexModel2);
    if (present_chainIndexModel2)
      list.add(chainIndexModel2);

    return list.hashCode();
  }

  @Override
  public int compareTo(CommonAncestor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAncestor()).compareTo(other.isSetAncestor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAncestor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ancestor, other.ancestor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChainIndexModel1()).compareTo(other.isSetChainIndexModel1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChainIndexModel1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chainIndexModel1, other.chainIndexModel1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChainIndexModel2()).compareTo(other.isSetChainIndexModel2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChainIndexModel2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chainIndexModel2, other.chainIndexModel2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommonAncestor(");
    boolean first = true;

    if (isSetAncestor()) {
      sb.append("ancestor:");
      if (this.ancestor == null) {
        sb.append("null");
      } else {
        sb.append(this.ancestor);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("chainIndexModel1:");
    sb.append(this.chainIndexModel1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chainIndexModel2:");
    sb.append(this.chainIndexModel2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ancestor != null) {
      ancestor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommonAncestorStandardSchemeFactory implements SchemeFactory {
    public CommonAncestorStandardScheme getScheme() {
      return new CommonAncestorStandardScheme();
    }
  }

  private static class CommonAncestorStandardScheme extends StandardScheme<CommonAncestor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommonAncestor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANCESTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ancestor = new DataFrame();
              struct.ancestor.read(iprot);
              struct.setAncestorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAIN_INDEX_MODEL1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chainIndexModel1 = iprot.readI32();
              struct.setChainIndexModel1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAIN_INDEX_MODEL2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chainIndexModel2 = iprot.readI32();
              struct.setChainIndexModel2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommonAncestor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ancestor != null) {
        if (struct.isSetAncestor()) {
          oprot.writeFieldBegin(ANCESTOR_FIELD_DESC);
          struct.ancestor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CHAIN_INDEX_MODEL1_FIELD_DESC);
      oprot.writeI32(struct.chainIndexModel1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHAIN_INDEX_MODEL2_FIELD_DESC);
      oprot.writeI32(struct.chainIndexModel2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommonAncestorTupleSchemeFactory implements SchemeFactory {
    public CommonAncestorTupleScheme getScheme() {
      return new CommonAncestorTupleScheme();
    }
  }

  private static class CommonAncestorTupleScheme extends TupleScheme<CommonAncestor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommonAncestor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAncestor()) {
        optionals.set(0);
      }
      if (struct.isSetChainIndexModel1()) {
        optionals.set(1);
      }
      if (struct.isSetChainIndexModel2()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAncestor()) {
        struct.ancestor.write(oprot);
      }
      if (struct.isSetChainIndexModel1()) {
        oprot.writeI32(struct.chainIndexModel1);
      }
      if (struct.isSetChainIndexModel2()) {
        oprot.writeI32(struct.chainIndexModel2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommonAncestor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ancestor = new DataFrame();
        struct.ancestor.read(iprot);
        struct.setAncestorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chainIndexModel1 = iprot.readI32();
        struct.setChainIndexModel1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.chainIndexModel2 = iprot.readI32();
        struct.setChainIndexModel2IsSet(true);
      }
    }
  }

}

