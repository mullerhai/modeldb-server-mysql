/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class MetricEvent implements org.apache.thrift.TBase<MetricEvent, MetricEvent._Fields>, java.io.Serializable, Cloneable, Comparable<MetricEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetricEvent");

  private static final org.apache.thrift.protocol.TField DF_FIELD_DESC = new org.apache.thrift.protocol.TField("df", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField METRIC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("metricType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField METRIC_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("metricValue", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LABEL_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("labelCol", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PREDICTION_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("predictionCol", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricEventTupleSchemeFactory());
  }

  public DataFrame df; // required
  public Transformer model; // required
  public String metricType; // required
  public double metricValue; // required
  public String labelCol; // required
  public String predictionCol; // required
  public int experimentRunId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DF((short)1, "df"),
    MODEL((short)2, "model"),
    METRIC_TYPE((short)3, "metricType"),
    METRIC_VALUE((short)4, "metricValue"),
    LABEL_COL((short)5, "labelCol"),
    PREDICTION_COL((short)6, "predictionCol"),
    EXPERIMENT_RUN_ID((short)7, "experimentRunId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DF
          return DF;
        case 2: // MODEL
          return MODEL;
        case 3: // METRIC_TYPE
          return METRIC_TYPE;
        case 4: // METRIC_VALUE
          return METRIC_VALUE;
        case 5: // LABEL_COL
          return LABEL_COL;
        case 6: // PREDICTION_COL
          return PREDICTION_COL;
        case 7: // EXPERIMENT_RUN_ID
          return EXPERIMENT_RUN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __METRICVALUE_ISSET_ID = 0;
  private static final int __EXPERIMENTRUNID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DF, new org.apache.thrift.meta_data.FieldMetaData("df", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transformer.class)));
    tmpMap.put(_Fields.METRIC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("metricType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METRIC_VALUE, new org.apache.thrift.meta_data.FieldMetaData("metricValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LABEL_COL, new org.apache.thrift.meta_data.FieldMetaData("labelCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREDICTION_COL, new org.apache.thrift.meta_data.FieldMetaData("predictionCol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetricEvent.class, metaDataMap);
  }

  public MetricEvent() {
  }

  public MetricEvent(
    DataFrame df,
    Transformer model,
    String metricType,
    double metricValue,
    String labelCol,
    String predictionCol,
    int experimentRunId)
  {
    this();
    this.df = df;
    this.model = model;
    this.metricType = metricType;
    this.metricValue = metricValue;
    setMetricValueIsSet(true);
    this.labelCol = labelCol;
    this.predictionCol = predictionCol;
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricEvent(MetricEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDf()) {
      this.df = new DataFrame(other.df);
    }
    if (other.isSetModel()) {
      this.model = new Transformer(other.model);
    }
    if (other.isSetMetricType()) {
      this.metricType = other.metricType;
    }
    this.metricValue = other.metricValue;
    if (other.isSetLabelCol()) {
      this.labelCol = other.labelCol;
    }
    if (other.isSetPredictionCol()) {
      this.predictionCol = other.predictionCol;
    }
    this.experimentRunId = other.experimentRunId;
  }

  public MetricEvent deepCopy() {
    return new MetricEvent(this);
  }

  @Override
  public void clear() {
    this.df = null;
    this.model = null;
    this.metricType = null;
    setMetricValueIsSet(false);
    this.metricValue = 0.0;
    this.labelCol = null;
    this.predictionCol = null;
    setExperimentRunIdIsSet(false);
    this.experimentRunId = 0;
  }

  public DataFrame getDf() {
    return this.df;
  }

  public MetricEvent setDf(DataFrame df) {
    this.df = df;
    return this;
  }

  public void unsetDf() {
    this.df = null;
  }

  /** Returns true if field df is set (has been assigned a value) and false otherwise */
  public boolean isSetDf() {
    return this.df != null;
  }

  public void setDfIsSet(boolean value) {
    if (!value) {
      this.df = null;
    }
  }

  public Transformer getModel() {
    return this.model;
  }

  public MetricEvent setModel(Transformer model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public String getMetricType() {
    return this.metricType;
  }

  public MetricEvent setMetricType(String metricType) {
    this.metricType = metricType;
    return this;
  }

  public void unsetMetricType() {
    this.metricType = null;
  }

  /** Returns true if field metricType is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricType() {
    return this.metricType != null;
  }

  public void setMetricTypeIsSet(boolean value) {
    if (!value) {
      this.metricType = null;
    }
  }

  public double getMetricValue() {
    return this.metricValue;
  }

  public MetricEvent setMetricValue(double metricValue) {
    this.metricValue = metricValue;
    setMetricValueIsSet(true);
    return this;
  }

  public void unsetMetricValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __METRICVALUE_ISSET_ID);
  }

  /** Returns true if field metricValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricValue() {
    return EncodingUtils.testBit(__isset_bitfield, __METRICVALUE_ISSET_ID);
  }

  public void setMetricValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __METRICVALUE_ISSET_ID, value);
  }

  public String getLabelCol() {
    return this.labelCol;
  }

  public MetricEvent setLabelCol(String labelCol) {
    this.labelCol = labelCol;
    return this;
  }

  public void unsetLabelCol() {
    this.labelCol = null;
  }

  /** Returns true if field labelCol is set (has been assigned a value) and false otherwise */
  public boolean isSetLabelCol() {
    return this.labelCol != null;
  }

  public void setLabelColIsSet(boolean value) {
    if (!value) {
      this.labelCol = null;
    }
  }

  public String getPredictionCol() {
    return this.predictionCol;
  }

  public MetricEvent setPredictionCol(String predictionCol) {
    this.predictionCol = predictionCol;
    return this;
  }

  public void unsetPredictionCol() {
    this.predictionCol = null;
  }

  /** Returns true if field predictionCol is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictionCol() {
    return this.predictionCol != null;
  }

  public void setPredictionColIsSet(boolean value) {
    if (!value) {
      this.predictionCol = null;
    }
  }

  public int getExperimentRunId() {
    return this.experimentRunId;
  }

  public MetricEvent setExperimentRunId(int experimentRunId) {
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    return this;
  }

  public void unsetExperimentRunId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRunId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  public void setExperimentRunIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DF:
      if (value == null) {
        unsetDf();
      } else {
        setDf((DataFrame)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((Transformer)value);
      }
      break;

    case METRIC_TYPE:
      if (value == null) {
        unsetMetricType();
      } else {
        setMetricType((String)value);
      }
      break;

    case METRIC_VALUE:
      if (value == null) {
        unsetMetricValue();
      } else {
        setMetricValue((Double)value);
      }
      break;

    case LABEL_COL:
      if (value == null) {
        unsetLabelCol();
      } else {
        setLabelCol((String)value);
      }
      break;

    case PREDICTION_COL:
      if (value == null) {
        unsetPredictionCol();
      } else {
        setPredictionCol((String)value);
      }
      break;

    case EXPERIMENT_RUN_ID:
      if (value == null) {
        unsetExperimentRunId();
      } else {
        setExperimentRunId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DF:
      return getDf();

    case MODEL:
      return getModel();

    case METRIC_TYPE:
      return getMetricType();

    case METRIC_VALUE:
      return getMetricValue();

    case LABEL_COL:
      return getLabelCol();

    case PREDICTION_COL:
      return getPredictionCol();

    case EXPERIMENT_RUN_ID:
      return getExperimentRunId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DF:
      return isSetDf();
    case MODEL:
      return isSetModel();
    case METRIC_TYPE:
      return isSetMetricType();
    case METRIC_VALUE:
      return isSetMetricValue();
    case LABEL_COL:
      return isSetLabelCol();
    case PREDICTION_COL:
      return isSetPredictionCol();
    case EXPERIMENT_RUN_ID:
      return isSetExperimentRunId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricEvent)
      return this.equals((MetricEvent)that);
    return false;
  }

  public boolean equals(MetricEvent that) {
    if (that == null)
      return false;

    boolean this_present_df = true && this.isSetDf();
    boolean that_present_df = true && that.isSetDf();
    if (this_present_df || that_present_df) {
      if (!(this_present_df && that_present_df))
        return false;
      if (!this.df.equals(that.df))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_metricType = true && this.isSetMetricType();
    boolean that_present_metricType = true && that.isSetMetricType();
    if (this_present_metricType || that_present_metricType) {
      if (!(this_present_metricType && that_present_metricType))
        return false;
      if (!this.metricType.equals(that.metricType))
        return false;
    }

    boolean this_present_metricValue = true;
    boolean that_present_metricValue = true;
    if (this_present_metricValue || that_present_metricValue) {
      if (!(this_present_metricValue && that_present_metricValue))
        return false;
      if (this.metricValue != that.metricValue)
        return false;
    }

    boolean this_present_labelCol = true && this.isSetLabelCol();
    boolean that_present_labelCol = true && that.isSetLabelCol();
    if (this_present_labelCol || that_present_labelCol) {
      if (!(this_present_labelCol && that_present_labelCol))
        return false;
      if (!this.labelCol.equals(that.labelCol))
        return false;
    }

    boolean this_present_predictionCol = true && this.isSetPredictionCol();
    boolean that_present_predictionCol = true && that.isSetPredictionCol();
    if (this_present_predictionCol || that_present_predictionCol) {
      if (!(this_present_predictionCol && that_present_predictionCol))
        return false;
      if (!this.predictionCol.equals(that.predictionCol))
        return false;
    }

    boolean this_present_experimentRunId = true;
    boolean that_present_experimentRunId = true;
    if (this_present_experimentRunId || that_present_experimentRunId) {
      if (!(this_present_experimentRunId && that_present_experimentRunId))
        return false;
      if (this.experimentRunId != that.experimentRunId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_df = true && (isSetDf());
    list.add(present_df);
    if (present_df)
      list.add(df);

    boolean present_model = true && (isSetModel());
    list.add(present_model);
    if (present_model)
      list.add(model);

    boolean present_metricType = true && (isSetMetricType());
    list.add(present_metricType);
    if (present_metricType)
      list.add(metricType);

    boolean present_metricValue = true;
    list.add(present_metricValue);
    if (present_metricValue)
      list.add(metricValue);

    boolean present_labelCol = true && (isSetLabelCol());
    list.add(present_labelCol);
    if (present_labelCol)
      list.add(labelCol);

    boolean present_predictionCol = true && (isSetPredictionCol());
    list.add(present_predictionCol);
    if (present_predictionCol)
      list.add(predictionCol);

    boolean present_experimentRunId = true;
    list.add(present_experimentRunId);
    if (present_experimentRunId)
      list.add(experimentRunId);

    return list.hashCode();
  }

  @Override
  public int compareTo(MetricEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDf()).compareTo(other.isSetDf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.df, other.df);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricType()).compareTo(other.isSetMetricType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricType, other.metricType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricValue()).compareTo(other.isSetMetricValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricValue, other.metricValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabelCol()).compareTo(other.isSetLabelCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabelCol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelCol, other.labelCol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictionCol()).compareTo(other.isSetPredictionCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictionCol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictionCol, other.predictionCol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricEvent(");
    boolean first = true;

    sb.append("df:");
    if (this.df == null) {
      sb.append("null");
    } else {
      sb.append(this.df);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model:");
    if (this.model == null) {
      sb.append("null");
    } else {
      sb.append(this.model);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricType:");
    if (this.metricType == null) {
      sb.append("null");
    } else {
      sb.append(this.metricType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricValue:");
    sb.append(this.metricValue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("labelCol:");
    if (this.labelCol == null) {
      sb.append("null");
    } else {
      sb.append(this.labelCol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictionCol:");
    if (this.predictionCol == null) {
      sb.append("null");
    } else {
      sb.append(this.predictionCol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRunId:");
    sb.append(this.experimentRunId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (df != null) {
      df.validate();
    }
    if (model != null) {
      model.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricEventStandardSchemeFactory implements SchemeFactory {
    public MetricEventStandardScheme getScheme() {
      return new MetricEventStandardScheme();
    }
  }

  private static class MetricEventStandardScheme extends StandardScheme<MetricEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MetricEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.df = new DataFrame();
              struct.df.read(iprot);
              struct.setDfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.model = new Transformer();
              struct.model.read(iprot);
              struct.setModelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRIC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metricType = iprot.readString();
              struct.setMetricTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METRIC_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.metricValue = iprot.readDouble();
              struct.setMetricValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LABEL_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.labelCol = iprot.readString();
              struct.setLabelColIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PREDICTION_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.predictionCol = iprot.readString();
              struct.setPredictionColIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPERIMENT_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentRunId = iprot.readI32();
              struct.setExperimentRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MetricEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.df != null) {
        oprot.writeFieldBegin(DF_FIELD_DESC);
        struct.df.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.model != null) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        struct.model.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metricType != null) {
        oprot.writeFieldBegin(METRIC_TYPE_FIELD_DESC);
        oprot.writeString(struct.metricType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METRIC_VALUE_FIELD_DESC);
      oprot.writeDouble(struct.metricValue);
      oprot.writeFieldEnd();
      if (struct.labelCol != null) {
        oprot.writeFieldBegin(LABEL_COL_FIELD_DESC);
        oprot.writeString(struct.labelCol);
        oprot.writeFieldEnd();
      }
      if (struct.predictionCol != null) {
        oprot.writeFieldBegin(PREDICTION_COL_FIELD_DESC);
        oprot.writeString(struct.predictionCol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentRunId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricEventTupleSchemeFactory implements SchemeFactory {
    public MetricEventTupleScheme getScheme() {
      return new MetricEventTupleScheme();
    }
  }

  private static class MetricEventTupleScheme extends TupleScheme<MetricEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MetricEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDf()) {
        optionals.set(0);
      }
      if (struct.isSetModel()) {
        optionals.set(1);
      }
      if (struct.isSetMetricType()) {
        optionals.set(2);
      }
      if (struct.isSetMetricValue()) {
        optionals.set(3);
      }
      if (struct.isSetLabelCol()) {
        optionals.set(4);
      }
      if (struct.isSetPredictionCol()) {
        optionals.set(5);
      }
      if (struct.isSetExperimentRunId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetDf()) {
        struct.df.write(oprot);
      }
      if (struct.isSetModel()) {
        struct.model.write(oprot);
      }
      if (struct.isSetMetricType()) {
        oprot.writeString(struct.metricType);
      }
      if (struct.isSetMetricValue()) {
        oprot.writeDouble(struct.metricValue);
      }
      if (struct.isSetLabelCol()) {
        oprot.writeString(struct.labelCol);
      }
      if (struct.isSetPredictionCol()) {
        oprot.writeString(struct.predictionCol);
      }
      if (struct.isSetExperimentRunId()) {
        oprot.writeI32(struct.experimentRunId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MetricEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.df = new DataFrame();
        struct.df.read(iprot);
        struct.setDfIsSet(true);
      }
      if (incoming.get(1)) {
        struct.model = new Transformer();
        struct.model.read(iprot);
        struct.setModelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.metricType = iprot.readString();
        struct.setMetricTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.metricValue = iprot.readDouble();
        struct.setMetricValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.labelCol = iprot.readString();
        struct.setLabelColIsSet(true);
      }
      if (incoming.get(5)) {
        struct.predictionCol = iprot.readString();
        struct.setPredictionColIsSet(true);
      }
      if (incoming.get(6)) {
        struct.experimentRunId = iprot.readI32();
        struct.setExperimentRunIdIsSet(true);
      }
    }
  }

}

