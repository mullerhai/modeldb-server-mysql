/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class ModelAncestryResponse implements org.apache.thrift.TBase<ModelAncestryResponse, ModelAncestryResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ModelAncestryResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelAncestryResponse");

  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FIT_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fitEvent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSFORM_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("transformEvents", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelAncestryResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelAncestryResponseTupleSchemeFactory());
  }

  public int modelId; // required
  public FitEvent fitEvent; // required
  public List<TransformEvent> transformEvents; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MODEL_ID((short)1, "modelId"),
    FIT_EVENT((short)2, "fitEvent"),
    TRANSFORM_EVENTS((short)3, "transformEvents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MODEL_ID
          return MODEL_ID;
        case 2: // FIT_EVENT
          return FIT_EVENT;
        case 3: // TRANSFORM_EVENTS
          return TRANSFORM_EVENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODELID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIT_EVENT, new org.apache.thrift.meta_data.FieldMetaData("fitEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FitEvent.class)));
    tmpMap.put(_Fields.TRANSFORM_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("transformEvents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelAncestryResponse.class, metaDataMap);
  }

  public ModelAncestryResponse() {
  }

  public ModelAncestryResponse(
    int modelId,
    FitEvent fitEvent,
    List<TransformEvent> transformEvents)
  {
    this();
    this.modelId = modelId;
    setModelIdIsSet(true);
    this.fitEvent = fitEvent;
    this.transformEvents = transformEvents;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelAncestryResponse(ModelAncestryResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.modelId = other.modelId;
    if (other.isSetFitEvent()) {
      this.fitEvent = new FitEvent(other.fitEvent);
    }
    if (other.isSetTransformEvents()) {
      List<TransformEvent> __this__transformEvents = new ArrayList<TransformEvent>(other.transformEvents.size());
      for (TransformEvent other_element : other.transformEvents) {
        __this__transformEvents.add(new TransformEvent(other_element));
      }
      this.transformEvents = __this__transformEvents;
    }
  }

  public ModelAncestryResponse deepCopy() {
    return new ModelAncestryResponse(this);
  }

  @Override
  public void clear() {
    setModelIdIsSet(false);
    this.modelId = 0;
    this.fitEvent = null;
    this.transformEvents = null;
  }

  public int getModelId() {
    return this.modelId;
  }

  public ModelAncestryResponse setModelId(int modelId) {
    this.modelId = modelId;
    setModelIdIsSet(true);
    return this;
  }

  public void unsetModelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
  }

  public void setModelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
  }

  public FitEvent getFitEvent() {
    return this.fitEvent;
  }

  public ModelAncestryResponse setFitEvent(FitEvent fitEvent) {
    this.fitEvent = fitEvent;
    return this;
  }

  public void unsetFitEvent() {
    this.fitEvent = null;
  }

  /** Returns true if field fitEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetFitEvent() {
    return this.fitEvent != null;
  }

  public void setFitEventIsSet(boolean value) {
    if (!value) {
      this.fitEvent = null;
    }
  }

  public int getTransformEventsSize() {
    return (this.transformEvents == null) ? 0 : this.transformEvents.size();
  }

  public java.util.Iterator<TransformEvent> getTransformEventsIterator() {
    return (this.transformEvents == null) ? null : this.transformEvents.iterator();
  }

  public void addToTransformEvents(TransformEvent elem) {
    if (this.transformEvents == null) {
      this.transformEvents = new ArrayList<TransformEvent>();
    }
    this.transformEvents.add(elem);
  }

  public List<TransformEvent> getTransformEvents() {
    return this.transformEvents;
  }

  public ModelAncestryResponse setTransformEvents(List<TransformEvent> transformEvents) {
    this.transformEvents = transformEvents;
    return this;
  }

  public void unsetTransformEvents() {
    this.transformEvents = null;
  }

  /** Returns true if field transformEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetTransformEvents() {
    return this.transformEvents != null;
  }

  public void setTransformEventsIsSet(boolean value) {
    if (!value) {
      this.transformEvents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((Integer)value);
      }
      break;

    case FIT_EVENT:
      if (value == null) {
        unsetFitEvent();
      } else {
        setFitEvent((FitEvent)value);
      }
      break;

    case TRANSFORM_EVENTS:
      if (value == null) {
        unsetTransformEvents();
      } else {
        setTransformEvents((List<TransformEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MODEL_ID:
      return getModelId();

    case FIT_EVENT:
      return getFitEvent();

    case TRANSFORM_EVENTS:
      return getTransformEvents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MODEL_ID:
      return isSetModelId();
    case FIT_EVENT:
      return isSetFitEvent();
    case TRANSFORM_EVENTS:
      return isSetTransformEvents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelAncestryResponse)
      return this.equals((ModelAncestryResponse)that);
    return false;
  }

  public boolean equals(ModelAncestryResponse that) {
    if (that == null)
      return false;

    boolean this_present_modelId = true;
    boolean that_present_modelId = true;
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (this.modelId != that.modelId)
        return false;
    }

    boolean this_present_fitEvent = true && this.isSetFitEvent();
    boolean that_present_fitEvent = true && that.isSetFitEvent();
    if (this_present_fitEvent || that_present_fitEvent) {
      if (!(this_present_fitEvent && that_present_fitEvent))
        return false;
      if (!this.fitEvent.equals(that.fitEvent))
        return false;
    }

    boolean this_present_transformEvents = true && this.isSetTransformEvents();
    boolean that_present_transformEvents = true && that.isSetTransformEvents();
    if (this_present_transformEvents || that_present_transformEvents) {
      if (!(this_present_transformEvents && that_present_transformEvents))
        return false;
      if (!this.transformEvents.equals(that.transformEvents))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_modelId = true;
    list.add(present_modelId);
    if (present_modelId)
      list.add(modelId);

    boolean present_fitEvent = true && (isSetFitEvent());
    list.add(present_fitEvent);
    if (present_fitEvent)
      list.add(fitEvent);

    boolean present_transformEvents = true && (isSetTransformEvents());
    list.add(present_transformEvents);
    if (present_transformEvents)
      list.add(transformEvents);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelAncestryResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFitEvent()).compareTo(other.isSetFitEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFitEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fitEvent, other.fitEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransformEvents()).compareTo(other.isSetTransformEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransformEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformEvents, other.transformEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelAncestryResponse(");
    boolean first = true;

    sb.append("modelId:");
    sb.append(this.modelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fitEvent:");
    if (this.fitEvent == null) {
      sb.append("null");
    } else {
      sb.append(this.fitEvent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transformEvents:");
    if (this.transformEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.transformEvents);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fitEvent != null) {
      fitEvent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelAncestryResponseStandardSchemeFactory implements SchemeFactory {
    public ModelAncestryResponseStandardScheme getScheme() {
      return new ModelAncestryResponseStandardScheme();
    }
  }

  private static class ModelAncestryResponseStandardScheme extends StandardScheme<ModelAncestryResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelAncestryResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.modelId = iprot.readI32();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIT_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fitEvent = new FitEvent();
              struct.fitEvent.read(iprot);
              struct.setFitEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSFORM_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list378 = iprot.readListBegin();
                struct.transformEvents = new ArrayList<TransformEvent>(_list378.size);
                TransformEvent _elem379;
                for (int _i380 = 0; _i380 < _list378.size; ++_i380)
                {
                  _elem379 = new TransformEvent();
                  _elem379.read(iprot);
                  struct.transformEvents.add(_elem379);
                }
                iprot.readListEnd();
              }
              struct.setTransformEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelAncestryResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
      oprot.writeI32(struct.modelId);
      oprot.writeFieldEnd();
      if (struct.fitEvent != null) {
        oprot.writeFieldBegin(FIT_EVENT_FIELD_DESC);
        struct.fitEvent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.transformEvents != null) {
        oprot.writeFieldBegin(TRANSFORM_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transformEvents.size()));
          for (TransformEvent _iter381 : struct.transformEvents)
          {
            _iter381.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelAncestryResponseTupleSchemeFactory implements SchemeFactory {
    public ModelAncestryResponseTupleScheme getScheme() {
      return new ModelAncestryResponseTupleScheme();
    }
  }

  private static class ModelAncestryResponseTupleScheme extends TupleScheme<ModelAncestryResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelAncestryResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetModelId()) {
        optionals.set(0);
      }
      if (struct.isSetFitEvent()) {
        optionals.set(1);
      }
      if (struct.isSetTransformEvents()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetModelId()) {
        oprot.writeI32(struct.modelId);
      }
      if (struct.isSetFitEvent()) {
        struct.fitEvent.write(oprot);
      }
      if (struct.isSetTransformEvents()) {
        {
          oprot.writeI32(struct.transformEvents.size());
          for (TransformEvent _iter382 : struct.transformEvents)
          {
            _iter382.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelAncestryResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.modelId = iprot.readI32();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fitEvent = new FitEvent();
        struct.fitEvent.read(iprot);
        struct.setFitEventIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list383 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.transformEvents = new ArrayList<TransformEvent>(_list383.size);
          TransformEvent _elem384;
          for (int _i385 = 0; _i385 < _list383.size; ++_i385)
          {
            _elem384 = new TransformEvent();
            _elem384.read(iprot);
            struct.transformEvents.add(_elem384);
          }
        }
        struct.setTransformEventsIsSet(true);
      }
    }
  }

}

