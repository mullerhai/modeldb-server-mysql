/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class ModelResponse implements org.apache.thrift.TBase<ModelResponse, ModelResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ModelResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelResponse");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TRAINING_DATA_FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("trainingDataFrame", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PROBLEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("problemType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FEATURE_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("featureColumns", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField LABEL_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("labelColumns", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PREDICTION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("predictionColumns", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField ANNOTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("annotations", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SHA_FIELD_DESC = new org.apache.thrift.protocol.TField("sha", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FILEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filepath", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField LINEAR_MODEL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("linearModelData", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelResponseTupleSchemeFactory());
  }

  public int id; // required
  public int experimentRunId; // required
  public int experimentId; // required
  public int projectId; // required
  public DataFrame trainingDataFrame; // required
  public TransformerSpec specification; // required
  /**
   * 
   * @see ProblemType
   */
  public ProblemType problemType; // required
  public List<String> featureColumns; // required
  public List<String> labelColumns; // required
  public List<String> predictionColumns; // required
  public Map<String,Map<Integer,Double>> metrics; // required
  public List<String> annotations; // required
  public String sha; // required
  public String filepath; // required
  public String timestamp; // required
  public LinearModel linearModelData; // optional
  public String metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    EXPERIMENT_RUN_ID((short)2, "experimentRunId"),
    EXPERIMENT_ID((short)3, "experimentId"),
    PROJECT_ID((short)4, "projectId"),
    TRAINING_DATA_FRAME((short)5, "trainingDataFrame"),
    SPECIFICATION((short)6, "specification"),
    /**
     * 
     * @see ProblemType
     */
    PROBLEM_TYPE((short)7, "problemType"),
    FEATURE_COLUMNS((short)8, "featureColumns"),
    LABEL_COLUMNS((short)9, "labelColumns"),
    PREDICTION_COLUMNS((short)10, "predictionColumns"),
    METRICS((short)11, "metrics"),
    ANNOTATIONS((short)12, "annotations"),
    SHA((short)13, "sha"),
    FILEPATH((short)14, "filepath"),
    TIMESTAMP((short)15, "timestamp"),
    LINEAR_MODEL_DATA((short)16, "linearModelData"),
    METADATA((short)17, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // EXPERIMENT_RUN_ID
          return EXPERIMENT_RUN_ID;
        case 3: // EXPERIMENT_ID
          return EXPERIMENT_ID;
        case 4: // PROJECT_ID
          return PROJECT_ID;
        case 5: // TRAINING_DATA_FRAME
          return TRAINING_DATA_FRAME;
        case 6: // SPECIFICATION
          return SPECIFICATION;
        case 7: // PROBLEM_TYPE
          return PROBLEM_TYPE;
        case 8: // FEATURE_COLUMNS
          return FEATURE_COLUMNS;
        case 9: // LABEL_COLUMNS
          return LABEL_COLUMNS;
        case 10: // PREDICTION_COLUMNS
          return PREDICTION_COLUMNS;
        case 11: // METRICS
          return METRICS;
        case 12: // ANNOTATIONS
          return ANNOTATIONS;
        case 13: // SHA
          return SHA;
        case 14: // FILEPATH
          return FILEPATH;
        case 15: // TIMESTAMP
          return TIMESTAMP;
        case 16: // LINEAR_MODEL_DATA
          return LINEAR_MODEL_DATA;
        case 17: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __EXPERIMENTRUNID_ISSET_ID = 1;
  private static final int __EXPERIMENTID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LINEAR_MODEL_DATA,_Fields.METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRAINING_DATA_FRAME, new org.apache.thrift.meta_data.FieldMetaData("trainingDataFrame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
    tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformerSpec.class)));
    tmpMap.put(_Fields.PROBLEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("problemType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProblemType.class)));
    tmpMap.put(_Fields.FEATURE_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("featureColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LABEL_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("labelColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PREDICTION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("predictionColumns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.ANNOTATIONS, new org.apache.thrift.meta_data.FieldMetaData("annotations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SHA, new org.apache.thrift.meta_data.FieldMetaData("sha", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILEPATH, new org.apache.thrift.meta_data.FieldMetaData("filepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINEAR_MODEL_DATA, new org.apache.thrift.meta_data.FieldMetaData("linearModelData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LinearModel.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelResponse.class, metaDataMap);
  }

  public ModelResponse() {
  }

  public ModelResponse(
    int id,
    int experimentRunId,
    int experimentId,
    int projectId,
    DataFrame trainingDataFrame,
    TransformerSpec specification,
    ProblemType problemType,
    List<String> featureColumns,
    List<String> labelColumns,
    List<String> predictionColumns,
    Map<String,Map<Integer,Double>> metrics,
    List<String> annotations,
    String sha,
    String filepath,
    String timestamp)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    this.experimentId = experimentId;
    setExperimentIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.trainingDataFrame = trainingDataFrame;
    this.specification = specification;
    this.problemType = problemType;
    this.featureColumns = featureColumns;
    this.labelColumns = labelColumns;
    this.predictionColumns = predictionColumns;
    this.metrics = metrics;
    this.annotations = annotations;
    this.sha = sha;
    this.filepath = filepath;
    this.timestamp = timestamp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelResponse(ModelResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.experimentRunId = other.experimentRunId;
    this.experimentId = other.experimentId;
    this.projectId = other.projectId;
    if (other.isSetTrainingDataFrame()) {
      this.trainingDataFrame = new DataFrame(other.trainingDataFrame);
    }
    if (other.isSetSpecification()) {
      this.specification = new TransformerSpec(other.specification);
    }
    if (other.isSetProblemType()) {
      this.problemType = other.problemType;
    }
    if (other.isSetFeatureColumns()) {
      List<String> __this__featureColumns = new ArrayList<String>(other.featureColumns);
      this.featureColumns = __this__featureColumns;
    }
    if (other.isSetLabelColumns()) {
      List<String> __this__labelColumns = new ArrayList<String>(other.labelColumns);
      this.labelColumns = __this__labelColumns;
    }
    if (other.isSetPredictionColumns()) {
      List<String> __this__predictionColumns = new ArrayList<String>(other.predictionColumns);
      this.predictionColumns = __this__predictionColumns;
    }
    if (other.isSetMetrics()) {
      Map<String,Map<Integer,Double>> __this__metrics = new HashMap<String,Map<Integer,Double>>(other.metrics.size());
      for (Map.Entry<String, Map<Integer,Double>> other_element : other.metrics.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<Integer,Double> other_element_value = other_element.getValue();

        String __this__metrics_copy_key = other_element_key;

        Map<Integer,Double> __this__metrics_copy_value = new HashMap<Integer,Double>(other_element_value);

        __this__metrics.put(__this__metrics_copy_key, __this__metrics_copy_value);
      }
      this.metrics = __this__metrics;
    }
    if (other.isSetAnnotations()) {
      List<String> __this__annotations = new ArrayList<String>(other.annotations);
      this.annotations = __this__annotations;
    }
    if (other.isSetSha()) {
      this.sha = other.sha;
    }
    if (other.isSetFilepath()) {
      this.filepath = other.filepath;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    if (other.isSetLinearModelData()) {
      this.linearModelData = new LinearModel(other.linearModelData);
    }
    if (other.isSetMetadata()) {
      this.metadata = other.metadata;
    }
  }

  public ModelResponse deepCopy() {
    return new ModelResponse(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setExperimentRunIdIsSet(false);
    this.experimentRunId = 0;
    setExperimentIdIsSet(false);
    this.experimentId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.trainingDataFrame = null;
    this.specification = null;
    this.problemType = null;
    this.featureColumns = null;
    this.labelColumns = null;
    this.predictionColumns = null;
    this.metrics = null;
    this.annotations = null;
    this.sha = null;
    this.filepath = null;
    this.timestamp = null;
    this.linearModelData = null;
    this.metadata = null;
  }

  public int getId() {
    return this.id;
  }

  public ModelResponse setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getExperimentRunId() {
    return this.experimentRunId;
  }

  public ModelResponse setExperimentRunId(int experimentRunId) {
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    return this;
  }

  public void unsetExperimentRunId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRunId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  public void setExperimentRunIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
  }

  public int getExperimentId() {
    return this.experimentId;
  }

  public ModelResponse setExperimentId(int experimentId) {
    this.experimentId = experimentId;
    setExperimentIdIsSet(true);
    return this;
  }

  public void unsetExperimentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID);
  }

  /** Returns true if field experimentId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID);
  }

  public void setExperimentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ModelResponse setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public DataFrame getTrainingDataFrame() {
    return this.trainingDataFrame;
  }

  public ModelResponse setTrainingDataFrame(DataFrame trainingDataFrame) {
    this.trainingDataFrame = trainingDataFrame;
    return this;
  }

  public void unsetTrainingDataFrame() {
    this.trainingDataFrame = null;
  }

  /** Returns true if field trainingDataFrame is set (has been assigned a value) and false otherwise */
  public boolean isSetTrainingDataFrame() {
    return this.trainingDataFrame != null;
  }

  public void setTrainingDataFrameIsSet(boolean value) {
    if (!value) {
      this.trainingDataFrame = null;
    }
  }

  public TransformerSpec getSpecification() {
    return this.specification;
  }

  public ModelResponse setSpecification(TransformerSpec specification) {
    this.specification = specification;
    return this;
  }

  public void unsetSpecification() {
    this.specification = null;
  }

  /** Returns true if field specification is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecification() {
    return this.specification != null;
  }

  public void setSpecificationIsSet(boolean value) {
    if (!value) {
      this.specification = null;
    }
  }

  /**
   * 
   * @see ProblemType
   */
  public ProblemType getProblemType() {
    return this.problemType;
  }

  /**
   * 
   * @see ProblemType
   */
  public ModelResponse setProblemType(ProblemType problemType) {
    this.problemType = problemType;
    return this;
  }

  public void unsetProblemType() {
    this.problemType = null;
  }

  /** Returns true if field problemType is set (has been assigned a value) and false otherwise */
  public boolean isSetProblemType() {
    return this.problemType != null;
  }

  public void setProblemTypeIsSet(boolean value) {
    if (!value) {
      this.problemType = null;
    }
  }

  public int getFeatureColumnsSize() {
    return (this.featureColumns == null) ? 0 : this.featureColumns.size();
  }

  public java.util.Iterator<String> getFeatureColumnsIterator() {
    return (this.featureColumns == null) ? null : this.featureColumns.iterator();
  }

  public void addToFeatureColumns(String elem) {
    if (this.featureColumns == null) {
      this.featureColumns = new ArrayList<String>();
    }
    this.featureColumns.add(elem);
  }

  public List<String> getFeatureColumns() {
    return this.featureColumns;
  }

  public ModelResponse setFeatureColumns(List<String> featureColumns) {
    this.featureColumns = featureColumns;
    return this;
  }

  public void unsetFeatureColumns() {
    this.featureColumns = null;
  }

  /** Returns true if field featureColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatureColumns() {
    return this.featureColumns != null;
  }

  public void setFeatureColumnsIsSet(boolean value) {
    if (!value) {
      this.featureColumns = null;
    }
  }

  public int getLabelColumnsSize() {
    return (this.labelColumns == null) ? 0 : this.labelColumns.size();
  }

  public java.util.Iterator<String> getLabelColumnsIterator() {
    return (this.labelColumns == null) ? null : this.labelColumns.iterator();
  }

  public void addToLabelColumns(String elem) {
    if (this.labelColumns == null) {
      this.labelColumns = new ArrayList<String>();
    }
    this.labelColumns.add(elem);
  }

  public List<String> getLabelColumns() {
    return this.labelColumns;
  }

  public ModelResponse setLabelColumns(List<String> labelColumns) {
    this.labelColumns = labelColumns;
    return this;
  }

  public void unsetLabelColumns() {
    this.labelColumns = null;
  }

  /** Returns true if field labelColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetLabelColumns() {
    return this.labelColumns != null;
  }

  public void setLabelColumnsIsSet(boolean value) {
    if (!value) {
      this.labelColumns = null;
    }
  }

  public int getPredictionColumnsSize() {
    return (this.predictionColumns == null) ? 0 : this.predictionColumns.size();
  }

  public java.util.Iterator<String> getPredictionColumnsIterator() {
    return (this.predictionColumns == null) ? null : this.predictionColumns.iterator();
  }

  public void addToPredictionColumns(String elem) {
    if (this.predictionColumns == null) {
      this.predictionColumns = new ArrayList<String>();
    }
    this.predictionColumns.add(elem);
  }

  public List<String> getPredictionColumns() {
    return this.predictionColumns;
  }

  public ModelResponse setPredictionColumns(List<String> predictionColumns) {
    this.predictionColumns = predictionColumns;
    return this;
  }

  public void unsetPredictionColumns() {
    this.predictionColumns = null;
  }

  /** Returns true if field predictionColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictionColumns() {
    return this.predictionColumns != null;
  }

  public void setPredictionColumnsIsSet(boolean value) {
    if (!value) {
      this.predictionColumns = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public void putToMetrics(String key, Map<Integer,Double> val) {
    if (this.metrics == null) {
      this.metrics = new HashMap<String,Map<Integer,Double>>();
    }
    this.metrics.put(key, val);
  }

  public Map<String,Map<Integer,Double>> getMetrics() {
    return this.metrics;
  }

  public ModelResponse setMetrics(Map<String,Map<Integer,Double>> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public java.util.Iterator<String> getAnnotationsIterator() {
    return (this.annotations == null) ? null : this.annotations.iterator();
  }

  public void addToAnnotations(String elem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<String>();
    }
    this.annotations.add(elem);
  }

  public List<String> getAnnotations() {
    return this.annotations;
  }

  public ModelResponse setAnnotations(List<String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public String getSha() {
    return this.sha;
  }

  public ModelResponse setSha(String sha) {
    this.sha = sha;
    return this;
  }

  public void unsetSha() {
    this.sha = null;
  }

  /** Returns true if field sha is set (has been assigned a value) and false otherwise */
  public boolean isSetSha() {
    return this.sha != null;
  }

  public void setShaIsSet(boolean value) {
    if (!value) {
      this.sha = null;
    }
  }

  public String getFilepath() {
    return this.filepath;
  }

  public ModelResponse setFilepath(String filepath) {
    this.filepath = filepath;
    return this;
  }

  public void unsetFilepath() {
    this.filepath = null;
  }

  /** Returns true if field filepath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilepath() {
    return this.filepath != null;
  }

  public void setFilepathIsSet(boolean value) {
    if (!value) {
      this.filepath = null;
    }
  }

  public String getTimestamp() {
    return this.timestamp;
  }

  public ModelResponse setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public LinearModel getLinearModelData() {
    return this.linearModelData;
  }

  public ModelResponse setLinearModelData(LinearModel linearModelData) {
    this.linearModelData = linearModelData;
    return this;
  }

  public void unsetLinearModelData() {
    this.linearModelData = null;
  }

  /** Returns true if field linearModelData is set (has been assigned a value) and false otherwise */
  public boolean isSetLinearModelData() {
    return this.linearModelData != null;
  }

  public void setLinearModelDataIsSet(boolean value) {
    if (!value) {
      this.linearModelData = null;
    }
  }

  public String getMetadata() {
    return this.metadata;
  }

  public ModelResponse setMetadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case EXPERIMENT_RUN_ID:
      if (value == null) {
        unsetExperimentRunId();
      } else {
        setExperimentRunId((Integer)value);
      }
      break;

    case EXPERIMENT_ID:
      if (value == null) {
        unsetExperimentId();
      } else {
        setExperimentId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case TRAINING_DATA_FRAME:
      if (value == null) {
        unsetTrainingDataFrame();
      } else {
        setTrainingDataFrame((DataFrame)value);
      }
      break;

    case SPECIFICATION:
      if (value == null) {
        unsetSpecification();
      } else {
        setSpecification((TransformerSpec)value);
      }
      break;

    case PROBLEM_TYPE:
      if (value == null) {
        unsetProblemType();
      } else {
        setProblemType((ProblemType)value);
      }
      break;

    case FEATURE_COLUMNS:
      if (value == null) {
        unsetFeatureColumns();
      } else {
        setFeatureColumns((List<String>)value);
      }
      break;

    case LABEL_COLUMNS:
      if (value == null) {
        unsetLabelColumns();
      } else {
        setLabelColumns((List<String>)value);
      }
      break;

    case PREDICTION_COLUMNS:
      if (value == null) {
        unsetPredictionColumns();
      } else {
        setPredictionColumns((List<String>)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((Map<String,Map<Integer,Double>>)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((List<String>)value);
      }
      break;

    case SHA:
      if (value == null) {
        unsetSha();
      } else {
        setSha((String)value);
      }
      break;

    case FILEPATH:
      if (value == null) {
        unsetFilepath();
      } else {
        setFilepath((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    case LINEAR_MODEL_DATA:
      if (value == null) {
        unsetLinearModelData();
      } else {
        setLinearModelData((LinearModel)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case EXPERIMENT_RUN_ID:
      return getExperimentRunId();

    case EXPERIMENT_ID:
      return getExperimentId();

    case PROJECT_ID:
      return getProjectId();

    case TRAINING_DATA_FRAME:
      return getTrainingDataFrame();

    case SPECIFICATION:
      return getSpecification();

    case PROBLEM_TYPE:
      return getProblemType();

    case FEATURE_COLUMNS:
      return getFeatureColumns();

    case LABEL_COLUMNS:
      return getLabelColumns();

    case PREDICTION_COLUMNS:
      return getPredictionColumns();

    case METRICS:
      return getMetrics();

    case ANNOTATIONS:
      return getAnnotations();

    case SHA:
      return getSha();

    case FILEPATH:
      return getFilepath();

    case TIMESTAMP:
      return getTimestamp();

    case LINEAR_MODEL_DATA:
      return getLinearModelData();

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case EXPERIMENT_RUN_ID:
      return isSetExperimentRunId();
    case EXPERIMENT_ID:
      return isSetExperimentId();
    case PROJECT_ID:
      return isSetProjectId();
    case TRAINING_DATA_FRAME:
      return isSetTrainingDataFrame();
    case SPECIFICATION:
      return isSetSpecification();
    case PROBLEM_TYPE:
      return isSetProblemType();
    case FEATURE_COLUMNS:
      return isSetFeatureColumns();
    case LABEL_COLUMNS:
      return isSetLabelColumns();
    case PREDICTION_COLUMNS:
      return isSetPredictionColumns();
    case METRICS:
      return isSetMetrics();
    case ANNOTATIONS:
      return isSetAnnotations();
    case SHA:
      return isSetSha();
    case FILEPATH:
      return isSetFilepath();
    case TIMESTAMP:
      return isSetTimestamp();
    case LINEAR_MODEL_DATA:
      return isSetLinearModelData();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelResponse)
      return this.equals((ModelResponse)that);
    return false;
  }

  public boolean equals(ModelResponse that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_experimentRunId = true;
    boolean that_present_experimentRunId = true;
    if (this_present_experimentRunId || that_present_experimentRunId) {
      if (!(this_present_experimentRunId && that_present_experimentRunId))
        return false;
      if (this.experimentRunId != that.experimentRunId)
        return false;
    }

    boolean this_present_experimentId = true;
    boolean that_present_experimentId = true;
    if (this_present_experimentId || that_present_experimentId) {
      if (!(this_present_experimentId && that_present_experimentId))
        return false;
      if (this.experimentId != that.experimentId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_trainingDataFrame = true && this.isSetTrainingDataFrame();
    boolean that_present_trainingDataFrame = true && that.isSetTrainingDataFrame();
    if (this_present_trainingDataFrame || that_present_trainingDataFrame) {
      if (!(this_present_trainingDataFrame && that_present_trainingDataFrame))
        return false;
      if (!this.trainingDataFrame.equals(that.trainingDataFrame))
        return false;
    }

    boolean this_present_specification = true && this.isSetSpecification();
    boolean that_present_specification = true && that.isSetSpecification();
    if (this_present_specification || that_present_specification) {
      if (!(this_present_specification && that_present_specification))
        return false;
      if (!this.specification.equals(that.specification))
        return false;
    }

    boolean this_present_problemType = true && this.isSetProblemType();
    boolean that_present_problemType = true && that.isSetProblemType();
    if (this_present_problemType || that_present_problemType) {
      if (!(this_present_problemType && that_present_problemType))
        return false;
      if (!this.problemType.equals(that.problemType))
        return false;
    }

    boolean this_present_featureColumns = true && this.isSetFeatureColumns();
    boolean that_present_featureColumns = true && that.isSetFeatureColumns();
    if (this_present_featureColumns || that_present_featureColumns) {
      if (!(this_present_featureColumns && that_present_featureColumns))
        return false;
      if (!this.featureColumns.equals(that.featureColumns))
        return false;
    }

    boolean this_present_labelColumns = true && this.isSetLabelColumns();
    boolean that_present_labelColumns = true && that.isSetLabelColumns();
    if (this_present_labelColumns || that_present_labelColumns) {
      if (!(this_present_labelColumns && that_present_labelColumns))
        return false;
      if (!this.labelColumns.equals(that.labelColumns))
        return false;
    }

    boolean this_present_predictionColumns = true && this.isSetPredictionColumns();
    boolean that_present_predictionColumns = true && that.isSetPredictionColumns();
    if (this_present_predictionColumns || that_present_predictionColumns) {
      if (!(this_present_predictionColumns && that_present_predictionColumns))
        return false;
      if (!this.predictionColumns.equals(that.predictionColumns))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_sha = true && this.isSetSha();
    boolean that_present_sha = true && that.isSetSha();
    if (this_present_sha || that_present_sha) {
      if (!(this_present_sha && that_present_sha))
        return false;
      if (!this.sha.equals(that.sha))
        return false;
    }

    boolean this_present_filepath = true && this.isSetFilepath();
    boolean that_present_filepath = true && that.isSetFilepath();
    if (this_present_filepath || that_present_filepath) {
      if (!(this_present_filepath && that_present_filepath))
        return false;
      if (!this.filepath.equals(that.filepath))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_linearModelData = true && this.isSetLinearModelData();
    boolean that_present_linearModelData = true && that.isSetLinearModelData();
    if (this_present_linearModelData || that_present_linearModelData) {
      if (!(this_present_linearModelData && that_present_linearModelData))
        return false;
      if (!this.linearModelData.equals(that.linearModelData))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_experimentRunId = true;
    list.add(present_experimentRunId);
    if (present_experimentRunId)
      list.add(experimentRunId);

    boolean present_experimentId = true;
    list.add(present_experimentId);
    if (present_experimentId)
      list.add(experimentId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_trainingDataFrame = true && (isSetTrainingDataFrame());
    list.add(present_trainingDataFrame);
    if (present_trainingDataFrame)
      list.add(trainingDataFrame);

    boolean present_specification = true && (isSetSpecification());
    list.add(present_specification);
    if (present_specification)
      list.add(specification);

    boolean present_problemType = true && (isSetProblemType());
    list.add(present_problemType);
    if (present_problemType)
      list.add(problemType.getValue());

    boolean present_featureColumns = true && (isSetFeatureColumns());
    list.add(present_featureColumns);
    if (present_featureColumns)
      list.add(featureColumns);

    boolean present_labelColumns = true && (isSetLabelColumns());
    list.add(present_labelColumns);
    if (present_labelColumns)
      list.add(labelColumns);

    boolean present_predictionColumns = true && (isSetPredictionColumns());
    list.add(present_predictionColumns);
    if (present_predictionColumns)
      list.add(predictionColumns);

    boolean present_metrics = true && (isSetMetrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_annotations = true && (isSetAnnotations());
    list.add(present_annotations);
    if (present_annotations)
      list.add(annotations);

    boolean present_sha = true && (isSetSha());
    list.add(present_sha);
    if (present_sha)
      list.add(sha);

    boolean present_filepath = true && (isSetFilepath());
    list.add(present_filepath);
    if (present_filepath)
      list.add(filepath);

    boolean present_timestamp = true && (isSetTimestamp());
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_linearModelData = true && (isSetLinearModelData());
    list.add(present_linearModelData);
    if (present_linearModelData)
      list.add(linearModelData);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentId()).compareTo(other.isSetExperimentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentId, other.experimentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrainingDataFrame()).compareTo(other.isSetTrainingDataFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrainingDataFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trainingDataFrame, other.trainingDataFrame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProblemType()).compareTo(other.isSetProblemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProblemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problemType, other.problemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatureColumns()).compareTo(other.isSetFeatureColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatureColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureColumns, other.featureColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabelColumns()).compareTo(other.isSetLabelColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabelColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelColumns, other.labelColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictionColumns()).compareTo(other.isSetPredictionColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictionColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictionColumns, other.predictionColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotations()).compareTo(other.isSetAnnotations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotations, other.annotations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSha()).compareTo(other.isSetSha());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSha()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sha, other.sha);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilepath()).compareTo(other.isSetFilepath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilepath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filepath, other.filepath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinearModelData()).compareTo(other.isSetLinearModelData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinearModelData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linearModelData, other.linearModelData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelResponse(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRunId:");
    sb.append(this.experimentRunId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentId:");
    sb.append(this.experimentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("trainingDataFrame:");
    if (this.trainingDataFrame == null) {
      sb.append("null");
    } else {
      sb.append(this.trainingDataFrame);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specification:");
    if (this.specification == null) {
      sb.append("null");
    } else {
      sb.append(this.specification);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("problemType:");
    if (this.problemType == null) {
      sb.append("null");
    } else {
      sb.append(this.problemType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("featureColumns:");
    if (this.featureColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.featureColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("labelColumns:");
    if (this.labelColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.labelColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictionColumns:");
    if (this.predictionColumns == null) {
      sb.append("null");
    } else {
      sb.append(this.predictionColumns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("annotations:");
    if (this.annotations == null) {
      sb.append("null");
    } else {
      sb.append(this.annotations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sha:");
    if (this.sha == null) {
      sb.append("null");
    } else {
      sb.append(this.sha);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filepath:");
    if (this.filepath == null) {
      sb.append("null");
    } else {
      sb.append(this.filepath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    if (this.timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamp);
    }
    first = false;
    if (isSetLinearModelData()) {
      if (!first) sb.append(", ");
      sb.append("linearModelData:");
      if (this.linearModelData == null) {
        sb.append("null");
      } else {
        sb.append(this.linearModelData);
      }
      first = false;
    }
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (trainingDataFrame != null) {
      trainingDataFrame.validate();
    }
    if (specification != null) {
      specification.validate();
    }
    if (linearModelData != null) {
      linearModelData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelResponseStandardSchemeFactory implements SchemeFactory {
    public ModelResponseStandardScheme getScheme() {
      return new ModelResponseStandardScheme();
    }
  }

  private static class ModelResponseStandardScheme extends StandardScheme<ModelResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPERIMENT_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentRunId = iprot.readI32();
              struct.setExperimentRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPERIMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentId = iprot.readI32();
              struct.setExperimentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRAINING_DATA_FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.trainingDataFrame = new DataFrame();
              struct.trainingDataFrame.read(iprot);
              struct.setTrainingDataFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPECIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.specification = new TransformerSpec();
              struct.specification.read(iprot);
              struct.setSpecificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROBLEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.problemType = modeldb.ProblemType.findByValue(iprot.readI32());
              struct.setProblemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FEATURE_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                struct.featureColumns = new ArrayList<String>(_list230.size);
                String _elem231;
                for (int _i232 = 0; _i232 < _list230.size; ++_i232)
                {
                  _elem231 = iprot.readString();
                  struct.featureColumns.add(_elem231);
                }
                iprot.readListEnd();
              }
              struct.setFeatureColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LABEL_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list233 = iprot.readListBegin();
                struct.labelColumns = new ArrayList<String>(_list233.size);
                String _elem234;
                for (int _i235 = 0; _i235 < _list233.size; ++_i235)
                {
                  _elem234 = iprot.readString();
                  struct.labelColumns.add(_elem234);
                }
                iprot.readListEnd();
              }
              struct.setLabelColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PREDICTION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
                struct.predictionColumns = new ArrayList<String>(_list236.size);
                String _elem237;
                for (int _i238 = 0; _i238 < _list236.size; ++_i238)
                {
                  _elem237 = iprot.readString();
                  struct.predictionColumns.add(_elem237);
                }
                iprot.readListEnd();
              }
              struct.setPredictionColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map239 = iprot.readMapBegin();
                struct.metrics = new HashMap<String,Map<Integer,Double>>(2*_map239.size);
                String _key240;
                Map<Integer,Double> _val241;
                for (int _i242 = 0; _i242 < _map239.size; ++_i242)
                {
                  _key240 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map243 = iprot.readMapBegin();
                    _val241 = new HashMap<Integer,Double>(2*_map243.size);
                    int _key244;
                    double _val245;
                    for (int _i246 = 0; _i246 < _map243.size; ++_i246)
                    {
                      _key244 = iprot.readI32();
                      _val245 = iprot.readDouble();
                      _val241.put(_key244, _val245);
                    }
                    iprot.readMapEnd();
                  }
                  struct.metrics.put(_key240, _val241);
                }
                iprot.readMapEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ANNOTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list247 = iprot.readListBegin();
                struct.annotations = new ArrayList<String>(_list247.size);
                String _elem248;
                for (int _i249 = 0; _i249 < _list247.size; ++_i249)
                {
                  _elem248 = iprot.readString();
                  struct.annotations.add(_elem248);
                }
                iprot.readListEnd();
              }
              struct.setAnnotationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sha = iprot.readString();
              struct.setShaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FILEPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filepath = iprot.readString();
              struct.setFilepathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LINEAR_MODEL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.linearModelData = new LinearModel();
              struct.linearModelData.read(iprot);
              struct.setLinearModelDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metadata = iprot.readString();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentRunId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPERIMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.trainingDataFrame != null) {
        oprot.writeFieldBegin(TRAINING_DATA_FRAME_FIELD_DESC);
        struct.trainingDataFrame.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.specification != null) {
        oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
        struct.specification.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.problemType != null) {
        oprot.writeFieldBegin(PROBLEM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.problemType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.featureColumns != null) {
        oprot.writeFieldBegin(FEATURE_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.featureColumns.size()));
          for (String _iter250 : struct.featureColumns)
          {
            oprot.writeString(_iter250);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.labelColumns != null) {
        oprot.writeFieldBegin(LABEL_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.labelColumns.size()));
          for (String _iter251 : struct.labelColumns)
          {
            oprot.writeString(_iter251);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.predictionColumns != null) {
        oprot.writeFieldBegin(PREDICTION_COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.predictionColumns.size()));
          for (String _iter252 : struct.predictionColumns)
          {
            oprot.writeString(_iter252);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.metrics.size()));
          for (Map.Entry<String, Map<Integer,Double>> _iter253 : struct.metrics.entrySet())
          {
            oprot.writeString(_iter253.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter253.getValue().size()));
              for (Map.Entry<Integer, Double> _iter254 : _iter253.getValue().entrySet())
              {
                oprot.writeI32(_iter254.getKey());
                oprot.writeDouble(_iter254.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.annotations != null) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.annotations.size()));
          for (String _iter255 : struct.annotations)
          {
            oprot.writeString(_iter255);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sha != null) {
        oprot.writeFieldBegin(SHA_FIELD_DESC);
        oprot.writeString(struct.sha);
        oprot.writeFieldEnd();
      }
      if (struct.filepath != null) {
        oprot.writeFieldBegin(FILEPATH_FIELD_DESC);
        oprot.writeString(struct.filepath);
        oprot.writeFieldEnd();
      }
      if (struct.timestamp != null) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.linearModelData != null) {
        if (struct.isSetLinearModelData()) {
          oprot.writeFieldBegin(LINEAR_MODEL_DATA_FIELD_DESC);
          struct.linearModelData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          oprot.writeString(struct.metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelResponseTupleSchemeFactory implements SchemeFactory {
    public ModelResponseTupleScheme getScheme() {
      return new ModelResponseTupleScheme();
    }
  }

  private static class ModelResponseTupleScheme extends TupleScheme<ModelResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetExperimentRunId()) {
        optionals.set(1);
      }
      if (struct.isSetExperimentId()) {
        optionals.set(2);
      }
      if (struct.isSetProjectId()) {
        optionals.set(3);
      }
      if (struct.isSetTrainingDataFrame()) {
        optionals.set(4);
      }
      if (struct.isSetSpecification()) {
        optionals.set(5);
      }
      if (struct.isSetProblemType()) {
        optionals.set(6);
      }
      if (struct.isSetFeatureColumns()) {
        optionals.set(7);
      }
      if (struct.isSetLabelColumns()) {
        optionals.set(8);
      }
      if (struct.isSetPredictionColumns()) {
        optionals.set(9);
      }
      if (struct.isSetMetrics()) {
        optionals.set(10);
      }
      if (struct.isSetAnnotations()) {
        optionals.set(11);
      }
      if (struct.isSetSha()) {
        optionals.set(12);
      }
      if (struct.isSetFilepath()) {
        optionals.set(13);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(14);
      }
      if (struct.isSetLinearModelData()) {
        optionals.set(15);
      }
      if (struct.isSetMetadata()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetExperimentRunId()) {
        oprot.writeI32(struct.experimentRunId);
      }
      if (struct.isSetExperimentId()) {
        oprot.writeI32(struct.experimentId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetTrainingDataFrame()) {
        struct.trainingDataFrame.write(oprot);
      }
      if (struct.isSetSpecification()) {
        struct.specification.write(oprot);
      }
      if (struct.isSetProblemType()) {
        oprot.writeI32(struct.problemType.getValue());
      }
      if (struct.isSetFeatureColumns()) {
        {
          oprot.writeI32(struct.featureColumns.size());
          for (String _iter256 : struct.featureColumns)
          {
            oprot.writeString(_iter256);
          }
        }
      }
      if (struct.isSetLabelColumns()) {
        {
          oprot.writeI32(struct.labelColumns.size());
          for (String _iter257 : struct.labelColumns)
          {
            oprot.writeString(_iter257);
          }
        }
      }
      if (struct.isSetPredictionColumns()) {
        {
          oprot.writeI32(struct.predictionColumns.size());
          for (String _iter258 : struct.predictionColumns)
          {
            oprot.writeString(_iter258);
          }
        }
      }
      if (struct.isSetMetrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (Map.Entry<String, Map<Integer,Double>> _iter259 : struct.metrics.entrySet())
          {
            oprot.writeString(_iter259.getKey());
            {
              oprot.writeI32(_iter259.getValue().size());
              for (Map.Entry<Integer, Double> _iter260 : _iter259.getValue().entrySet())
              {
                oprot.writeI32(_iter260.getKey());
                oprot.writeDouble(_iter260.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetAnnotations()) {
        {
          oprot.writeI32(struct.annotations.size());
          for (String _iter261 : struct.annotations)
          {
            oprot.writeString(_iter261);
          }
        }
      }
      if (struct.isSetSha()) {
        oprot.writeString(struct.sha);
      }
      if (struct.isSetFilepath()) {
        oprot.writeString(struct.filepath);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
      if (struct.isSetLinearModelData()) {
        struct.linearModelData.write(oprot);
      }
      if (struct.isSetMetadata()) {
        oprot.writeString(struct.metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.experimentRunId = iprot.readI32();
        struct.setExperimentRunIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.experimentId = iprot.readI32();
        struct.setExperimentIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.trainingDataFrame = new DataFrame();
        struct.trainingDataFrame.read(iprot);
        struct.setTrainingDataFrameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.specification = new TransformerSpec();
        struct.specification.read(iprot);
        struct.setSpecificationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.problemType = modeldb.ProblemType.findByValue(iprot.readI32());
        struct.setProblemTypeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list262 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.featureColumns = new ArrayList<String>(_list262.size);
          String _elem263;
          for (int _i264 = 0; _i264 < _list262.size; ++_i264)
          {
            _elem263 = iprot.readString();
            struct.featureColumns.add(_elem263);
          }
        }
        struct.setFeatureColumnsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.labelColumns = new ArrayList<String>(_list265.size);
          String _elem266;
          for (int _i267 = 0; _i267 < _list265.size; ++_i267)
          {
            _elem266 = iprot.readString();
            struct.labelColumns.add(_elem266);
          }
        }
        struct.setLabelColumnsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list268 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.predictionColumns = new ArrayList<String>(_list268.size);
          String _elem269;
          for (int _i270 = 0; _i270 < _list268.size; ++_i270)
          {
            _elem269 = iprot.readString();
            struct.predictionColumns.add(_elem269);
          }
        }
        struct.setPredictionColumnsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map271 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.metrics = new HashMap<String,Map<Integer,Double>>(2*_map271.size);
          String _key272;
          Map<Integer,Double> _val273;
          for (int _i274 = 0; _i274 < _map271.size; ++_i274)
          {
            _key272 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map275 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _val273 = new HashMap<Integer,Double>(2*_map275.size);
              int _key276;
              double _val277;
              for (int _i278 = 0; _i278 < _map275.size; ++_i278)
              {
                _key276 = iprot.readI32();
                _val277 = iprot.readDouble();
                _val273.put(_key276, _val277);
              }
            }
            struct.metrics.put(_key272, _val273);
          }
        }
        struct.setMetricsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.annotations = new ArrayList<String>(_list279.size);
          String _elem280;
          for (int _i281 = 0; _i281 < _list279.size; ++_i281)
          {
            _elem280 = iprot.readString();
            struct.annotations.add(_elem280);
          }
        }
        struct.setAnnotationsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sha = iprot.readString();
        struct.setShaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.filepath = iprot.readString();
        struct.setFilepathIsSet(true);
      }
      if (incoming.get(14)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(15)) {
        struct.linearModelData = new LinearModel();
        struct.linearModelData.read(iprot);
        struct.setLinearModelDataIsSet(true);
      }
      if (incoming.get(16)) {
        struct.metadata = iprot.readString();
        struct.setMetadataIsSet(true);
      }
    }
  }

}

