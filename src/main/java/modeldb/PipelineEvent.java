/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class PipelineEvent implements org.apache.thrift.TBase<PipelineEvent, PipelineEvent._Fields>, java.io.Serializable, Cloneable, Comparable<PipelineEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PipelineEvent");

  private static final org.apache.thrift.protocol.TField PIPELINE_FIT_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineFit", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSFORM_STAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("transformStages", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FIT_STAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("fitStages", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PipelineEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PipelineEventTupleSchemeFactory());
  }

  public FitEvent pipelineFit; // required
  public List<PipelineTransformStage> transformStages; // required
  public List<PipelineFitStage> fitStages; // required
  public int experimentRunId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PIPELINE_FIT((short)1, "pipelineFit"),
    TRANSFORM_STAGES((short)2, "transformStages"),
    FIT_STAGES((short)3, "fitStages"),
    EXPERIMENT_RUN_ID((short)4, "experimentRunId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PIPELINE_FIT
          return PIPELINE_FIT;
        case 2: // TRANSFORM_STAGES
          return TRANSFORM_STAGES;
        case 3: // FIT_STAGES
          return FIT_STAGES;
        case 4: // EXPERIMENT_RUN_ID
          return EXPERIMENT_RUN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPERIMENTRUNID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PIPELINE_FIT, new org.apache.thrift.meta_data.FieldMetaData("pipelineFit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FitEvent.class)));
    tmpMap.put(_Fields.TRANSFORM_STAGES, new org.apache.thrift.meta_data.FieldMetaData("transformStages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PipelineTransformStage.class))));
    tmpMap.put(_Fields.FIT_STAGES, new org.apache.thrift.meta_data.FieldMetaData("fitStages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PipelineFitStage.class))));
    tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PipelineEvent.class, metaDataMap);
  }

  public PipelineEvent() {
  }

  public PipelineEvent(
    FitEvent pipelineFit,
    List<PipelineTransformStage> transformStages,
    List<PipelineFitStage> fitStages,
    int experimentRunId)
  {
    this();
    this.pipelineFit = pipelineFit;
    this.transformStages = transformStages;
    this.fitStages = fitStages;
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PipelineEvent(PipelineEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPipelineFit()) {
      this.pipelineFit = new FitEvent(other.pipelineFit);
    }
    if (other.isSetTransformStages()) {
      List<PipelineTransformStage> __this__transformStages = new ArrayList<PipelineTransformStage>(other.transformStages.size());
      for (PipelineTransformStage other_element : other.transformStages) {
        __this__transformStages.add(new PipelineTransformStage(other_element));
      }
      this.transformStages = __this__transformStages;
    }
    if (other.isSetFitStages()) {
      List<PipelineFitStage> __this__fitStages = new ArrayList<PipelineFitStage>(other.fitStages.size());
      for (PipelineFitStage other_element : other.fitStages) {
        __this__fitStages.add(new PipelineFitStage(other_element));
      }
      this.fitStages = __this__fitStages;
    }
    this.experimentRunId = other.experimentRunId;
  }

  public PipelineEvent deepCopy() {
    return new PipelineEvent(this);
  }

  @Override
  public void clear() {
    this.pipelineFit = null;
    this.transformStages = null;
    this.fitStages = null;
    setExperimentRunIdIsSet(false);
    this.experimentRunId = 0;
  }

  public FitEvent getPipelineFit() {
    return this.pipelineFit;
  }

  public PipelineEvent setPipelineFit(FitEvent pipelineFit) {
    this.pipelineFit = pipelineFit;
    return this;
  }

  public void unsetPipelineFit() {
    this.pipelineFit = null;
  }

  /** Returns true if field pipelineFit is set (has been assigned a value) and false otherwise */
  public boolean isSetPipelineFit() {
    return this.pipelineFit != null;
  }

  public void setPipelineFitIsSet(boolean value) {
    if (!value) {
      this.pipelineFit = null;
    }
  }

  public int getTransformStagesSize() {
    return (this.transformStages == null) ? 0 : this.transformStages.size();
  }

  public java.util.Iterator<PipelineTransformStage> getTransformStagesIterator() {
    return (this.transformStages == null) ? null : this.transformStages.iterator();
  }

  public void addToTransformStages(PipelineTransformStage elem) {
    if (this.transformStages == null) {
      this.transformStages = new ArrayList<PipelineTransformStage>();
    }
    this.transformStages.add(elem);
  }

  public List<PipelineTransformStage> getTransformStages() {
    return this.transformStages;
  }

  public PipelineEvent setTransformStages(List<PipelineTransformStage> transformStages) {
    this.transformStages = transformStages;
    return this;
  }

  public void unsetTransformStages() {
    this.transformStages = null;
  }

  /** Returns true if field transformStages is set (has been assigned a value) and false otherwise */
  public boolean isSetTransformStages() {
    return this.transformStages != null;
  }

  public void setTransformStagesIsSet(boolean value) {
    if (!value) {
      this.transformStages = null;
    }
  }

  public int getFitStagesSize() {
    return (this.fitStages == null) ? 0 : this.fitStages.size();
  }

  public java.util.Iterator<PipelineFitStage> getFitStagesIterator() {
    return (this.fitStages == null) ? null : this.fitStages.iterator();
  }

  public void addToFitStages(PipelineFitStage elem) {
    if (this.fitStages == null) {
      this.fitStages = new ArrayList<PipelineFitStage>();
    }
    this.fitStages.add(elem);
  }

  public List<PipelineFitStage> getFitStages() {
    return this.fitStages;
  }

  public PipelineEvent setFitStages(List<PipelineFitStage> fitStages) {
    this.fitStages = fitStages;
    return this;
  }

  public void unsetFitStages() {
    this.fitStages = null;
  }

  /** Returns true if field fitStages is set (has been assigned a value) and false otherwise */
  public boolean isSetFitStages() {
    return this.fitStages != null;
  }

  public void setFitStagesIsSet(boolean value) {
    if (!value) {
      this.fitStages = null;
    }
  }

  public int getExperimentRunId() {
    return this.experimentRunId;
  }

  public PipelineEvent setExperimentRunId(int experimentRunId) {
    this.experimentRunId = experimentRunId;
    setExperimentRunIdIsSet(true);
    return this;
  }

  public void unsetExperimentRunId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentRunId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
  }

  public void setExperimentRunIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PIPELINE_FIT:
      if (value == null) {
        unsetPipelineFit();
      } else {
        setPipelineFit((FitEvent)value);
      }
      break;

    case TRANSFORM_STAGES:
      if (value == null) {
        unsetTransformStages();
      } else {
        setTransformStages((List<PipelineTransformStage>)value);
      }
      break;

    case FIT_STAGES:
      if (value == null) {
        unsetFitStages();
      } else {
        setFitStages((List<PipelineFitStage>)value);
      }
      break;

    case EXPERIMENT_RUN_ID:
      if (value == null) {
        unsetExperimentRunId();
      } else {
        setExperimentRunId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PIPELINE_FIT:
      return getPipelineFit();

    case TRANSFORM_STAGES:
      return getTransformStages();

    case FIT_STAGES:
      return getFitStages();

    case EXPERIMENT_RUN_ID:
      return getExperimentRunId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PIPELINE_FIT:
      return isSetPipelineFit();
    case TRANSFORM_STAGES:
      return isSetTransformStages();
    case FIT_STAGES:
      return isSetFitStages();
    case EXPERIMENT_RUN_ID:
      return isSetExperimentRunId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PipelineEvent)
      return this.equals((PipelineEvent)that);
    return false;
  }

  public boolean equals(PipelineEvent that) {
    if (that == null)
      return false;

    boolean this_present_pipelineFit = true && this.isSetPipelineFit();
    boolean that_present_pipelineFit = true && that.isSetPipelineFit();
    if (this_present_pipelineFit || that_present_pipelineFit) {
      if (!(this_present_pipelineFit && that_present_pipelineFit))
        return false;
      if (!this.pipelineFit.equals(that.pipelineFit))
        return false;
    }

    boolean this_present_transformStages = true && this.isSetTransformStages();
    boolean that_present_transformStages = true && that.isSetTransformStages();
    if (this_present_transformStages || that_present_transformStages) {
      if (!(this_present_transformStages && that_present_transformStages))
        return false;
      if (!this.transformStages.equals(that.transformStages))
        return false;
    }

    boolean this_present_fitStages = true && this.isSetFitStages();
    boolean that_present_fitStages = true && that.isSetFitStages();
    if (this_present_fitStages || that_present_fitStages) {
      if (!(this_present_fitStages && that_present_fitStages))
        return false;
      if (!this.fitStages.equals(that.fitStages))
        return false;
    }

    boolean this_present_experimentRunId = true;
    boolean that_present_experimentRunId = true;
    if (this_present_experimentRunId || that_present_experimentRunId) {
      if (!(this_present_experimentRunId && that_present_experimentRunId))
        return false;
      if (this.experimentRunId != that.experimentRunId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pipelineFit = true && (isSetPipelineFit());
    list.add(present_pipelineFit);
    if (present_pipelineFit)
      list.add(pipelineFit);

    boolean present_transformStages = true && (isSetTransformStages());
    list.add(present_transformStages);
    if (present_transformStages)
      list.add(transformStages);

    boolean present_fitStages = true && (isSetFitStages());
    list.add(present_fitStages);
    if (present_fitStages)
      list.add(fitStages);

    boolean present_experimentRunId = true;
    list.add(present_experimentRunId);
    if (present_experimentRunId)
      list.add(experimentRunId);

    return list.hashCode();
  }

  @Override
  public int compareTo(PipelineEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPipelineFit()).compareTo(other.isSetPipelineFit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipelineFit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineFit, other.pipelineFit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransformStages()).compareTo(other.isSetTransformStages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransformStages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformStages, other.transformStages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFitStages()).compareTo(other.isSetFitStages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFitStages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fitStages, other.fitStages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PipelineEvent(");
    boolean first = true;

    sb.append("pipelineFit:");
    if (this.pipelineFit == null) {
      sb.append("null");
    } else {
      sb.append(this.pipelineFit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transformStages:");
    if (this.transformStages == null) {
      sb.append("null");
    } else {
      sb.append(this.transformStages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fitStages:");
    if (this.fitStages == null) {
      sb.append("null");
    } else {
      sb.append(this.fitStages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentRunId:");
    sb.append(this.experimentRunId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pipelineFit != null) {
      pipelineFit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PipelineEventStandardSchemeFactory implements SchemeFactory {
    public PipelineEventStandardScheme getScheme() {
      return new PipelineEventStandardScheme();
    }
  }

  private static class PipelineEventStandardScheme extends StandardScheme<PipelineEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PipelineEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PIPELINE_FIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pipelineFit = new FitEvent();
              struct.pipelineFit.read(iprot);
              struct.setPipelineFitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSFORM_STAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.transformStages = new ArrayList<PipelineTransformStage>(_list104.size);
                PipelineTransformStage _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new PipelineTransformStage();
                  _elem105.read(iprot);
                  struct.transformStages.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setTransformStagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIT_STAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.fitStages = new ArrayList<PipelineFitStage>(_list107.size);
                PipelineFitStage _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = new PipelineFitStage();
                  _elem108.read(iprot);
                  struct.fitStages.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setFitStagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPERIMENT_RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentRunId = iprot.readI32();
              struct.setExperimentRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PipelineEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pipelineFit != null) {
        oprot.writeFieldBegin(PIPELINE_FIT_FIELD_DESC);
        struct.pipelineFit.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.transformStages != null) {
        oprot.writeFieldBegin(TRANSFORM_STAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.transformStages.size()));
          for (PipelineTransformStage _iter110 : struct.transformStages)
          {
            _iter110.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fitStages != null) {
        oprot.writeFieldBegin(FIT_STAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fitStages.size()));
          for (PipelineFitStage _iter111 : struct.fitStages)
          {
            _iter111.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
      oprot.writeI32(struct.experimentRunId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PipelineEventTupleSchemeFactory implements SchemeFactory {
    public PipelineEventTupleScheme getScheme() {
      return new PipelineEventTupleScheme();
    }
  }

  private static class PipelineEventTupleScheme extends TupleScheme<PipelineEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PipelineEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPipelineFit()) {
        optionals.set(0);
      }
      if (struct.isSetTransformStages()) {
        optionals.set(1);
      }
      if (struct.isSetFitStages()) {
        optionals.set(2);
      }
      if (struct.isSetExperimentRunId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPipelineFit()) {
        struct.pipelineFit.write(oprot);
      }
      if (struct.isSetTransformStages()) {
        {
          oprot.writeI32(struct.transformStages.size());
          for (PipelineTransformStage _iter112 : struct.transformStages)
          {
            _iter112.write(oprot);
          }
        }
      }
      if (struct.isSetFitStages()) {
        {
          oprot.writeI32(struct.fitStages.size());
          for (PipelineFitStage _iter113 : struct.fitStages)
          {
            _iter113.write(oprot);
          }
        }
      }
      if (struct.isSetExperimentRunId()) {
        oprot.writeI32(struct.experimentRunId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PipelineEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pipelineFit = new FitEvent();
        struct.pipelineFit.read(iprot);
        struct.setPipelineFitIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.transformStages = new ArrayList<PipelineTransformStage>(_list114.size);
          PipelineTransformStage _elem115;
          for (int _i116 = 0; _i116 < _list114.size; ++_i116)
          {
            _elem115 = new PipelineTransformStage();
            _elem115.read(iprot);
            struct.transformStages.add(_elem115);
          }
        }
        struct.setTransformStagesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fitStages = new ArrayList<PipelineFitStage>(_list117.size);
          PipelineFitStage _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new PipelineFitStage();
            _elem118.read(iprot);
            struct.fitStages.add(_elem118);
          }
        }
        struct.setFitStagesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.experimentRunId = iprot.readI32();
        struct.setExperimentRunIdIsSet(true);
      }
    }
  }

}

