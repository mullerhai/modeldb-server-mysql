/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class LinearModelTerm implements org.apache.thrift.TBase<LinearModelTerm, LinearModelTerm._Fields>, java.io.Serializable, Cloneable, Comparable<LinearModelTerm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LinearModelTerm");

  private static final org.apache.thrift.protocol.TField COEFFICIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("coefficient", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField T_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("tStat", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField STD_ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("stdErr", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField P_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("pValue", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LinearModelTermStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LinearModelTermTupleSchemeFactory());
  }

  public double coefficient; // required
  public double tStat; // optional
  public double stdErr; // optional
  public double pValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COEFFICIENT((short)1, "coefficient"),
    T_STAT((short)2, "tStat"),
    STD_ERR((short)3, "stdErr"),
    P_VALUE((short)4, "pValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COEFFICIENT
          return COEFFICIENT;
        case 2: // T_STAT
          return T_STAT;
        case 3: // STD_ERR
          return STD_ERR;
        case 4: // P_VALUE
          return P_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COEFFICIENT_ISSET_ID = 0;
  private static final int __TSTAT_ISSET_ID = 1;
  private static final int __STDERR_ISSET_ID = 2;
  private static final int __PVALUE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.T_STAT,_Fields.STD_ERR,_Fields.P_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COEFFICIENT, new org.apache.thrift.meta_data.FieldMetaData("coefficient", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_STAT, new org.apache.thrift.meta_data.FieldMetaData("tStat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STD_ERR, new org.apache.thrift.meta_data.FieldMetaData("stdErr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.P_VALUE, new org.apache.thrift.meta_data.FieldMetaData("pValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LinearModelTerm.class, metaDataMap);
  }

  public LinearModelTerm() {
  }

  public LinearModelTerm(
    double coefficient)
  {
    this();
    this.coefficient = coefficient;
    setCoefficientIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LinearModelTerm(LinearModelTerm other) {
    __isset_bitfield = other.__isset_bitfield;
    this.coefficient = other.coefficient;
    this.tStat = other.tStat;
    this.stdErr = other.stdErr;
    this.pValue = other.pValue;
  }

  public LinearModelTerm deepCopy() {
    return new LinearModelTerm(this);
  }

  @Override
  public void clear() {
    setCoefficientIsSet(false);
    this.coefficient = 0.0;
    setTStatIsSet(false);
    this.tStat = 0.0;
    setStdErrIsSet(false);
    this.stdErr = 0.0;
    setPValueIsSet(false);
    this.pValue = 0.0;
  }

  public double getCoefficient() {
    return this.coefficient;
  }

  public LinearModelTerm setCoefficient(double coefficient) {
    this.coefficient = coefficient;
    setCoefficientIsSet(true);
    return this;
  }

  public void unsetCoefficient() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COEFFICIENT_ISSET_ID);
  }

  /** Returns true if field coefficient is set (has been assigned a value) and false otherwise */
  public boolean isSetCoefficient() {
    return EncodingUtils.testBit(__isset_bitfield, __COEFFICIENT_ISSET_ID);
  }

  public void setCoefficientIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COEFFICIENT_ISSET_ID, value);
  }

  public double getTStat() {
    return this.tStat;
  }

  public LinearModelTerm setTStat(double tStat) {
    this.tStat = tStat;
    setTStatIsSet(true);
    return this;
  }

  public void unsetTStat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TSTAT_ISSET_ID);
  }

  /** Returns true if field tStat is set (has been assigned a value) and false otherwise */
  public boolean isSetTStat() {
    return EncodingUtils.testBit(__isset_bitfield, __TSTAT_ISSET_ID);
  }

  public void setTStatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TSTAT_ISSET_ID, value);
  }

  public double getStdErr() {
    return this.stdErr;
  }

  public LinearModelTerm setStdErr(double stdErr) {
    this.stdErr = stdErr;
    setStdErrIsSet(true);
    return this;
  }

  public void unsetStdErr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STDERR_ISSET_ID);
  }

  /** Returns true if field stdErr is set (has been assigned a value) and false otherwise */
  public boolean isSetStdErr() {
    return EncodingUtils.testBit(__isset_bitfield, __STDERR_ISSET_ID);
  }

  public void setStdErrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STDERR_ISSET_ID, value);
  }

  public double getPValue() {
    return this.pValue;
  }

  public LinearModelTerm setPValue(double pValue) {
    this.pValue = pValue;
    setPValueIsSet(true);
    return this;
  }

  public void unsetPValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PVALUE_ISSET_ID);
  }

  /** Returns true if field pValue is set (has been assigned a value) and false otherwise */
  public boolean isSetPValue() {
    return EncodingUtils.testBit(__isset_bitfield, __PVALUE_ISSET_ID);
  }

  public void setPValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COEFFICIENT:
      if (value == null) {
        unsetCoefficient();
      } else {
        setCoefficient((Double)value);
      }
      break;

    case T_STAT:
      if (value == null) {
        unsetTStat();
      } else {
        setTStat((Double)value);
      }
      break;

    case STD_ERR:
      if (value == null) {
        unsetStdErr();
      } else {
        setStdErr((Double)value);
      }
      break;

    case P_VALUE:
      if (value == null) {
        unsetPValue();
      } else {
        setPValue((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COEFFICIENT:
      return getCoefficient();

    case T_STAT:
      return getTStat();

    case STD_ERR:
      return getStdErr();

    case P_VALUE:
      return getPValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COEFFICIENT:
      return isSetCoefficient();
    case T_STAT:
      return isSetTStat();
    case STD_ERR:
      return isSetStdErr();
    case P_VALUE:
      return isSetPValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LinearModelTerm)
      return this.equals((LinearModelTerm)that);
    return false;
  }

  public boolean equals(LinearModelTerm that) {
    if (that == null)
      return false;

    boolean this_present_coefficient = true;
    boolean that_present_coefficient = true;
    if (this_present_coefficient || that_present_coefficient) {
      if (!(this_present_coefficient && that_present_coefficient))
        return false;
      if (this.coefficient != that.coefficient)
        return false;
    }

    boolean this_present_tStat = true && this.isSetTStat();
    boolean that_present_tStat = true && that.isSetTStat();
    if (this_present_tStat || that_present_tStat) {
      if (!(this_present_tStat && that_present_tStat))
        return false;
      if (this.tStat != that.tStat)
        return false;
    }

    boolean this_present_stdErr = true && this.isSetStdErr();
    boolean that_present_stdErr = true && that.isSetStdErr();
    if (this_present_stdErr || that_present_stdErr) {
      if (!(this_present_stdErr && that_present_stdErr))
        return false;
      if (this.stdErr != that.stdErr)
        return false;
    }

    boolean this_present_pValue = true && this.isSetPValue();
    boolean that_present_pValue = true && that.isSetPValue();
    if (this_present_pValue || that_present_pValue) {
      if (!(this_present_pValue && that_present_pValue))
        return false;
      if (this.pValue != that.pValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_coefficient = true;
    list.add(present_coefficient);
    if (present_coefficient)
      list.add(coefficient);

    boolean present_tStat = true && (isSetTStat());
    list.add(present_tStat);
    if (present_tStat)
      list.add(tStat);

    boolean present_stdErr = true && (isSetStdErr());
    list.add(present_stdErr);
    if (present_stdErr)
      list.add(stdErr);

    boolean present_pValue = true && (isSetPValue());
    list.add(present_pValue);
    if (present_pValue)
      list.add(pValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(LinearModelTerm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCoefficient()).compareTo(other.isSetCoefficient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoefficient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coefficient, other.coefficient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTStat()).compareTo(other.isSetTStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tStat, other.tStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStdErr()).compareTo(other.isSetStdErr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStdErr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stdErr, other.stdErr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPValue()).compareTo(other.isSetPValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pValue, other.pValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LinearModelTerm(");
    boolean first = true;

    sb.append("coefficient:");
    sb.append(this.coefficient);
    first = false;
    if (isSetTStat()) {
      if (!first) sb.append(", ");
      sb.append("tStat:");
      sb.append(this.tStat);
      first = false;
    }
    if (isSetStdErr()) {
      if (!first) sb.append(", ");
      sb.append("stdErr:");
      sb.append(this.stdErr);
      first = false;
    }
    if (isSetPValue()) {
      if (!first) sb.append(", ");
      sb.append("pValue:");
      sb.append(this.pValue);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LinearModelTermStandardSchemeFactory implements SchemeFactory {
    public LinearModelTermStandardScheme getScheme() {
      return new LinearModelTermStandardScheme();
    }
  }

  private static class LinearModelTermStandardScheme extends StandardScheme<LinearModelTerm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LinearModelTerm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COEFFICIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.coefficient = iprot.readDouble();
              struct.setCoefficientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // T_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tStat = iprot.readDouble();
              struct.setTStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STD_ERR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.stdErr = iprot.readDouble();
              struct.setStdErrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // P_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pValue = iprot.readDouble();
              struct.setPValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LinearModelTerm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COEFFICIENT_FIELD_DESC);
      oprot.writeDouble(struct.coefficient);
      oprot.writeFieldEnd();
      if (struct.isSetTStat()) {
        oprot.writeFieldBegin(T_STAT_FIELD_DESC);
        oprot.writeDouble(struct.tStat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStdErr()) {
        oprot.writeFieldBegin(STD_ERR_FIELD_DESC);
        oprot.writeDouble(struct.stdErr);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPValue()) {
        oprot.writeFieldBegin(P_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.pValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LinearModelTermTupleSchemeFactory implements SchemeFactory {
    public LinearModelTermTupleScheme getScheme() {
      return new LinearModelTermTupleScheme();
    }
  }

  private static class LinearModelTermTupleScheme extends TupleScheme<LinearModelTerm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LinearModelTerm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCoefficient()) {
        optionals.set(0);
      }
      if (struct.isSetTStat()) {
        optionals.set(1);
      }
      if (struct.isSetStdErr()) {
        optionals.set(2);
      }
      if (struct.isSetPValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCoefficient()) {
        oprot.writeDouble(struct.coefficient);
      }
      if (struct.isSetTStat()) {
        oprot.writeDouble(struct.tStat);
      }
      if (struct.isSetStdErr()) {
        oprot.writeDouble(struct.stdErr);
      }
      if (struct.isSetPValue()) {
        oprot.writeDouble(struct.pValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LinearModelTerm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.coefficient = iprot.readDouble();
        struct.setCoefficientIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tStat = iprot.readDouble();
        struct.setTStatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stdErr = iprot.readDouble();
        struct.setStdErrIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pValue = iprot.readDouble();
        struct.setPValueIsSet(true);
      }
    }
  }

}

