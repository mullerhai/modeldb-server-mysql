/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package modeldb;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-01")
public class ModelDBService {

  public interface Iface {

    public int testConnection() throws org.apache.thrift.TException;

    public int storeDataFrame(DataFrame df, int experimentRunId) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException;

    public String pathForTransformer(int transformerId) throws ResourceNotFoundException, InvalidFieldException, ServerLogicException, org.apache.thrift.TException;

    public FitEventResponse storeFitEvent(FitEvent fe) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException;

    public MetricEventResponse storeMetricEvent(MetricEvent me) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException;

    public String getFilePath(Transformer t, int experimentRunId, String filename) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public TransformEventResponse storeTransformEvent(TransformEvent te) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException;

    public RandomSplitEventResponse storeRandomSplitEvent(RandomSplitEvent rse) throws ServerLogicException, org.apache.thrift.TException;

    public PipelineEventResponse storePipelineEvent(PipelineEvent pipelineEvent) throws ServerLogicException, org.apache.thrift.TException;

    public CrossValidationEventResponse storeCrossValidationEvent(CrossValidationEvent cve) throws ServerLogicException, org.apache.thrift.TException;

    public GridSearchCrossValidationEventResponse storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve) throws ServerLogicException, org.apache.thrift.TException;

    public AnnotationEventResponse storeAnnotationEvent(AnnotationEvent ae) throws ServerLogicException, org.apache.thrift.TException;

    public ProjectEventResponse storeProjectEvent(ProjectEvent pr) throws ServerLogicException, org.apache.thrift.TException;

    public ExperimentEventResponse storeExperimentEvent(ExperimentEvent er) throws ServerLogicException, org.apache.thrift.TException;

    public ExperimentRunEventResponse storeExperimentRunEvent(ExperimentRunEvent er) throws ServerLogicException, org.apache.thrift.TException;

    public boolean storeLinearModel(int modelId, LinearModel model) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public DataFrameAncestry getDataFrameAncestry(int dataFrameId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public CommonAncestor getCommonAncestor(int dfId1, int dfId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public CommonAncestor getCommonAncestorForModels(int modelId1, int modelId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public int getTrainingRowsCount(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public List<Integer> getTrainingRowsCounts(List<Integer> modelIds) throws ServerLogicException, org.apache.thrift.TException;

    public CompareHyperParametersResponse compareHyperparameters(int modelId1, int modelId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public CompareFeaturesResponse compareFeatures(int modelId1, int modelId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public Map<ProblemType,List<Integer>> groupByProblemType(List<Integer> modelIds) throws ServerLogicException, org.apache.thrift.TException;

    public List<Integer> similarModels(int modelId, List<ModelCompMetric> compMetrics, int numModels) throws ResourceNotFoundException, BadRequestException, ServerLogicException, org.apache.thrift.TException;

    public List<String> linearModelFeatureImportances(int modelId) throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException;

    public List<FeatureImportanceComparison> compareLinearModelFeatureImportances(int model1Id, int model2Id) throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException;

    public List<Integer> iterationsUntilConvergence(List<Integer> modelIds, double tolerance) throws ServerLogicException, org.apache.thrift.TException;

    public List<Integer> rankModels(List<Integer> modelIds, ModelRankMetric metric) throws ServerLogicException, org.apache.thrift.TException;

    public List<ConfidenceInterval> confidenceIntervals(int modelId, double sigLevel) throws ResourceNotFoundException, IllegalOperationException, BadRequestException, ServerLogicException, org.apache.thrift.TException;

    public List<Integer> modelsWithFeatures(List<String> featureNames) throws ServerLogicException, org.apache.thrift.TException;

    public List<Integer> modelsDerivedFromDataFrame(int dfId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public List<Integer> getProjectIds(Map<String,String> keyValuePairs) throws ServerLogicException, org.apache.thrift.TException;

    public List<Integer> getModelIds(Map<String,String> keyValuePairs) throws ServerLogicException, org.apache.thrift.TException;

    public boolean updateProject(int projectId, String key, String value) throws ServerLogicException, org.apache.thrift.TException;

    public boolean createOrUpdateScalarField(int modelId, String key, String value, String valueType) throws ServerLogicException, org.apache.thrift.TException;

    public boolean createVectorField(int modelId, String vectorName, Map<String,String> vectorConfig) throws ServerLogicException, org.apache.thrift.TException;

    public boolean updateVectorField(int modelId, String key, int valueIndex, String value, String valueType) throws ServerLogicException, org.apache.thrift.TException;

    public boolean appendToVectorField(int modelId, String vectorName, String value, String valueType) throws ServerLogicException, org.apache.thrift.TException;

    public ModelResponse getModel(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public List<ExperimentRun> getRunsInExperiment(int experimentId) throws ServerLogicException, org.apache.thrift.TException;

    public ProjectExperimentsAndRuns getRunsAndExperimentsInProject(int projId) throws ServerLogicException, org.apache.thrift.TException;

    public List<ProjectOverviewResponse> getProjectOverviews() throws ServerLogicException, org.apache.thrift.TException;

    public ExperimentRunDetailsResponse getExperimentRunDetails(int experimentRunId) throws ServerLogicException, ResourceNotFoundException, org.apache.thrift.TException;

    public List<String> originalFeatures(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public boolean storeTreeModel(int modelId, TreeModel model) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public List<TransformEventResponse> storePipelineTransformEvent(List<TransformEvent> te) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException;

    public ModelAncestryResponse computeModelAncestry(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

    public ExtractedPipelineResponse extractPipeline(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void testConnection(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeDataFrame(DataFrame df, int experimentRunId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pathForTransformer(int transformerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeFitEvent(FitEvent fe, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeMetricEvent(MetricEvent me, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFilePath(Transformer t, int experimentRunId, String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeTransformEvent(TransformEvent te, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeRandomSplitEvent(RandomSplitEvent rse, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storePipelineEvent(PipelineEvent pipelineEvent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeCrossValidationEvent(CrossValidationEvent cve, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeAnnotationEvent(AnnotationEvent ae, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeProjectEvent(ProjectEvent pr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeExperimentEvent(ExperimentEvent er, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeExperimentRunEvent(ExperimentRunEvent er, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeLinearModel(int modelId, LinearModel model, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDataFrameAncestry(int dataFrameId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCommonAncestor(int dfId1, int dfId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCommonAncestorForModels(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTrainingRowsCount(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTrainingRowsCounts(List<Integer> modelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void compareHyperparameters(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void compareFeatures(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void groupByProblemType(List<Integer> modelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void similarModels(int modelId, List<ModelCompMetric> compMetrics, int numModels, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void linearModelFeatureImportances(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void compareLinearModelFeatureImportances(int model1Id, int model2Id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void iterationsUntilConvergence(List<Integer> modelIds, double tolerance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rankModels(List<Integer> modelIds, ModelRankMetric metric, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confidenceIntervals(int modelId, double sigLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modelsWithFeatures(List<String> featureNames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modelsDerivedFromDataFrame(int dfId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectIds(Map<String,String> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getModelIds(Map<String,String> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProject(int projectId, String key, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createOrUpdateScalarField(int modelId, String key, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createVectorField(int modelId, String vectorName, Map<String,String> vectorConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVectorField(int modelId, String key, int valueIndex, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void appendToVectorField(int modelId, String vectorName, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getModel(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRunsInExperiment(int experimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRunsAndExperimentsInProject(int projId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectOverviews(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getExperimentRunDetails(int experimentRunId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void originalFeatures(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeTreeModel(int modelId, TreeModel model, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storePipelineTransformEvent(List<TransformEvent> te, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void computeModelAncestry(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void extractPipeline(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int testConnection() throws org.apache.thrift.TException
    {
      send_testConnection();
      return recv_testConnection();
    }

    public void send_testConnection() throws org.apache.thrift.TException
    {
      testConnection_args args = new testConnection_args();
      sendBase("testConnection", args);
    }

    public int recv_testConnection() throws org.apache.thrift.TException
    {
      testConnection_result result = new testConnection_result();
      receiveBase(result, "testConnection");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testConnection failed: unknown result");
    }

    public int storeDataFrame(DataFrame df, int experimentRunId) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      send_storeDataFrame(df, experimentRunId);
      return recv_storeDataFrame();
    }

    public void send_storeDataFrame(DataFrame df, int experimentRunId) throws org.apache.thrift.TException
    {
      storeDataFrame_args args = new storeDataFrame_args();
      args.setDf(df);
      args.setExperimentRunId(experimentRunId);
      sendBase("storeDataFrame", args);
    }

    public int recv_storeDataFrame() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      storeDataFrame_result result = new storeDataFrame_result();
      receiveBase(result, "storeDataFrame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ierEx != null) {
        throw result.ierEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeDataFrame failed: unknown result");
    }

    public String pathForTransformer(int transformerId) throws ResourceNotFoundException, InvalidFieldException, ServerLogicException, org.apache.thrift.TException
    {
      send_pathForTransformer(transformerId);
      return recv_pathForTransformer();
    }

    public void send_pathForTransformer(int transformerId) throws org.apache.thrift.TException
    {
      pathForTransformer_args args = new pathForTransformer_args();
      args.setTransformerId(transformerId);
      sendBase("pathForTransformer", args);
    }

    public String recv_pathForTransformer() throws ResourceNotFoundException, InvalidFieldException, ServerLogicException, org.apache.thrift.TException
    {
      pathForTransformer_result result = new pathForTransformer_result();
      receiveBase(result, "pathForTransformer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.efEx != null) {
        throw result.efEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pathForTransformer failed: unknown result");
    }

    public FitEventResponse storeFitEvent(FitEvent fe) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      send_storeFitEvent(fe);
      return recv_storeFitEvent();
    }

    public void send_storeFitEvent(FitEvent fe) throws org.apache.thrift.TException
    {
      storeFitEvent_args args = new storeFitEvent_args();
      args.setFe(fe);
      sendBase("storeFitEvent", args);
    }

    public FitEventResponse recv_storeFitEvent() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      storeFitEvent_result result = new storeFitEvent_result();
      receiveBase(result, "storeFitEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ierEx != null) {
        throw result.ierEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeFitEvent failed: unknown result");
    }

    public MetricEventResponse storeMetricEvent(MetricEvent me) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      send_storeMetricEvent(me);
      return recv_storeMetricEvent();
    }

    public void send_storeMetricEvent(MetricEvent me) throws org.apache.thrift.TException
    {
      storeMetricEvent_args args = new storeMetricEvent_args();
      args.setMe(me);
      sendBase("storeMetricEvent", args);
    }

    public MetricEventResponse recv_storeMetricEvent() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      storeMetricEvent_result result = new storeMetricEvent_result();
      receiveBase(result, "storeMetricEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ierEx != null) {
        throw result.ierEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeMetricEvent failed: unknown result");
    }

    public String getFilePath(Transformer t, int experimentRunId, String filename) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_getFilePath(t, experimentRunId, filename);
      return recv_getFilePath();
    }

    public void send_getFilePath(Transformer t, int experimentRunId, String filename) throws org.apache.thrift.TException
    {
      getFilePath_args args = new getFilePath_args();
      args.setT(t);
      args.setExperimentRunId(experimentRunId);
      args.setFilename(filename);
      sendBase("getFilePath", args);
    }

    public String recv_getFilePath() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      getFilePath_result result = new getFilePath_result();
      receiveBase(result, "getFilePath");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilePath failed: unknown result");
    }

    public TransformEventResponse storeTransformEvent(TransformEvent te) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      send_storeTransformEvent(te);
      return recv_storeTransformEvent();
    }

    public void send_storeTransformEvent(TransformEvent te) throws org.apache.thrift.TException
    {
      storeTransformEvent_args args = new storeTransformEvent_args();
      args.setTe(te);
      sendBase("storeTransformEvent", args);
    }

    public TransformEventResponse recv_storeTransformEvent() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      storeTransformEvent_result result = new storeTransformEvent_result();
      receiveBase(result, "storeTransformEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ierEx != null) {
        throw result.ierEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeTransformEvent failed: unknown result");
    }

    public RandomSplitEventResponse storeRandomSplitEvent(RandomSplitEvent rse) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeRandomSplitEvent(rse);
      return recv_storeRandomSplitEvent();
    }

    public void send_storeRandomSplitEvent(RandomSplitEvent rse) throws org.apache.thrift.TException
    {
      storeRandomSplitEvent_args args = new storeRandomSplitEvent_args();
      args.setRse(rse);
      sendBase("storeRandomSplitEvent", args);
    }

    public RandomSplitEventResponse recv_storeRandomSplitEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeRandomSplitEvent_result result = new storeRandomSplitEvent_result();
      receiveBase(result, "storeRandomSplitEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeRandomSplitEvent failed: unknown result");
    }

    public PipelineEventResponse storePipelineEvent(PipelineEvent pipelineEvent) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storePipelineEvent(pipelineEvent);
      return recv_storePipelineEvent();
    }

    public void send_storePipelineEvent(PipelineEvent pipelineEvent) throws org.apache.thrift.TException
    {
      storePipelineEvent_args args = new storePipelineEvent_args();
      args.setPipelineEvent(pipelineEvent);
      sendBase("storePipelineEvent", args);
    }

    public PipelineEventResponse recv_storePipelineEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storePipelineEvent_result result = new storePipelineEvent_result();
      receiveBase(result, "storePipelineEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storePipelineEvent failed: unknown result");
    }

    public CrossValidationEventResponse storeCrossValidationEvent(CrossValidationEvent cve) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeCrossValidationEvent(cve);
      return recv_storeCrossValidationEvent();
    }

    public void send_storeCrossValidationEvent(CrossValidationEvent cve) throws org.apache.thrift.TException
    {
      storeCrossValidationEvent_args args = new storeCrossValidationEvent_args();
      args.setCve(cve);
      sendBase("storeCrossValidationEvent", args);
    }

    public CrossValidationEventResponse recv_storeCrossValidationEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeCrossValidationEvent_result result = new storeCrossValidationEvent_result();
      receiveBase(result, "storeCrossValidationEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeCrossValidationEvent failed: unknown result");
    }

    public GridSearchCrossValidationEventResponse storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeGridSearchCrossValidationEvent(gscve);
      return recv_storeGridSearchCrossValidationEvent();
    }

    public void send_storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve) throws org.apache.thrift.TException
    {
      storeGridSearchCrossValidationEvent_args args = new storeGridSearchCrossValidationEvent_args();
      args.setGscve(gscve);
      sendBase("storeGridSearchCrossValidationEvent", args);
    }

    public GridSearchCrossValidationEventResponse recv_storeGridSearchCrossValidationEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeGridSearchCrossValidationEvent_result result = new storeGridSearchCrossValidationEvent_result();
      receiveBase(result, "storeGridSearchCrossValidationEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeGridSearchCrossValidationEvent failed: unknown result");
    }

    public AnnotationEventResponse storeAnnotationEvent(AnnotationEvent ae) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeAnnotationEvent(ae);
      return recv_storeAnnotationEvent();
    }

    public void send_storeAnnotationEvent(AnnotationEvent ae) throws org.apache.thrift.TException
    {
      storeAnnotationEvent_args args = new storeAnnotationEvent_args();
      args.setAe(ae);
      sendBase("storeAnnotationEvent", args);
    }

    public AnnotationEventResponse recv_storeAnnotationEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeAnnotationEvent_result result = new storeAnnotationEvent_result();
      receiveBase(result, "storeAnnotationEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeAnnotationEvent failed: unknown result");
    }

    public ProjectEventResponse storeProjectEvent(ProjectEvent pr) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeProjectEvent(pr);
      return recv_storeProjectEvent();
    }

    public void send_storeProjectEvent(ProjectEvent pr) throws org.apache.thrift.TException
    {
      storeProjectEvent_args args = new storeProjectEvent_args();
      args.setPr(pr);
      sendBase("storeProjectEvent", args);
    }

    public ProjectEventResponse recv_storeProjectEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeProjectEvent_result result = new storeProjectEvent_result();
      receiveBase(result, "storeProjectEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeProjectEvent failed: unknown result");
    }

    public ExperimentEventResponse storeExperimentEvent(ExperimentEvent er) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeExperimentEvent(er);
      return recv_storeExperimentEvent();
    }

    public void send_storeExperimentEvent(ExperimentEvent er) throws org.apache.thrift.TException
    {
      storeExperimentEvent_args args = new storeExperimentEvent_args();
      args.setEr(er);
      sendBase("storeExperimentEvent", args);
    }

    public ExperimentEventResponse recv_storeExperimentEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeExperimentEvent_result result = new storeExperimentEvent_result();
      receiveBase(result, "storeExperimentEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeExperimentEvent failed: unknown result");
    }

    public ExperimentRunEventResponse storeExperimentRunEvent(ExperimentRunEvent er) throws ServerLogicException, org.apache.thrift.TException
    {
      send_storeExperimentRunEvent(er);
      return recv_storeExperimentRunEvent();
    }

    public void send_storeExperimentRunEvent(ExperimentRunEvent er) throws org.apache.thrift.TException
    {
      storeExperimentRunEvent_args args = new storeExperimentRunEvent_args();
      args.setEr(er);
      sendBase("storeExperimentRunEvent", args);
    }

    public ExperimentRunEventResponse recv_storeExperimentRunEvent() throws ServerLogicException, org.apache.thrift.TException
    {
      storeExperimentRunEvent_result result = new storeExperimentRunEvent_result();
      receiveBase(result, "storeExperimentRunEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeExperimentRunEvent failed: unknown result");
    }

    public boolean storeLinearModel(int modelId, LinearModel model) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_storeLinearModel(modelId, model);
      return recv_storeLinearModel();
    }

    public void send_storeLinearModel(int modelId, LinearModel model) throws org.apache.thrift.TException
    {
      storeLinearModel_args args = new storeLinearModel_args();
      args.setModelId(modelId);
      args.setModel(model);
      sendBase("storeLinearModel", args);
    }

    public boolean recv_storeLinearModel() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      storeLinearModel_result result = new storeLinearModel_result();
      receiveBase(result, "storeLinearModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeLinearModel failed: unknown result");
    }

    public DataFrameAncestry getDataFrameAncestry(int dataFrameId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_getDataFrameAncestry(dataFrameId);
      return recv_getDataFrameAncestry();
    }

    public void send_getDataFrameAncestry(int dataFrameId) throws org.apache.thrift.TException
    {
      getDataFrameAncestry_args args = new getDataFrameAncestry_args();
      args.setDataFrameId(dataFrameId);
      sendBase("getDataFrameAncestry", args);
    }

    public DataFrameAncestry recv_getDataFrameAncestry() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      getDataFrameAncestry_result result = new getDataFrameAncestry_result();
      receiveBase(result, "getDataFrameAncestry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataFrameAncestry failed: unknown result");
    }

    public CommonAncestor getCommonAncestor(int dfId1, int dfId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_getCommonAncestor(dfId1, dfId2);
      return recv_getCommonAncestor();
    }

    public void send_getCommonAncestor(int dfId1, int dfId2) throws org.apache.thrift.TException
    {
      getCommonAncestor_args args = new getCommonAncestor_args();
      args.setDfId1(dfId1);
      args.setDfId2(dfId2);
      sendBase("getCommonAncestor", args);
    }

    public CommonAncestor recv_getCommonAncestor() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      getCommonAncestor_result result = new getCommonAncestor_result();
      receiveBase(result, "getCommonAncestor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCommonAncestor failed: unknown result");
    }

    public CommonAncestor getCommonAncestorForModels(int modelId1, int modelId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_getCommonAncestorForModels(modelId1, modelId2);
      return recv_getCommonAncestorForModels();
    }

    public void send_getCommonAncestorForModels(int modelId1, int modelId2) throws org.apache.thrift.TException
    {
      getCommonAncestorForModels_args args = new getCommonAncestorForModels_args();
      args.setModelId1(modelId1);
      args.setModelId2(modelId2);
      sendBase("getCommonAncestorForModels", args);
    }

    public CommonAncestor recv_getCommonAncestorForModels() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      getCommonAncestorForModels_result result = new getCommonAncestorForModels_result();
      receiveBase(result, "getCommonAncestorForModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCommonAncestorForModels failed: unknown result");
    }

    public int getTrainingRowsCount(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_getTrainingRowsCount(modelId);
      return recv_getTrainingRowsCount();
    }

    public void send_getTrainingRowsCount(int modelId) throws org.apache.thrift.TException
    {
      getTrainingRowsCount_args args = new getTrainingRowsCount_args();
      args.setModelId(modelId);
      sendBase("getTrainingRowsCount", args);
    }

    public int recv_getTrainingRowsCount() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      getTrainingRowsCount_result result = new getTrainingRowsCount_result();
      receiveBase(result, "getTrainingRowsCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTrainingRowsCount failed: unknown result");
    }

    public List<Integer> getTrainingRowsCounts(List<Integer> modelIds) throws ServerLogicException, org.apache.thrift.TException
    {
      send_getTrainingRowsCounts(modelIds);
      return recv_getTrainingRowsCounts();
    }

    public void send_getTrainingRowsCounts(List<Integer> modelIds) throws org.apache.thrift.TException
    {
      getTrainingRowsCounts_args args = new getTrainingRowsCounts_args();
      args.setModelIds(modelIds);
      sendBase("getTrainingRowsCounts", args);
    }

    public List<Integer> recv_getTrainingRowsCounts() throws ServerLogicException, org.apache.thrift.TException
    {
      getTrainingRowsCounts_result result = new getTrainingRowsCounts_result();
      receiveBase(result, "getTrainingRowsCounts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTrainingRowsCounts failed: unknown result");
    }

    public CompareHyperParametersResponse compareHyperparameters(int modelId1, int modelId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_compareHyperparameters(modelId1, modelId2);
      return recv_compareHyperparameters();
    }

    public void send_compareHyperparameters(int modelId1, int modelId2) throws org.apache.thrift.TException
    {
      compareHyperparameters_args args = new compareHyperparameters_args();
      args.setModelId1(modelId1);
      args.setModelId2(modelId2);
      sendBase("compareHyperparameters", args);
    }

    public CompareHyperParametersResponse recv_compareHyperparameters() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      compareHyperparameters_result result = new compareHyperparameters_result();
      receiveBase(result, "compareHyperparameters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "compareHyperparameters failed: unknown result");
    }

    public CompareFeaturesResponse compareFeatures(int modelId1, int modelId2) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_compareFeatures(modelId1, modelId2);
      return recv_compareFeatures();
    }

    public void send_compareFeatures(int modelId1, int modelId2) throws org.apache.thrift.TException
    {
      compareFeatures_args args = new compareFeatures_args();
      args.setModelId1(modelId1);
      args.setModelId2(modelId2);
      sendBase("compareFeatures", args);
    }

    public CompareFeaturesResponse recv_compareFeatures() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      compareFeatures_result result = new compareFeatures_result();
      receiveBase(result, "compareFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "compareFeatures failed: unknown result");
    }

    public Map<ProblemType,List<Integer>> groupByProblemType(List<Integer> modelIds) throws ServerLogicException, org.apache.thrift.TException
    {
      send_groupByProblemType(modelIds);
      return recv_groupByProblemType();
    }

    public void send_groupByProblemType(List<Integer> modelIds) throws org.apache.thrift.TException
    {
      groupByProblemType_args args = new groupByProblemType_args();
      args.setModelIds(modelIds);
      sendBase("groupByProblemType", args);
    }

    public Map<ProblemType,List<Integer>> recv_groupByProblemType() throws ServerLogicException, org.apache.thrift.TException
    {
      groupByProblemType_result result = new groupByProblemType_result();
      receiveBase(result, "groupByProblemType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "groupByProblemType failed: unknown result");
    }

    public List<Integer> similarModels(int modelId, List<ModelCompMetric> compMetrics, int numModels) throws ResourceNotFoundException, BadRequestException, ServerLogicException, org.apache.thrift.TException
    {
      send_similarModels(modelId, compMetrics, numModels);
      return recv_similarModels();
    }

    public void send_similarModels(int modelId, List<ModelCompMetric> compMetrics, int numModels) throws org.apache.thrift.TException
    {
      similarModels_args args = new similarModels_args();
      args.setModelId(modelId);
      args.setCompMetrics(compMetrics);
      args.setNumModels(numModels);
      sendBase("similarModels", args);
    }

    public List<Integer> recv_similarModels() throws ResourceNotFoundException, BadRequestException, ServerLogicException, org.apache.thrift.TException
    {
      similarModels_result result = new similarModels_result();
      receiveBase(result, "similarModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.brEx != null) {
        throw result.brEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "similarModels failed: unknown result");
    }

    public List<String> linearModelFeatureImportances(int modelId) throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException
    {
      send_linearModelFeatureImportances(modelId);
      return recv_linearModelFeatureImportances();
    }

    public void send_linearModelFeatureImportances(int modelId) throws org.apache.thrift.TException
    {
      linearModelFeatureImportances_args args = new linearModelFeatureImportances_args();
      args.setModelId(modelId);
      sendBase("linearModelFeatureImportances", args);
    }

    public List<String> recv_linearModelFeatureImportances() throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException
    {
      linearModelFeatureImportances_result result = new linearModelFeatureImportances_result();
      receiveBase(result, "linearModelFeatureImportances");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.ioEx != null) {
        throw result.ioEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "linearModelFeatureImportances failed: unknown result");
    }

    public List<FeatureImportanceComparison> compareLinearModelFeatureImportances(int model1Id, int model2Id) throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException
    {
      send_compareLinearModelFeatureImportances(model1Id, model2Id);
      return recv_compareLinearModelFeatureImportances();
    }

    public void send_compareLinearModelFeatureImportances(int model1Id, int model2Id) throws org.apache.thrift.TException
    {
      compareLinearModelFeatureImportances_args args = new compareLinearModelFeatureImportances_args();
      args.setModel1Id(model1Id);
      args.setModel2Id(model2Id);
      sendBase("compareLinearModelFeatureImportances", args);
    }

    public List<FeatureImportanceComparison> recv_compareLinearModelFeatureImportances() throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException
    {
      compareLinearModelFeatureImportances_result result = new compareLinearModelFeatureImportances_result();
      receiveBase(result, "compareLinearModelFeatureImportances");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.ioEx != null) {
        throw result.ioEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "compareLinearModelFeatureImportances failed: unknown result");
    }

    public List<Integer> iterationsUntilConvergence(List<Integer> modelIds, double tolerance) throws ServerLogicException, org.apache.thrift.TException
    {
      send_iterationsUntilConvergence(modelIds, tolerance);
      return recv_iterationsUntilConvergence();
    }

    public void send_iterationsUntilConvergence(List<Integer> modelIds, double tolerance) throws org.apache.thrift.TException
    {
      iterationsUntilConvergence_args args = new iterationsUntilConvergence_args();
      args.setModelIds(modelIds);
      args.setTolerance(tolerance);
      sendBase("iterationsUntilConvergence", args);
    }

    public List<Integer> recv_iterationsUntilConvergence() throws ServerLogicException, org.apache.thrift.TException
    {
      iterationsUntilConvergence_result result = new iterationsUntilConvergence_result();
      receiveBase(result, "iterationsUntilConvergence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "iterationsUntilConvergence failed: unknown result");
    }

    public List<Integer> rankModels(List<Integer> modelIds, ModelRankMetric metric) throws ServerLogicException, org.apache.thrift.TException
    {
      send_rankModels(modelIds, metric);
      return recv_rankModels();
    }

    public void send_rankModels(List<Integer> modelIds, ModelRankMetric metric) throws org.apache.thrift.TException
    {
      rankModels_args args = new rankModels_args();
      args.setModelIds(modelIds);
      args.setMetric(metric);
      sendBase("rankModels", args);
    }

    public List<Integer> recv_rankModels() throws ServerLogicException, org.apache.thrift.TException
    {
      rankModels_result result = new rankModels_result();
      receiveBase(result, "rankModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rankModels failed: unknown result");
    }

    public List<ConfidenceInterval> confidenceIntervals(int modelId, double sigLevel) throws ResourceNotFoundException, IllegalOperationException, BadRequestException, ServerLogicException, org.apache.thrift.TException
    {
      send_confidenceIntervals(modelId, sigLevel);
      return recv_confidenceIntervals();
    }

    public void send_confidenceIntervals(int modelId, double sigLevel) throws org.apache.thrift.TException
    {
      confidenceIntervals_args args = new confidenceIntervals_args();
      args.setModelId(modelId);
      args.setSigLevel(sigLevel);
      sendBase("confidenceIntervals", args);
    }

    public List<ConfidenceInterval> recv_confidenceIntervals() throws ResourceNotFoundException, IllegalOperationException, BadRequestException, ServerLogicException, org.apache.thrift.TException
    {
      confidenceIntervals_result result = new confidenceIntervals_result();
      receiveBase(result, "confidenceIntervals");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.ioEx != null) {
        throw result.ioEx;
      }
      if (result.brEx != null) {
        throw result.brEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confidenceIntervals failed: unknown result");
    }

    public List<Integer> modelsWithFeatures(List<String> featureNames) throws ServerLogicException, org.apache.thrift.TException
    {
      send_modelsWithFeatures(featureNames);
      return recv_modelsWithFeatures();
    }

    public void send_modelsWithFeatures(List<String> featureNames) throws org.apache.thrift.TException
    {
      modelsWithFeatures_args args = new modelsWithFeatures_args();
      args.setFeatureNames(featureNames);
      sendBase("modelsWithFeatures", args);
    }

    public List<Integer> recv_modelsWithFeatures() throws ServerLogicException, org.apache.thrift.TException
    {
      modelsWithFeatures_result result = new modelsWithFeatures_result();
      receiveBase(result, "modelsWithFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modelsWithFeatures failed: unknown result");
    }

    public List<Integer> modelsDerivedFromDataFrame(int dfId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_modelsDerivedFromDataFrame(dfId);
      return recv_modelsDerivedFromDataFrame();
    }

    public void send_modelsDerivedFromDataFrame(int dfId) throws org.apache.thrift.TException
    {
      modelsDerivedFromDataFrame_args args = new modelsDerivedFromDataFrame_args();
      args.setDfId(dfId);
      sendBase("modelsDerivedFromDataFrame", args);
    }

    public List<Integer> recv_modelsDerivedFromDataFrame() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      modelsDerivedFromDataFrame_result result = new modelsDerivedFromDataFrame_result();
      receiveBase(result, "modelsDerivedFromDataFrame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modelsDerivedFromDataFrame failed: unknown result");
    }

    public List<Integer> getProjectIds(Map<String,String> keyValuePairs) throws ServerLogicException, org.apache.thrift.TException
    {
      send_getProjectIds(keyValuePairs);
      return recv_getProjectIds();
    }

    public void send_getProjectIds(Map<String,String> keyValuePairs) throws org.apache.thrift.TException
    {
      getProjectIds_args args = new getProjectIds_args();
      args.setKeyValuePairs(keyValuePairs);
      sendBase("getProjectIds", args);
    }

    public List<Integer> recv_getProjectIds() throws ServerLogicException, org.apache.thrift.TException
    {
      getProjectIds_result result = new getProjectIds_result();
      receiveBase(result, "getProjectIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectIds failed: unknown result");
    }

    public List<Integer> getModelIds(Map<String,String> keyValuePairs) throws ServerLogicException, org.apache.thrift.TException
    {
      send_getModelIds(keyValuePairs);
      return recv_getModelIds();
    }

    public void send_getModelIds(Map<String,String> keyValuePairs) throws org.apache.thrift.TException
    {
      getModelIds_args args = new getModelIds_args();
      args.setKeyValuePairs(keyValuePairs);
      sendBase("getModelIds", args);
    }

    public List<Integer> recv_getModelIds() throws ServerLogicException, org.apache.thrift.TException
    {
      getModelIds_result result = new getModelIds_result();
      receiveBase(result, "getModelIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModelIds failed: unknown result");
    }

    public boolean updateProject(int projectId, String key, String value) throws ServerLogicException, org.apache.thrift.TException
    {
      send_updateProject(projectId, key, value);
      return recv_updateProject();
    }

    public void send_updateProject(int projectId, String key, String value) throws org.apache.thrift.TException
    {
      updateProject_args args = new updateProject_args();
      args.setProjectId(projectId);
      args.setKey(key);
      args.setValue(value);
      sendBase("updateProject", args);
    }

    public boolean recv_updateProject() throws ServerLogicException, org.apache.thrift.TException
    {
      updateProject_result result = new updateProject_result();
      receiveBase(result, "updateProject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProject failed: unknown result");
    }

    public boolean createOrUpdateScalarField(int modelId, String key, String value, String valueType) throws ServerLogicException, org.apache.thrift.TException
    {
      send_createOrUpdateScalarField(modelId, key, value, valueType);
      return recv_createOrUpdateScalarField();
    }

    public void send_createOrUpdateScalarField(int modelId, String key, String value, String valueType) throws org.apache.thrift.TException
    {
      createOrUpdateScalarField_args args = new createOrUpdateScalarField_args();
      args.setModelId(modelId);
      args.setKey(key);
      args.setValue(value);
      args.setValueType(valueType);
      sendBase("createOrUpdateScalarField", args);
    }

    public boolean recv_createOrUpdateScalarField() throws ServerLogicException, org.apache.thrift.TException
    {
      createOrUpdateScalarField_result result = new createOrUpdateScalarField_result();
      receiveBase(result, "createOrUpdateScalarField");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrUpdateScalarField failed: unknown result");
    }

    public boolean createVectorField(int modelId, String vectorName, Map<String,String> vectorConfig) throws ServerLogicException, org.apache.thrift.TException
    {
      send_createVectorField(modelId, vectorName, vectorConfig);
      return recv_createVectorField();
    }

    public void send_createVectorField(int modelId, String vectorName, Map<String,String> vectorConfig) throws org.apache.thrift.TException
    {
      createVectorField_args args = new createVectorField_args();
      args.setModelId(modelId);
      args.setVectorName(vectorName);
      args.setVectorConfig(vectorConfig);
      sendBase("createVectorField", args);
    }

    public boolean recv_createVectorField() throws ServerLogicException, org.apache.thrift.TException
    {
      createVectorField_result result = new createVectorField_result();
      receiveBase(result, "createVectorField");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createVectorField failed: unknown result");
    }

    public boolean updateVectorField(int modelId, String key, int valueIndex, String value, String valueType) throws ServerLogicException, org.apache.thrift.TException
    {
      send_updateVectorField(modelId, key, valueIndex, value, valueType);
      return recv_updateVectorField();
    }

    public void send_updateVectorField(int modelId, String key, int valueIndex, String value, String valueType) throws org.apache.thrift.TException
    {
      updateVectorField_args args = new updateVectorField_args();
      args.setModelId(modelId);
      args.setKey(key);
      args.setValueIndex(valueIndex);
      args.setValue(value);
      args.setValueType(valueType);
      sendBase("updateVectorField", args);
    }

    public boolean recv_updateVectorField() throws ServerLogicException, org.apache.thrift.TException
    {
      updateVectorField_result result = new updateVectorField_result();
      receiveBase(result, "updateVectorField");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVectorField failed: unknown result");
    }

    public boolean appendToVectorField(int modelId, String vectorName, String value, String valueType) throws ServerLogicException, org.apache.thrift.TException
    {
      send_appendToVectorField(modelId, vectorName, value, valueType);
      return recv_appendToVectorField();
    }

    public void send_appendToVectorField(int modelId, String vectorName, String value, String valueType) throws org.apache.thrift.TException
    {
      appendToVectorField_args args = new appendToVectorField_args();
      args.setModelId(modelId);
      args.setVectorName(vectorName);
      args.setValue(value);
      args.setValueType(valueType);
      sendBase("appendToVectorField", args);
    }

    public boolean recv_appendToVectorField() throws ServerLogicException, org.apache.thrift.TException
    {
      appendToVectorField_result result = new appendToVectorField_result();
      receiveBase(result, "appendToVectorField");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "appendToVectorField failed: unknown result");
    }

    public ModelResponse getModel(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_getModel(modelId);
      return recv_getModel();
    }

    public void send_getModel(int modelId) throws org.apache.thrift.TException
    {
      getModel_args args = new getModel_args();
      args.setModelId(modelId);
      sendBase("getModel", args);
    }

    public ModelResponse recv_getModel() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      getModel_result result = new getModel_result();
      receiveBase(result, "getModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModel failed: unknown result");
    }

    public List<ExperimentRun> getRunsInExperiment(int experimentId) throws ServerLogicException, org.apache.thrift.TException
    {
      send_getRunsInExperiment(experimentId);
      return recv_getRunsInExperiment();
    }

    public void send_getRunsInExperiment(int experimentId) throws org.apache.thrift.TException
    {
      getRunsInExperiment_args args = new getRunsInExperiment_args();
      args.setExperimentId(experimentId);
      sendBase("getRunsInExperiment", args);
    }

    public List<ExperimentRun> recv_getRunsInExperiment() throws ServerLogicException, org.apache.thrift.TException
    {
      getRunsInExperiment_result result = new getRunsInExperiment_result();
      receiveBase(result, "getRunsInExperiment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRunsInExperiment failed: unknown result");
    }

    public ProjectExperimentsAndRuns getRunsAndExperimentsInProject(int projId) throws ServerLogicException, org.apache.thrift.TException
    {
      send_getRunsAndExperimentsInProject(projId);
      return recv_getRunsAndExperimentsInProject();
    }

    public void send_getRunsAndExperimentsInProject(int projId) throws org.apache.thrift.TException
    {
      getRunsAndExperimentsInProject_args args = new getRunsAndExperimentsInProject_args();
      args.setProjId(projId);
      sendBase("getRunsAndExperimentsInProject", args);
    }

    public ProjectExperimentsAndRuns recv_getRunsAndExperimentsInProject() throws ServerLogicException, org.apache.thrift.TException
    {
      getRunsAndExperimentsInProject_result result = new getRunsAndExperimentsInProject_result();
      receiveBase(result, "getRunsAndExperimentsInProject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRunsAndExperimentsInProject failed: unknown result");
    }

    public List<ProjectOverviewResponse> getProjectOverviews() throws ServerLogicException, org.apache.thrift.TException
    {
      send_getProjectOverviews();
      return recv_getProjectOverviews();
    }

    public void send_getProjectOverviews() throws org.apache.thrift.TException
    {
      getProjectOverviews_args args = new getProjectOverviews_args();
      sendBase("getProjectOverviews", args);
    }

    public List<ProjectOverviewResponse> recv_getProjectOverviews() throws ServerLogicException, org.apache.thrift.TException
    {
      getProjectOverviews_result result = new getProjectOverviews_result();
      receiveBase(result, "getProjectOverviews");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectOverviews failed: unknown result");
    }

    public ExperimentRunDetailsResponse getExperimentRunDetails(int experimentRunId) throws ServerLogicException, ResourceNotFoundException, org.apache.thrift.TException
    {
      send_getExperimentRunDetails(experimentRunId);
      return recv_getExperimentRunDetails();
    }

    public void send_getExperimentRunDetails(int experimentRunId) throws org.apache.thrift.TException
    {
      getExperimentRunDetails_args args = new getExperimentRunDetails_args();
      args.setExperimentRunId(experimentRunId);
      sendBase("getExperimentRunDetails", args);
    }

    public ExperimentRunDetailsResponse recv_getExperimentRunDetails() throws ServerLogicException, ResourceNotFoundException, org.apache.thrift.TException
    {
      getExperimentRunDetails_result result = new getExperimentRunDetails_result();
      receiveBase(result, "getExperimentRunDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentRunDetails failed: unknown result");
    }

    public List<String> originalFeatures(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_originalFeatures(modelId);
      return recv_originalFeatures();
    }

    public void send_originalFeatures(int modelId) throws org.apache.thrift.TException
    {
      originalFeatures_args args = new originalFeatures_args();
      args.setModelId(modelId);
      sendBase("originalFeatures", args);
    }

    public List<String> recv_originalFeatures() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      originalFeatures_result result = new originalFeatures_result();
      receiveBase(result, "originalFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "originalFeatures failed: unknown result");
    }

    public boolean storeTreeModel(int modelId, TreeModel model) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_storeTreeModel(modelId, model);
      return recv_storeTreeModel();
    }

    public void send_storeTreeModel(int modelId, TreeModel model) throws org.apache.thrift.TException
    {
      storeTreeModel_args args = new storeTreeModel_args();
      args.setModelId(modelId);
      args.setModel(model);
      sendBase("storeTreeModel", args);
    }

    public boolean recv_storeTreeModel() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      storeTreeModel_result result = new storeTreeModel_result();
      receiveBase(result, "storeTreeModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeTreeModel failed: unknown result");
    }

    public List<TransformEventResponse> storePipelineTransformEvent(List<TransformEvent> te) throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      send_storePipelineTransformEvent(te);
      return recv_storePipelineTransformEvent();
    }

    public void send_storePipelineTransformEvent(List<TransformEvent> te) throws org.apache.thrift.TException
    {
      storePipelineTransformEvent_args args = new storePipelineTransformEvent_args();
      args.setTe(te);
      sendBase("storePipelineTransformEvent", args);
    }

    public List<TransformEventResponse> recv_storePipelineTransformEvent() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException
    {
      storePipelineTransformEvent_result result = new storePipelineTransformEvent_result();
      receiveBase(result, "storePipelineTransformEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ierEx != null) {
        throw result.ierEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storePipelineTransformEvent failed: unknown result");
    }

    public ModelAncestryResponse computeModelAncestry(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_computeModelAncestry(modelId);
      return recv_computeModelAncestry();
    }

    public void send_computeModelAncestry(int modelId) throws org.apache.thrift.TException
    {
      computeModelAncestry_args args = new computeModelAncestry_args();
      args.setModelId(modelId);
      sendBase("computeModelAncestry", args);
    }

    public ModelAncestryResponse recv_computeModelAncestry() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      computeModelAncestry_result result = new computeModelAncestry_result();
      receiveBase(result, "computeModelAncestry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeModelAncestry failed: unknown result");
    }

    public ExtractedPipelineResponse extractPipeline(int modelId) throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      send_extractPipeline(modelId);
      return recv_extractPipeline();
    }

    public void send_extractPipeline(int modelId) throws org.apache.thrift.TException
    {
      extractPipeline_args args = new extractPipeline_args();
      args.setModelId(modelId);
      sendBase("extractPipeline", args);
    }

    public ExtractedPipelineResponse recv_extractPipeline() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException
    {
      extractPipeline_result result = new extractPipeline_result();
      receiveBase(result, "extractPipeline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.rnfEx != null) {
        throw result.rnfEx;
      }
      if (result.svEx != null) {
        throw result.svEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "extractPipeline failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void testConnection(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testConnection_call method_call = new testConnection_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
      public testConnection_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testConnection_args args = new testConnection_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testConnection();
      }
    }

    public void storeDataFrame(DataFrame df, int experimentRunId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeDataFrame_call method_call = new storeDataFrame_call(df, experimentRunId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeDataFrame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DataFrame df;
      private int experimentRunId;
      public storeDataFrame_call(DataFrame df, int experimentRunId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.df = df;
        this.experimentRunId = experimentRunId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeDataFrame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeDataFrame_args args = new storeDataFrame_args();
        args.setDf(df);
        args.setExperimentRunId(experimentRunId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeDataFrame();
      }
    }

    public void pathForTransformer(int transformerId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pathForTransformer_call method_call = new pathForTransformer_call(transformerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pathForTransformer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int transformerId;
      public pathForTransformer_call(int transformerId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transformerId = transformerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pathForTransformer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pathForTransformer_args args = new pathForTransformer_args();
        args.setTransformerId(transformerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ResourceNotFoundException, InvalidFieldException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pathForTransformer();
      }
    }

    public void storeFitEvent(FitEvent fe, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeFitEvent_call method_call = new storeFitEvent_call(fe, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeFitEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FitEvent fe;
      public storeFitEvent_call(FitEvent fe, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fe = fe;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeFitEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeFitEvent_args args = new storeFitEvent_args();
        args.setFe(fe);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FitEventResponse getResult() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeFitEvent();
      }
    }

    public void storeMetricEvent(MetricEvent me, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeMetricEvent_call method_call = new storeMetricEvent_call(me, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeMetricEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MetricEvent me;
      public storeMetricEvent_call(MetricEvent me, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.me = me;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeMetricEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeMetricEvent_args args = new storeMetricEvent_args();
        args.setMe(me);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MetricEventResponse getResult() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeMetricEvent();
      }
    }

    public void getFilePath(Transformer t, int experimentRunId, String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFilePath_call method_call = new getFilePath_call(t, experimentRunId, filename, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFilePath_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Transformer t;
      private int experimentRunId;
      private String filename;
      public getFilePath_call(Transformer t, int experimentRunId, String filename, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.t = t;
        this.experimentRunId = experimentRunId;
        this.filename = filename;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilePath", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilePath_args args = new getFilePath_args();
        args.setT(t);
        args.setExperimentRunId(experimentRunId);
        args.setFilename(filename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilePath();
      }
    }

    public void storeTransformEvent(TransformEvent te, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeTransformEvent_call method_call = new storeTransformEvent_call(te, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeTransformEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransformEvent te;
      public storeTransformEvent_call(TransformEvent te, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.te = te;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeTransformEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeTransformEvent_args args = new storeTransformEvent_args();
        args.setTe(te);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransformEventResponse getResult() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeTransformEvent();
      }
    }

    public void storeRandomSplitEvent(RandomSplitEvent rse, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeRandomSplitEvent_call method_call = new storeRandomSplitEvent_call(rse, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeRandomSplitEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RandomSplitEvent rse;
      public storeRandomSplitEvent_call(RandomSplitEvent rse, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rse = rse;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeRandomSplitEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeRandomSplitEvent_args args = new storeRandomSplitEvent_args();
        args.setRse(rse);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RandomSplitEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeRandomSplitEvent();
      }
    }

    public void storePipelineEvent(PipelineEvent pipelineEvent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storePipelineEvent_call method_call = new storePipelineEvent_call(pipelineEvent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storePipelineEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PipelineEvent pipelineEvent;
      public storePipelineEvent_call(PipelineEvent pipelineEvent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pipelineEvent = pipelineEvent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storePipelineEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storePipelineEvent_args args = new storePipelineEvent_args();
        args.setPipelineEvent(pipelineEvent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PipelineEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storePipelineEvent();
      }
    }

    public void storeCrossValidationEvent(CrossValidationEvent cve, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeCrossValidationEvent_call method_call = new storeCrossValidationEvent_call(cve, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeCrossValidationEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CrossValidationEvent cve;
      public storeCrossValidationEvent_call(CrossValidationEvent cve, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cve = cve;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeCrossValidationEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeCrossValidationEvent_args args = new storeCrossValidationEvent_args();
        args.setCve(cve);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CrossValidationEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeCrossValidationEvent();
      }
    }

    public void storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeGridSearchCrossValidationEvent_call method_call = new storeGridSearchCrossValidationEvent_call(gscve, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeGridSearchCrossValidationEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GridSearchCrossValidationEvent gscve;
      public storeGridSearchCrossValidationEvent_call(GridSearchCrossValidationEvent gscve, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gscve = gscve;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeGridSearchCrossValidationEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeGridSearchCrossValidationEvent_args args = new storeGridSearchCrossValidationEvent_args();
        args.setGscve(gscve);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GridSearchCrossValidationEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeGridSearchCrossValidationEvent();
      }
    }

    public void storeAnnotationEvent(AnnotationEvent ae, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeAnnotationEvent_call method_call = new storeAnnotationEvent_call(ae, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeAnnotationEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AnnotationEvent ae;
      public storeAnnotationEvent_call(AnnotationEvent ae, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ae = ae;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeAnnotationEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeAnnotationEvent_args args = new storeAnnotationEvent_args();
        args.setAe(ae);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AnnotationEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeAnnotationEvent();
      }
    }

    public void storeProjectEvent(ProjectEvent pr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeProjectEvent_call method_call = new storeProjectEvent_call(pr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeProjectEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProjectEvent pr;
      public storeProjectEvent_call(ProjectEvent pr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pr = pr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeProjectEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeProjectEvent_args args = new storeProjectEvent_args();
        args.setPr(pr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProjectEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeProjectEvent();
      }
    }

    public void storeExperimentEvent(ExperimentEvent er, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeExperimentEvent_call method_call = new storeExperimentEvent_call(er, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeExperimentEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ExperimentEvent er;
      public storeExperimentEvent_call(ExperimentEvent er, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.er = er;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeExperimentEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeExperimentEvent_args args = new storeExperimentEvent_args();
        args.setEr(er);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExperimentEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeExperimentEvent();
      }
    }

    public void storeExperimentRunEvent(ExperimentRunEvent er, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeExperimentRunEvent_call method_call = new storeExperimentRunEvent_call(er, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeExperimentRunEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ExperimentRunEvent er;
      public storeExperimentRunEvent_call(ExperimentRunEvent er, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.er = er;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeExperimentRunEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeExperimentRunEvent_args args = new storeExperimentRunEvent_args();
        args.setEr(er);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExperimentRunEventResponse getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeExperimentRunEvent();
      }
    }

    public void storeLinearModel(int modelId, LinearModel model, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeLinearModel_call method_call = new storeLinearModel_call(modelId, model, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeLinearModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private LinearModel model;
      public storeLinearModel_call(int modelId, LinearModel model, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.model = model;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeLinearModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeLinearModel_args args = new storeLinearModel_args();
        args.setModelId(modelId);
        args.setModel(model);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeLinearModel();
      }
    }

    public void getDataFrameAncestry(int dataFrameId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDataFrameAncestry_call method_call = new getDataFrameAncestry_call(dataFrameId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDataFrameAncestry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dataFrameId;
      public getDataFrameAncestry_call(int dataFrameId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dataFrameId = dataFrameId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataFrameAncestry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDataFrameAncestry_args args = new getDataFrameAncestry_args();
        args.setDataFrameId(dataFrameId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DataFrameAncestry getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDataFrameAncestry();
      }
    }

    public void getCommonAncestor(int dfId1, int dfId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCommonAncestor_call method_call = new getCommonAncestor_call(dfId1, dfId2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCommonAncestor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dfId1;
      private int dfId2;
      public getCommonAncestor_call(int dfId1, int dfId2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dfId1 = dfId1;
        this.dfId2 = dfId2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCommonAncestor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCommonAncestor_args args = new getCommonAncestor_args();
        args.setDfId1(dfId1);
        args.setDfId2(dfId2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommonAncestor getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCommonAncestor();
      }
    }

    public void getCommonAncestorForModels(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCommonAncestorForModels_call method_call = new getCommonAncestorForModels_call(modelId1, modelId2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCommonAncestorForModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId1;
      private int modelId2;
      public getCommonAncestorForModels_call(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId1 = modelId1;
        this.modelId2 = modelId2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCommonAncestorForModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCommonAncestorForModels_args args = new getCommonAncestorForModels_args();
        args.setModelId1(modelId1);
        args.setModelId2(modelId2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommonAncestor getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCommonAncestorForModels();
      }
    }

    public void getTrainingRowsCount(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTrainingRowsCount_call method_call = new getTrainingRowsCount_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTrainingRowsCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      public getTrainingRowsCount_call(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTrainingRowsCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTrainingRowsCount_args args = new getTrainingRowsCount_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTrainingRowsCount();
      }
    }

    public void getTrainingRowsCounts(List<Integer> modelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTrainingRowsCounts_call method_call = new getTrainingRowsCounts_call(modelIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTrainingRowsCounts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> modelIds;
      public getTrainingRowsCounts_call(List<Integer> modelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelIds = modelIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTrainingRowsCounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTrainingRowsCounts_args args = new getTrainingRowsCounts_args();
        args.setModelIds(modelIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTrainingRowsCounts();
      }
    }

    public void compareHyperparameters(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compareHyperparameters_call method_call = new compareHyperparameters_call(modelId1, modelId2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compareHyperparameters_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId1;
      private int modelId2;
      public compareHyperparameters_call(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId1 = modelId1;
        this.modelId2 = modelId2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compareHyperparameters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compareHyperparameters_args args = new compareHyperparameters_args();
        args.setModelId1(modelId1);
        args.setModelId2(modelId2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompareHyperParametersResponse getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compareHyperparameters();
      }
    }

    public void compareFeatures(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compareFeatures_call method_call = new compareFeatures_call(modelId1, modelId2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compareFeatures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId1;
      private int modelId2;
      public compareFeatures_call(int modelId1, int modelId2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId1 = modelId1;
        this.modelId2 = modelId2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compareFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compareFeatures_args args = new compareFeatures_args();
        args.setModelId1(modelId1);
        args.setModelId2(modelId2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompareFeaturesResponse getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compareFeatures();
      }
    }

    public void groupByProblemType(List<Integer> modelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      groupByProblemType_call method_call = new groupByProblemType_call(modelIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class groupByProblemType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> modelIds;
      public groupByProblemType_call(List<Integer> modelIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelIds = modelIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("groupByProblemType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        groupByProblemType_args args = new groupByProblemType_args();
        args.setModelIds(modelIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<ProblemType,List<Integer>> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_groupByProblemType();
      }
    }

    public void similarModels(int modelId, List<ModelCompMetric> compMetrics, int numModels, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      similarModels_call method_call = new similarModels_call(modelId, compMetrics, numModels, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class similarModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private List<ModelCompMetric> compMetrics;
      private int numModels;
      public similarModels_call(int modelId, List<ModelCompMetric> compMetrics, int numModels, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.compMetrics = compMetrics;
        this.numModels = numModels;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("similarModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        similarModels_args args = new similarModels_args();
        args.setModelId(modelId);
        args.setCompMetrics(compMetrics);
        args.setNumModels(numModels);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ResourceNotFoundException, BadRequestException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_similarModels();
      }
    }

    public void linearModelFeatureImportances(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      linearModelFeatureImportances_call method_call = new linearModelFeatureImportances_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class linearModelFeatureImportances_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      public linearModelFeatureImportances_call(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("linearModelFeatureImportances", org.apache.thrift.protocol.TMessageType.CALL, 0));
        linearModelFeatureImportances_args args = new linearModelFeatureImportances_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_linearModelFeatureImportances();
      }
    }

    public void compareLinearModelFeatureImportances(int model1Id, int model2Id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compareLinearModelFeatureImportances_call method_call = new compareLinearModelFeatureImportances_call(model1Id, model2Id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compareLinearModelFeatureImportances_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int model1Id;
      private int model2Id;
      public compareLinearModelFeatureImportances_call(int model1Id, int model2Id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.model1Id = model1Id;
        this.model2Id = model2Id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compareLinearModelFeatureImportances", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compareLinearModelFeatureImportances_args args = new compareLinearModelFeatureImportances_args();
        args.setModel1Id(model1Id);
        args.setModel2Id(model2Id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FeatureImportanceComparison> getResult() throws ResourceNotFoundException, IllegalOperationException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compareLinearModelFeatureImportances();
      }
    }

    public void iterationsUntilConvergence(List<Integer> modelIds, double tolerance, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      iterationsUntilConvergence_call method_call = new iterationsUntilConvergence_call(modelIds, tolerance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class iterationsUntilConvergence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> modelIds;
      private double tolerance;
      public iterationsUntilConvergence_call(List<Integer> modelIds, double tolerance, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelIds = modelIds;
        this.tolerance = tolerance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("iterationsUntilConvergence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        iterationsUntilConvergence_args args = new iterationsUntilConvergence_args();
        args.setModelIds(modelIds);
        args.setTolerance(tolerance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_iterationsUntilConvergence();
      }
    }

    public void rankModels(List<Integer> modelIds, ModelRankMetric metric, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rankModels_call method_call = new rankModels_call(modelIds, metric, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rankModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> modelIds;
      private ModelRankMetric metric;
      public rankModels_call(List<Integer> modelIds, ModelRankMetric metric, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelIds = modelIds;
        this.metric = metric;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rankModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rankModels_args args = new rankModels_args();
        args.setModelIds(modelIds);
        args.setMetric(metric);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rankModels();
      }
    }

    public void confidenceIntervals(int modelId, double sigLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confidenceIntervals_call method_call = new confidenceIntervals_call(modelId, sigLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confidenceIntervals_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private double sigLevel;
      public confidenceIntervals_call(int modelId, double sigLevel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.sigLevel = sigLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confidenceIntervals", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confidenceIntervals_args args = new confidenceIntervals_args();
        args.setModelId(modelId);
        args.setSigLevel(sigLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ConfidenceInterval> getResult() throws ResourceNotFoundException, IllegalOperationException, BadRequestException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confidenceIntervals();
      }
    }

    public void modelsWithFeatures(List<String> featureNames, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modelsWithFeatures_call method_call = new modelsWithFeatures_call(featureNames, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modelsWithFeatures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> featureNames;
      public modelsWithFeatures_call(List<String> featureNames, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.featureNames = featureNames;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modelsWithFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modelsWithFeatures_args args = new modelsWithFeatures_args();
        args.setFeatureNames(featureNames);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modelsWithFeatures();
      }
    }

    public void modelsDerivedFromDataFrame(int dfId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modelsDerivedFromDataFrame_call method_call = new modelsDerivedFromDataFrame_call(dfId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modelsDerivedFromDataFrame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dfId;
      public modelsDerivedFromDataFrame_call(int dfId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dfId = dfId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modelsDerivedFromDataFrame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modelsDerivedFromDataFrame_args args = new modelsDerivedFromDataFrame_args();
        args.setDfId(dfId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modelsDerivedFromDataFrame();
      }
    }

    public void getProjectIds(Map<String,String> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectIds_call method_call = new getProjectIds_call(keyValuePairs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> keyValuePairs;
      public getProjectIds_call(Map<String,String> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyValuePairs = keyValuePairs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectIds_args args = new getProjectIds_args();
        args.setKeyValuePairs(keyValuePairs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectIds();
      }
    }

    public void getModelIds(Map<String,String> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModelIds_call method_call = new getModelIds_call(keyValuePairs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModelIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> keyValuePairs;
      public getModelIds_call(Map<String,String> keyValuePairs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyValuePairs = keyValuePairs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModelIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModelIds_args args = new getModelIds_args();
        args.setKeyValuePairs(keyValuePairs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModelIds();
      }
    }

    public void updateProject(int projectId, String key, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProject_call method_call = new updateProject_call(projectId, key, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      private String key;
      private String value;
      public updateProject_call(int projectId, String key, String value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
        this.key = key;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProject_args args = new updateProject_args();
        args.setProjectId(projectId);
        args.setKey(key);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProject();
      }
    }

    public void createOrUpdateScalarField(int modelId, String key, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrUpdateScalarField_call method_call = new createOrUpdateScalarField_call(modelId, key, value, valueType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrUpdateScalarField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private String key;
      private String value;
      private String valueType;
      public createOrUpdateScalarField_call(int modelId, String key, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.key = key;
        this.value = value;
        this.valueType = valueType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrUpdateScalarField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrUpdateScalarField_args args = new createOrUpdateScalarField_args();
        args.setModelId(modelId);
        args.setKey(key);
        args.setValue(value);
        args.setValueType(valueType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrUpdateScalarField();
      }
    }

    public void createVectorField(int modelId, String vectorName, Map<String,String> vectorConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVectorField_call method_call = new createVectorField_call(modelId, vectorName, vectorConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVectorField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private String vectorName;
      private Map<String,String> vectorConfig;
      public createVectorField_call(int modelId, String vectorName, Map<String,String> vectorConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.vectorName = vectorName;
        this.vectorConfig = vectorConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVectorField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVectorField_args args = new createVectorField_args();
        args.setModelId(modelId);
        args.setVectorName(vectorName);
        args.setVectorConfig(vectorConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createVectorField();
      }
    }

    public void updateVectorField(int modelId, String key, int valueIndex, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVectorField_call method_call = new updateVectorField_call(modelId, key, valueIndex, value, valueType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVectorField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private String key;
      private int valueIndex;
      private String value;
      private String valueType;
      public updateVectorField_call(int modelId, String key, int valueIndex, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.key = key;
        this.valueIndex = valueIndex;
        this.value = value;
        this.valueType = valueType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVectorField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVectorField_args args = new updateVectorField_args();
        args.setModelId(modelId);
        args.setKey(key);
        args.setValueIndex(valueIndex);
        args.setValue(value);
        args.setValueType(valueType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVectorField();
      }
    }

    public void appendToVectorField(int modelId, String vectorName, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      appendToVectorField_call method_call = new appendToVectorField_call(modelId, vectorName, value, valueType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class appendToVectorField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private String vectorName;
      private String value;
      private String valueType;
      public appendToVectorField_call(int modelId, String vectorName, String value, String valueType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.vectorName = vectorName;
        this.value = value;
        this.valueType = valueType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("appendToVectorField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        appendToVectorField_args args = new appendToVectorField_args();
        args.setModelId(modelId);
        args.setVectorName(vectorName);
        args.setValue(value);
        args.setValueType(valueType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_appendToVectorField();
      }
    }

    public void getModel(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModel_call method_call = new getModel_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      public getModel_call(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModel_args args = new getModel_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ModelResponse getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModel();
      }
    }

    public void getRunsInExperiment(int experimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRunsInExperiment_call method_call = new getRunsInExperiment_call(experimentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRunsInExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int experimentId;
      public getRunsInExperiment_call(int experimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experimentId = experimentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRunsInExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRunsInExperiment_args args = new getRunsInExperiment_args();
        args.setExperimentId(experimentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ExperimentRun> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRunsInExperiment();
      }
    }

    public void getRunsAndExperimentsInProject(int projId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRunsAndExperimentsInProject_call method_call = new getRunsAndExperimentsInProject_call(projId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRunsAndExperimentsInProject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projId;
      public getRunsAndExperimentsInProject_call(int projId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projId = projId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRunsAndExperimentsInProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRunsAndExperimentsInProject_args args = new getRunsAndExperimentsInProject_args();
        args.setProjId(projId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProjectExperimentsAndRuns getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRunsAndExperimentsInProject();
      }
    }

    public void getProjectOverviews(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectOverviews_call method_call = new getProjectOverviews_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectOverviews_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getProjectOverviews_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectOverviews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectOverviews_args args = new getProjectOverviews_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectOverviewResponse> getResult() throws ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectOverviews();
      }
    }

    public void getExperimentRunDetails(int experimentRunId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExperimentRunDetails_call method_call = new getExperimentRunDetails_call(experimentRunId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExperimentRunDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int experimentRunId;
      public getExperimentRunDetails_call(int experimentRunId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.experimentRunId = experimentRunId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperimentRunDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExperimentRunDetails_args args = new getExperimentRunDetails_args();
        args.setExperimentRunId(experimentRunId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExperimentRunDetailsResponse getResult() throws ServerLogicException, ResourceNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getExperimentRunDetails();
      }
    }

    public void originalFeatures(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      originalFeatures_call method_call = new originalFeatures_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class originalFeatures_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      public originalFeatures_call(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("originalFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        originalFeatures_args args = new originalFeatures_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_originalFeatures();
      }
    }

    public void storeTreeModel(int modelId, TreeModel model, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeTreeModel_call method_call = new storeTreeModel_call(modelId, model, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeTreeModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      private TreeModel model;
      public storeTreeModel_call(int modelId, TreeModel model, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
        this.model = model;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeTreeModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeTreeModel_args args = new storeTreeModel_args();
        args.setModelId(modelId);
        args.setModel(model);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Boolean getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeTreeModel();
      }
    }

    public void storePipelineTransformEvent(List<TransformEvent> te, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storePipelineTransformEvent_call method_call = new storePipelineTransformEvent_call(te, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storePipelineTransformEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TransformEvent> te;
      public storePipelineTransformEvent_call(List<TransformEvent> te, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.te = te;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storePipelineTransformEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storePipelineTransformEvent_args args = new storePipelineTransformEvent_args();
        args.setTe(te);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TransformEventResponse> getResult() throws InvalidExperimentRunException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storePipelineTransformEvent();
      }
    }

    public void computeModelAncestry(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeModelAncestry_call method_call = new computeModelAncestry_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeModelAncestry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      public computeModelAncestry_call(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeModelAncestry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeModelAncestry_args args = new computeModelAncestry_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ModelAncestryResponse getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeModelAncestry();
      }
    }

    public void extractPipeline(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      extractPipeline_call method_call = new extractPipeline_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class extractPipeline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int modelId;
      public extractPipeline_call(int modelId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("extractPipeline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        extractPipeline_args args = new extractPipeline_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExtractedPipelineResponse getResult() throws ResourceNotFoundException, ServerLogicException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_extractPipeline();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("testConnection", new testConnection());
      processMap.put("storeDataFrame", new storeDataFrame());
      processMap.put("pathForTransformer", new pathForTransformer());
      processMap.put("storeFitEvent", new storeFitEvent());
      processMap.put("storeMetricEvent", new storeMetricEvent());
      processMap.put("getFilePath", new getFilePath());
      processMap.put("storeTransformEvent", new storeTransformEvent());
      processMap.put("storeRandomSplitEvent", new storeRandomSplitEvent());
      processMap.put("storePipelineEvent", new storePipelineEvent());
      processMap.put("storeCrossValidationEvent", new storeCrossValidationEvent());
      processMap.put("storeGridSearchCrossValidationEvent", new storeGridSearchCrossValidationEvent());
      processMap.put("storeAnnotationEvent", new storeAnnotationEvent());
      processMap.put("storeProjectEvent", new storeProjectEvent());
      processMap.put("storeExperimentEvent", new storeExperimentEvent());
      processMap.put("storeExperimentRunEvent", new storeExperimentRunEvent());
      processMap.put("storeLinearModel", new storeLinearModel());
      processMap.put("getDataFrameAncestry", new getDataFrameAncestry());
      processMap.put("getCommonAncestor", new getCommonAncestor());
      processMap.put("getCommonAncestorForModels", new getCommonAncestorForModels());
      processMap.put("getTrainingRowsCount", new getTrainingRowsCount());
      processMap.put("getTrainingRowsCounts", new getTrainingRowsCounts());
      processMap.put("compareHyperparameters", new compareHyperparameters());
      processMap.put("compareFeatures", new compareFeatures());
      processMap.put("groupByProblemType", new groupByProblemType());
      processMap.put("similarModels", new similarModels());
      processMap.put("linearModelFeatureImportances", new linearModelFeatureImportances());
      processMap.put("compareLinearModelFeatureImportances", new compareLinearModelFeatureImportances());
      processMap.put("iterationsUntilConvergence", new iterationsUntilConvergence());
      processMap.put("rankModels", new rankModels());
      processMap.put("confidenceIntervals", new confidenceIntervals());
      processMap.put("modelsWithFeatures", new modelsWithFeatures());
      processMap.put("modelsDerivedFromDataFrame", new modelsDerivedFromDataFrame());
      processMap.put("getProjectIds", new getProjectIds());
      processMap.put("getModelIds", new getModelIds());
      processMap.put("updateProject", new updateProject());
      processMap.put("createOrUpdateScalarField", new createOrUpdateScalarField());
      processMap.put("createVectorField", new createVectorField());
      processMap.put("updateVectorField", new updateVectorField());
      processMap.put("appendToVectorField", new appendToVectorField());
      processMap.put("getModel", new getModel());
      processMap.put("getRunsInExperiment", new getRunsInExperiment());
      processMap.put("getRunsAndExperimentsInProject", new getRunsAndExperimentsInProject());
      processMap.put("getProjectOverviews", new getProjectOverviews());
      processMap.put("getExperimentRunDetails", new getExperimentRunDetails());
      processMap.put("originalFeatures", new originalFeatures());
      processMap.put("storeTreeModel", new storeTreeModel());
      processMap.put("storePipelineTransformEvent", new storePipelineTransformEvent());
      processMap.put("computeModelAncestry", new computeModelAncestry());
      processMap.put("extractPipeline", new extractPipeline());
      return processMap;
    }

    public static class testConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testConnection_args> {
      public testConnection() {
        super("testConnection");
      }

      public testConnection_args getEmptyArgsInstance() {
        return new testConnection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public testConnection_result getResult(I iface, testConnection_args args) throws org.apache.thrift.TException {
        testConnection_result result = new testConnection_result();
        result.success = iface.testConnection();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class storeDataFrame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeDataFrame_args> {
      public storeDataFrame() {
        super("storeDataFrame");
      }

      public storeDataFrame_args getEmptyArgsInstance() {
        return new storeDataFrame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeDataFrame_result getResult(I iface, storeDataFrame_args args) throws org.apache.thrift.TException {
        storeDataFrame_result result = new storeDataFrame_result();
        try {
          result.success = iface.storeDataFrame(args.df, args.experimentRunId);
          result.setSuccessIsSet(true);
        } catch (InvalidExperimentRunException ierEx) {
          result.ierEx = ierEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class pathForTransformer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pathForTransformer_args> {
      public pathForTransformer() {
        super("pathForTransformer");
      }

      public pathForTransformer_args getEmptyArgsInstance() {
        return new pathForTransformer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pathForTransformer_result getResult(I iface, pathForTransformer_args args) throws org.apache.thrift.TException {
        pathForTransformer_result result = new pathForTransformer_result();
        try {
          result.success = iface.pathForTransformer(args.transformerId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (InvalidFieldException efEx) {
          result.efEx = efEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeFitEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeFitEvent_args> {
      public storeFitEvent() {
        super("storeFitEvent");
      }

      public storeFitEvent_args getEmptyArgsInstance() {
        return new storeFitEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeFitEvent_result getResult(I iface, storeFitEvent_args args) throws org.apache.thrift.TException {
        storeFitEvent_result result = new storeFitEvent_result();
        try {
          result.success = iface.storeFitEvent(args.fe);
        } catch (InvalidExperimentRunException ierEx) {
          result.ierEx = ierEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeMetricEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeMetricEvent_args> {
      public storeMetricEvent() {
        super("storeMetricEvent");
      }

      public storeMetricEvent_args getEmptyArgsInstance() {
        return new storeMetricEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeMetricEvent_result getResult(I iface, storeMetricEvent_args args) throws org.apache.thrift.TException {
        storeMetricEvent_result result = new storeMetricEvent_result();
        try {
          result.success = iface.storeMetricEvent(args.me);
        } catch (InvalidExperimentRunException ierEx) {
          result.ierEx = ierEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getFilePath<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFilePath_args> {
      public getFilePath() {
        super("getFilePath");
      }

      public getFilePath_args getEmptyArgsInstance() {
        return new getFilePath_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFilePath_result getResult(I iface, getFilePath_args args) throws org.apache.thrift.TException {
        getFilePath_result result = new getFilePath_result();
        try {
          result.success = iface.getFilePath(args.t, args.experimentRunId, args.filename);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeTransformEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeTransformEvent_args> {
      public storeTransformEvent() {
        super("storeTransformEvent");
      }

      public storeTransformEvent_args getEmptyArgsInstance() {
        return new storeTransformEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeTransformEvent_result getResult(I iface, storeTransformEvent_args args) throws org.apache.thrift.TException {
        storeTransformEvent_result result = new storeTransformEvent_result();
        try {
          result.success = iface.storeTransformEvent(args.te);
        } catch (InvalidExperimentRunException ierEx) {
          result.ierEx = ierEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeRandomSplitEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeRandomSplitEvent_args> {
      public storeRandomSplitEvent() {
        super("storeRandomSplitEvent");
      }

      public storeRandomSplitEvent_args getEmptyArgsInstance() {
        return new storeRandomSplitEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeRandomSplitEvent_result getResult(I iface, storeRandomSplitEvent_args args) throws org.apache.thrift.TException {
        storeRandomSplitEvent_result result = new storeRandomSplitEvent_result();
        try {
          result.success = iface.storeRandomSplitEvent(args.rse);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storePipelineEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storePipelineEvent_args> {
      public storePipelineEvent() {
        super("storePipelineEvent");
      }

      public storePipelineEvent_args getEmptyArgsInstance() {
        return new storePipelineEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storePipelineEvent_result getResult(I iface, storePipelineEvent_args args) throws org.apache.thrift.TException {
        storePipelineEvent_result result = new storePipelineEvent_result();
        try {
          result.success = iface.storePipelineEvent(args.pipelineEvent);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeCrossValidationEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeCrossValidationEvent_args> {
      public storeCrossValidationEvent() {
        super("storeCrossValidationEvent");
      }

      public storeCrossValidationEvent_args getEmptyArgsInstance() {
        return new storeCrossValidationEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeCrossValidationEvent_result getResult(I iface, storeCrossValidationEvent_args args) throws org.apache.thrift.TException {
        storeCrossValidationEvent_result result = new storeCrossValidationEvent_result();
        try {
          result.success = iface.storeCrossValidationEvent(args.cve);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeGridSearchCrossValidationEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeGridSearchCrossValidationEvent_args> {
      public storeGridSearchCrossValidationEvent() {
        super("storeGridSearchCrossValidationEvent");
      }

      public storeGridSearchCrossValidationEvent_args getEmptyArgsInstance() {
        return new storeGridSearchCrossValidationEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeGridSearchCrossValidationEvent_result getResult(I iface, storeGridSearchCrossValidationEvent_args args) throws org.apache.thrift.TException {
        storeGridSearchCrossValidationEvent_result result = new storeGridSearchCrossValidationEvent_result();
        try {
          result.success = iface.storeGridSearchCrossValidationEvent(args.gscve);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeAnnotationEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeAnnotationEvent_args> {
      public storeAnnotationEvent() {
        super("storeAnnotationEvent");
      }

      public storeAnnotationEvent_args getEmptyArgsInstance() {
        return new storeAnnotationEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeAnnotationEvent_result getResult(I iface, storeAnnotationEvent_args args) throws org.apache.thrift.TException {
        storeAnnotationEvent_result result = new storeAnnotationEvent_result();
        try {
          result.success = iface.storeAnnotationEvent(args.ae);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeProjectEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeProjectEvent_args> {
      public storeProjectEvent() {
        super("storeProjectEvent");
      }

      public storeProjectEvent_args getEmptyArgsInstance() {
        return new storeProjectEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeProjectEvent_result getResult(I iface, storeProjectEvent_args args) throws org.apache.thrift.TException {
        storeProjectEvent_result result = new storeProjectEvent_result();
        try {
          result.success = iface.storeProjectEvent(args.pr);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeExperimentEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeExperimentEvent_args> {
      public storeExperimentEvent() {
        super("storeExperimentEvent");
      }

      public storeExperimentEvent_args getEmptyArgsInstance() {
        return new storeExperimentEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeExperimentEvent_result getResult(I iface, storeExperimentEvent_args args) throws org.apache.thrift.TException {
        storeExperimentEvent_result result = new storeExperimentEvent_result();
        try {
          result.success = iface.storeExperimentEvent(args.er);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeExperimentRunEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeExperimentRunEvent_args> {
      public storeExperimentRunEvent() {
        super("storeExperimentRunEvent");
      }

      public storeExperimentRunEvent_args getEmptyArgsInstance() {
        return new storeExperimentRunEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeExperimentRunEvent_result getResult(I iface, storeExperimentRunEvent_args args) throws org.apache.thrift.TException {
        storeExperimentRunEvent_result result = new storeExperimentRunEvent_result();
        try {
          result.success = iface.storeExperimentRunEvent(args.er);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeLinearModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeLinearModel_args> {
      public storeLinearModel() {
        super("storeLinearModel");
      }

      public storeLinearModel_args getEmptyArgsInstance() {
        return new storeLinearModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeLinearModel_result getResult(I iface, storeLinearModel_args args) throws org.apache.thrift.TException {
        storeLinearModel_result result = new storeLinearModel_result();
        try {
          result.success = iface.storeLinearModel(args.modelId, args.model);
          result.setSuccessIsSet(true);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getDataFrameAncestry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataFrameAncestry_args> {
      public getDataFrameAncestry() {
        super("getDataFrameAncestry");
      }

      public getDataFrameAncestry_args getEmptyArgsInstance() {
        return new getDataFrameAncestry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDataFrameAncestry_result getResult(I iface, getDataFrameAncestry_args args) throws org.apache.thrift.TException {
        getDataFrameAncestry_result result = new getDataFrameAncestry_result();
        try {
          result.success = iface.getDataFrameAncestry(args.dataFrameId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getCommonAncestor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCommonAncestor_args> {
      public getCommonAncestor() {
        super("getCommonAncestor");
      }

      public getCommonAncestor_args getEmptyArgsInstance() {
        return new getCommonAncestor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCommonAncestor_result getResult(I iface, getCommonAncestor_args args) throws org.apache.thrift.TException {
        getCommonAncestor_result result = new getCommonAncestor_result();
        try {
          result.success = iface.getCommonAncestor(args.dfId1, args.dfId2);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getCommonAncestorForModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCommonAncestorForModels_args> {
      public getCommonAncestorForModels() {
        super("getCommonAncestorForModels");
      }

      public getCommonAncestorForModels_args getEmptyArgsInstance() {
        return new getCommonAncestorForModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCommonAncestorForModels_result getResult(I iface, getCommonAncestorForModels_args args) throws org.apache.thrift.TException {
        getCommonAncestorForModels_result result = new getCommonAncestorForModels_result();
        try {
          result.success = iface.getCommonAncestorForModels(args.modelId1, args.modelId2);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getTrainingRowsCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTrainingRowsCount_args> {
      public getTrainingRowsCount() {
        super("getTrainingRowsCount");
      }

      public getTrainingRowsCount_args getEmptyArgsInstance() {
        return new getTrainingRowsCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTrainingRowsCount_result getResult(I iface, getTrainingRowsCount_args args) throws org.apache.thrift.TException {
        getTrainingRowsCount_result result = new getTrainingRowsCount_result();
        try {
          result.success = iface.getTrainingRowsCount(args.modelId);
          result.setSuccessIsSet(true);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getTrainingRowsCounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTrainingRowsCounts_args> {
      public getTrainingRowsCounts() {
        super("getTrainingRowsCounts");
      }

      public getTrainingRowsCounts_args getEmptyArgsInstance() {
        return new getTrainingRowsCounts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTrainingRowsCounts_result getResult(I iface, getTrainingRowsCounts_args args) throws org.apache.thrift.TException {
        getTrainingRowsCounts_result result = new getTrainingRowsCounts_result();
        try {
          result.success = iface.getTrainingRowsCounts(args.modelIds);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class compareHyperparameters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compareHyperparameters_args> {
      public compareHyperparameters() {
        super("compareHyperparameters");
      }

      public compareHyperparameters_args getEmptyArgsInstance() {
        return new compareHyperparameters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public compareHyperparameters_result getResult(I iface, compareHyperparameters_args args) throws org.apache.thrift.TException {
        compareHyperparameters_result result = new compareHyperparameters_result();
        try {
          result.success = iface.compareHyperparameters(args.modelId1, args.modelId2);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class compareFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compareFeatures_args> {
      public compareFeatures() {
        super("compareFeatures");
      }

      public compareFeatures_args getEmptyArgsInstance() {
        return new compareFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public compareFeatures_result getResult(I iface, compareFeatures_args args) throws org.apache.thrift.TException {
        compareFeatures_result result = new compareFeatures_result();
        try {
          result.success = iface.compareFeatures(args.modelId1, args.modelId2);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class groupByProblemType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, groupByProblemType_args> {
      public groupByProblemType() {
        super("groupByProblemType");
      }

      public groupByProblemType_args getEmptyArgsInstance() {
        return new groupByProblemType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public groupByProblemType_result getResult(I iface, groupByProblemType_args args) throws org.apache.thrift.TException {
        groupByProblemType_result result = new groupByProblemType_result();
        try {
          result.success = iface.groupByProblemType(args.modelIds);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class similarModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, similarModels_args> {
      public similarModels() {
        super("similarModels");
      }

      public similarModels_args getEmptyArgsInstance() {
        return new similarModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public similarModels_result getResult(I iface, similarModels_args args) throws org.apache.thrift.TException {
        similarModels_result result = new similarModels_result();
        try {
          result.success = iface.similarModels(args.modelId, args.compMetrics, args.numModels);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (BadRequestException brEx) {
          result.brEx = brEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class linearModelFeatureImportances<I extends Iface> extends org.apache.thrift.ProcessFunction<I, linearModelFeatureImportances_args> {
      public linearModelFeatureImportances() {
        super("linearModelFeatureImportances");
      }

      public linearModelFeatureImportances_args getEmptyArgsInstance() {
        return new linearModelFeatureImportances_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public linearModelFeatureImportances_result getResult(I iface, linearModelFeatureImportances_args args) throws org.apache.thrift.TException {
        linearModelFeatureImportances_result result = new linearModelFeatureImportances_result();
        try {
          result.success = iface.linearModelFeatureImportances(args.modelId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (IllegalOperationException ioEx) {
          result.ioEx = ioEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class compareLinearModelFeatureImportances<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compareLinearModelFeatureImportances_args> {
      public compareLinearModelFeatureImportances() {
        super("compareLinearModelFeatureImportances");
      }

      public compareLinearModelFeatureImportances_args getEmptyArgsInstance() {
        return new compareLinearModelFeatureImportances_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public compareLinearModelFeatureImportances_result getResult(I iface, compareLinearModelFeatureImportances_args args) throws org.apache.thrift.TException {
        compareLinearModelFeatureImportances_result result = new compareLinearModelFeatureImportances_result();
        try {
          result.success = iface.compareLinearModelFeatureImportances(args.model1Id, args.model2Id);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (IllegalOperationException ioEx) {
          result.ioEx = ioEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class iterationsUntilConvergence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, iterationsUntilConvergence_args> {
      public iterationsUntilConvergence() {
        super("iterationsUntilConvergence");
      }

      public iterationsUntilConvergence_args getEmptyArgsInstance() {
        return new iterationsUntilConvergence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public iterationsUntilConvergence_result getResult(I iface, iterationsUntilConvergence_args args) throws org.apache.thrift.TException {
        iterationsUntilConvergence_result result = new iterationsUntilConvergence_result();
        try {
          result.success = iface.iterationsUntilConvergence(args.modelIds, args.tolerance);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class rankModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rankModels_args> {
      public rankModels() {
        super("rankModels");
      }

      public rankModels_args getEmptyArgsInstance() {
        return new rankModels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rankModels_result getResult(I iface, rankModels_args args) throws org.apache.thrift.TException {
        rankModels_result result = new rankModels_result();
        try {
          result.success = iface.rankModels(args.modelIds, args.metric);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class confidenceIntervals<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confidenceIntervals_args> {
      public confidenceIntervals() {
        super("confidenceIntervals");
      }

      public confidenceIntervals_args getEmptyArgsInstance() {
        return new confidenceIntervals_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confidenceIntervals_result getResult(I iface, confidenceIntervals_args args) throws org.apache.thrift.TException {
        confidenceIntervals_result result = new confidenceIntervals_result();
        try {
          result.success = iface.confidenceIntervals(args.modelId, args.sigLevel);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (IllegalOperationException ioEx) {
          result.ioEx = ioEx;
        } catch (BadRequestException brEx) {
          result.brEx = brEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class modelsWithFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modelsWithFeatures_args> {
      public modelsWithFeatures() {
        super("modelsWithFeatures");
      }

      public modelsWithFeatures_args getEmptyArgsInstance() {
        return new modelsWithFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modelsWithFeatures_result getResult(I iface, modelsWithFeatures_args args) throws org.apache.thrift.TException {
        modelsWithFeatures_result result = new modelsWithFeatures_result();
        try {
          result.success = iface.modelsWithFeatures(args.featureNames);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class modelsDerivedFromDataFrame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modelsDerivedFromDataFrame_args> {
      public modelsDerivedFromDataFrame() {
        super("modelsDerivedFromDataFrame");
      }

      public modelsDerivedFromDataFrame_args getEmptyArgsInstance() {
        return new modelsDerivedFromDataFrame_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modelsDerivedFromDataFrame_result getResult(I iface, modelsDerivedFromDataFrame_args args) throws org.apache.thrift.TException {
        modelsDerivedFromDataFrame_result result = new modelsDerivedFromDataFrame_result();
        try {
          result.success = iface.modelsDerivedFromDataFrame(args.dfId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getProjectIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectIds_args> {
      public getProjectIds() {
        super("getProjectIds");
      }

      public getProjectIds_args getEmptyArgsInstance() {
        return new getProjectIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectIds_result getResult(I iface, getProjectIds_args args) throws org.apache.thrift.TException {
        getProjectIds_result result = new getProjectIds_result();
        try {
          result.success = iface.getProjectIds(args.keyValuePairs);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getModelIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModelIds_args> {
      public getModelIds() {
        super("getModelIds");
      }

      public getModelIds_args getEmptyArgsInstance() {
        return new getModelIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getModelIds_result getResult(I iface, getModelIds_args args) throws org.apache.thrift.TException {
        getModelIds_result result = new getModelIds_result();
        try {
          result.success = iface.getModelIds(args.keyValuePairs);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class updateProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProject_args> {
      public updateProject() {
        super("updateProject");
      }

      public updateProject_args getEmptyArgsInstance() {
        return new updateProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProject_result getResult(I iface, updateProject_args args) throws org.apache.thrift.TException {
        updateProject_result result = new updateProject_result();
        try {
          result.success = iface.updateProject(args.projectId, args.key, args.value);
          result.setSuccessIsSet(true);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class createOrUpdateScalarField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrUpdateScalarField_args> {
      public createOrUpdateScalarField() {
        super("createOrUpdateScalarField");
      }

      public createOrUpdateScalarField_args getEmptyArgsInstance() {
        return new createOrUpdateScalarField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOrUpdateScalarField_result getResult(I iface, createOrUpdateScalarField_args args) throws org.apache.thrift.TException {
        createOrUpdateScalarField_result result = new createOrUpdateScalarField_result();
        try {
          result.success = iface.createOrUpdateScalarField(args.modelId, args.key, args.value, args.valueType);
          result.setSuccessIsSet(true);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class createVectorField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVectorField_args> {
      public createVectorField() {
        super("createVectorField");
      }

      public createVectorField_args getEmptyArgsInstance() {
        return new createVectorField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVectorField_result getResult(I iface, createVectorField_args args) throws org.apache.thrift.TException {
        createVectorField_result result = new createVectorField_result();
        try {
          result.success = iface.createVectorField(args.modelId, args.vectorName, args.vectorConfig);
          result.setSuccessIsSet(true);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class updateVectorField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVectorField_args> {
      public updateVectorField() {
        super("updateVectorField");
      }

      public updateVectorField_args getEmptyArgsInstance() {
        return new updateVectorField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVectorField_result getResult(I iface, updateVectorField_args args) throws org.apache.thrift.TException {
        updateVectorField_result result = new updateVectorField_result();
        try {
          result.success = iface.updateVectorField(args.modelId, args.key, args.valueIndex, args.value, args.valueType);
          result.setSuccessIsSet(true);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class appendToVectorField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, appendToVectorField_args> {
      public appendToVectorField() {
        super("appendToVectorField");
      }

      public appendToVectorField_args getEmptyArgsInstance() {
        return new appendToVectorField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public appendToVectorField_result getResult(I iface, appendToVectorField_args args) throws org.apache.thrift.TException {
        appendToVectorField_result result = new appendToVectorField_result();
        try {
          result.success = iface.appendToVectorField(args.modelId, args.vectorName, args.value, args.valueType);
          result.setSuccessIsSet(true);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModel_args> {
      public getModel() {
        super("getModel");
      }

      public getModel_args getEmptyArgsInstance() {
        return new getModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getModel_result getResult(I iface, getModel_args args) throws org.apache.thrift.TException {
        getModel_result result = new getModel_result();
        try {
          result.success = iface.getModel(args.modelId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getRunsInExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRunsInExperiment_args> {
      public getRunsInExperiment() {
        super("getRunsInExperiment");
      }

      public getRunsInExperiment_args getEmptyArgsInstance() {
        return new getRunsInExperiment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRunsInExperiment_result getResult(I iface, getRunsInExperiment_args args) throws org.apache.thrift.TException {
        getRunsInExperiment_result result = new getRunsInExperiment_result();
        try {
          result.success = iface.getRunsInExperiment(args.experimentId);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getRunsAndExperimentsInProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRunsAndExperimentsInProject_args> {
      public getRunsAndExperimentsInProject() {
        super("getRunsAndExperimentsInProject");
      }

      public getRunsAndExperimentsInProject_args getEmptyArgsInstance() {
        return new getRunsAndExperimentsInProject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRunsAndExperimentsInProject_result getResult(I iface, getRunsAndExperimentsInProject_args args) throws org.apache.thrift.TException {
        getRunsAndExperimentsInProject_result result = new getRunsAndExperimentsInProject_result();
        try {
          result.success = iface.getRunsAndExperimentsInProject(args.projId);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getProjectOverviews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectOverviews_args> {
      public getProjectOverviews() {
        super("getProjectOverviews");
      }

      public getProjectOverviews_args getEmptyArgsInstance() {
        return new getProjectOverviews_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectOverviews_result getResult(I iface, getProjectOverviews_args args) throws org.apache.thrift.TException {
        getProjectOverviews_result result = new getProjectOverviews_result();
        try {
          result.success = iface.getProjectOverviews();
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class getExperimentRunDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperimentRunDetails_args> {
      public getExperimentRunDetails() {
        super("getExperimentRunDetails");
      }

      public getExperimentRunDetails_args getEmptyArgsInstance() {
        return new getExperimentRunDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getExperimentRunDetails_result getResult(I iface, getExperimentRunDetails_args args) throws org.apache.thrift.TException {
        getExperimentRunDetails_result result = new getExperimentRunDetails_result();
        try {
          result.success = iface.getExperimentRunDetails(args.experimentRunId);
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        }
        return result;
      }
    }

    public static class originalFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, originalFeatures_args> {
      public originalFeatures() {
        super("originalFeatures");
      }

      public originalFeatures_args getEmptyArgsInstance() {
        return new originalFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public originalFeatures_result getResult(I iface, originalFeatures_args args) throws org.apache.thrift.TException {
        originalFeatures_result result = new originalFeatures_result();
        try {
          result.success = iface.originalFeatures(args.modelId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storeTreeModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeTreeModel_args> {
      public storeTreeModel() {
        super("storeTreeModel");
      }

      public storeTreeModel_args getEmptyArgsInstance() {
        return new storeTreeModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeTreeModel_result getResult(I iface, storeTreeModel_args args) throws org.apache.thrift.TException {
        storeTreeModel_result result = new storeTreeModel_result();
        try {
          result.success = iface.storeTreeModel(args.modelId, args.model);
          result.setSuccessIsSet(true);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class storePipelineTransformEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storePipelineTransformEvent_args> {
      public storePipelineTransformEvent() {
        super("storePipelineTransformEvent");
      }

      public storePipelineTransformEvent_args getEmptyArgsInstance() {
        return new storePipelineTransformEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storePipelineTransformEvent_result getResult(I iface, storePipelineTransformEvent_args args) throws org.apache.thrift.TException {
        storePipelineTransformEvent_result result = new storePipelineTransformEvent_result();
        try {
          result.success = iface.storePipelineTransformEvent(args.te);
        } catch (InvalidExperimentRunException ierEx) {
          result.ierEx = ierEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class computeModelAncestry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeModelAncestry_args> {
      public computeModelAncestry() {
        super("computeModelAncestry");
      }

      public computeModelAncestry_args getEmptyArgsInstance() {
        return new computeModelAncestry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public computeModelAncestry_result getResult(I iface, computeModelAncestry_args args) throws org.apache.thrift.TException {
        computeModelAncestry_result result = new computeModelAncestry_result();
        try {
          result.success = iface.computeModelAncestry(args.modelId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

    public static class extractPipeline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, extractPipeline_args> {
      public extractPipeline() {
        super("extractPipeline");
      }

      public extractPipeline_args getEmptyArgsInstance() {
        return new extractPipeline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public extractPipeline_result getResult(I iface, extractPipeline_args args) throws org.apache.thrift.TException {
        extractPipeline_result result = new extractPipeline_result();
        try {
          result.success = iface.extractPipeline(args.modelId);
        } catch (ResourceNotFoundException rnfEx) {
          result.rnfEx = rnfEx;
        } catch (ServerLogicException svEx) {
          result.svEx = svEx;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("testConnection", new testConnection());
      processMap.put("storeDataFrame", new storeDataFrame());
      processMap.put("pathForTransformer", new pathForTransformer());
      processMap.put("storeFitEvent", new storeFitEvent());
      processMap.put("storeMetricEvent", new storeMetricEvent());
      processMap.put("getFilePath", new getFilePath());
      processMap.put("storeTransformEvent", new storeTransformEvent());
      processMap.put("storeRandomSplitEvent", new storeRandomSplitEvent());
      processMap.put("storePipelineEvent", new storePipelineEvent());
      processMap.put("storeCrossValidationEvent", new storeCrossValidationEvent());
      processMap.put("storeGridSearchCrossValidationEvent", new storeGridSearchCrossValidationEvent());
      processMap.put("storeAnnotationEvent", new storeAnnotationEvent());
      processMap.put("storeProjectEvent", new storeProjectEvent());
      processMap.put("storeExperimentEvent", new storeExperimentEvent());
      processMap.put("storeExperimentRunEvent", new storeExperimentRunEvent());
      processMap.put("storeLinearModel", new storeLinearModel());
      processMap.put("getDataFrameAncestry", new getDataFrameAncestry());
      processMap.put("getCommonAncestor", new getCommonAncestor());
      processMap.put("getCommonAncestorForModels", new getCommonAncestorForModels());
      processMap.put("getTrainingRowsCount", new getTrainingRowsCount());
      processMap.put("getTrainingRowsCounts", new getTrainingRowsCounts());
      processMap.put("compareHyperparameters", new compareHyperparameters());
      processMap.put("compareFeatures", new compareFeatures());
      processMap.put("groupByProblemType", new groupByProblemType());
      processMap.put("similarModels", new similarModels());
      processMap.put("linearModelFeatureImportances", new linearModelFeatureImportances());
      processMap.put("compareLinearModelFeatureImportances", new compareLinearModelFeatureImportances());
      processMap.put("iterationsUntilConvergence", new iterationsUntilConvergence());
      processMap.put("rankModels", new rankModels());
      processMap.put("confidenceIntervals", new confidenceIntervals());
      processMap.put("modelsWithFeatures", new modelsWithFeatures());
      processMap.put("modelsDerivedFromDataFrame", new modelsDerivedFromDataFrame());
      processMap.put("getProjectIds", new getProjectIds());
      processMap.put("getModelIds", new getModelIds());
      processMap.put("updateProject", new updateProject());
      processMap.put("createOrUpdateScalarField", new createOrUpdateScalarField());
      processMap.put("createVectorField", new createVectorField());
      processMap.put("updateVectorField", new updateVectorField());
      processMap.put("appendToVectorField", new appendToVectorField());
      processMap.put("getModel", new getModel());
      processMap.put("getRunsInExperiment", new getRunsInExperiment());
      processMap.put("getRunsAndExperimentsInProject", new getRunsAndExperimentsInProject());
      processMap.put("getProjectOverviews", new getProjectOverviews());
      processMap.put("getExperimentRunDetails", new getExperimentRunDetails());
      processMap.put("originalFeatures", new originalFeatures());
      processMap.put("storeTreeModel", new storeTreeModel());
      processMap.put("storePipelineTransformEvent", new storePipelineTransformEvent());
      processMap.put("computeModelAncestry", new computeModelAncestry());
      processMap.put("extractPipeline", new extractPipeline());
      return processMap;
    }

    public static class testConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testConnection_args, Integer> {
      public testConnection() {
        super("testConnection");
      }

      public testConnection_args getEmptyArgsInstance() {
        return new testConnection_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            testConnection_result result = new testConnection_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            testConnection_result result = new testConnection_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testConnection_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.testConnection(resultHandler);
      }
    }

    public static class storeDataFrame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeDataFrame_args, Integer> {
      public storeDataFrame() {
        super("storeDataFrame");
      }

      public storeDataFrame_args getEmptyArgsInstance() {
        return new storeDataFrame_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            storeDataFrame_result result = new storeDataFrame_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeDataFrame_result result = new storeDataFrame_result();
            if (e instanceof InvalidExperimentRunException) {
                        result.ierEx = (InvalidExperimentRunException) e;
                        result.setIerExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeDataFrame_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.storeDataFrame(args.df, args.experimentRunId,resultHandler);
      }
    }

    public static class pathForTransformer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pathForTransformer_args, String> {
      public pathForTransformer() {
        super("pathForTransformer");
      }

      public pathForTransformer_args getEmptyArgsInstance() {
        return new pathForTransformer_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            pathForTransformer_result result = new pathForTransformer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pathForTransformer_result result = new pathForTransformer_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidFieldException) {
                        result.efEx = (InvalidFieldException) e;
                        result.setEfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pathForTransformer_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.pathForTransformer(args.transformerId,resultHandler);
      }
    }

    public static class storeFitEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeFitEvent_args, FitEventResponse> {
      public storeFitEvent() {
        super("storeFitEvent");
      }

      public storeFitEvent_args getEmptyArgsInstance() {
        return new storeFitEvent_args();
      }

      public AsyncMethodCallback<FitEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FitEventResponse>() { 
          public void onComplete(FitEventResponse o) {
            storeFitEvent_result result = new storeFitEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeFitEvent_result result = new storeFitEvent_result();
            if (e instanceof InvalidExperimentRunException) {
                        result.ierEx = (InvalidExperimentRunException) e;
                        result.setIerExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeFitEvent_args args, org.apache.thrift.async.AsyncMethodCallback<FitEventResponse> resultHandler) throws TException {
        iface.storeFitEvent(args.fe,resultHandler);
      }
    }

    public static class storeMetricEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeMetricEvent_args, MetricEventResponse> {
      public storeMetricEvent() {
        super("storeMetricEvent");
      }

      public storeMetricEvent_args getEmptyArgsInstance() {
        return new storeMetricEvent_args();
      }

      public AsyncMethodCallback<MetricEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MetricEventResponse>() { 
          public void onComplete(MetricEventResponse o) {
            storeMetricEvent_result result = new storeMetricEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeMetricEvent_result result = new storeMetricEvent_result();
            if (e instanceof InvalidExperimentRunException) {
                        result.ierEx = (InvalidExperimentRunException) e;
                        result.setIerExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeMetricEvent_args args, org.apache.thrift.async.AsyncMethodCallback<MetricEventResponse> resultHandler) throws TException {
        iface.storeMetricEvent(args.me,resultHandler);
      }
    }

    public static class getFilePath<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFilePath_args, String> {
      public getFilePath() {
        super("getFilePath");
      }

      public getFilePath_args getEmptyArgsInstance() {
        return new getFilePath_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getFilePath_result result = new getFilePath_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFilePath_result result = new getFilePath_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFilePath_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getFilePath(args.t, args.experimentRunId, args.filename,resultHandler);
      }
    }

    public static class storeTransformEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeTransformEvent_args, TransformEventResponse> {
      public storeTransformEvent() {
        super("storeTransformEvent");
      }

      public storeTransformEvent_args getEmptyArgsInstance() {
        return new storeTransformEvent_args();
      }

      public AsyncMethodCallback<TransformEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransformEventResponse>() { 
          public void onComplete(TransformEventResponse o) {
            storeTransformEvent_result result = new storeTransformEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeTransformEvent_result result = new storeTransformEvent_result();
            if (e instanceof InvalidExperimentRunException) {
                        result.ierEx = (InvalidExperimentRunException) e;
                        result.setIerExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeTransformEvent_args args, org.apache.thrift.async.AsyncMethodCallback<TransformEventResponse> resultHandler) throws TException {
        iface.storeTransformEvent(args.te,resultHandler);
      }
    }

    public static class storeRandomSplitEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeRandomSplitEvent_args, RandomSplitEventResponse> {
      public storeRandomSplitEvent() {
        super("storeRandomSplitEvent");
      }

      public storeRandomSplitEvent_args getEmptyArgsInstance() {
        return new storeRandomSplitEvent_args();
      }

      public AsyncMethodCallback<RandomSplitEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RandomSplitEventResponse>() { 
          public void onComplete(RandomSplitEventResponse o) {
            storeRandomSplitEvent_result result = new storeRandomSplitEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeRandomSplitEvent_result result = new storeRandomSplitEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeRandomSplitEvent_args args, org.apache.thrift.async.AsyncMethodCallback<RandomSplitEventResponse> resultHandler) throws TException {
        iface.storeRandomSplitEvent(args.rse,resultHandler);
      }
    }

    public static class storePipelineEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storePipelineEvent_args, PipelineEventResponse> {
      public storePipelineEvent() {
        super("storePipelineEvent");
      }

      public storePipelineEvent_args getEmptyArgsInstance() {
        return new storePipelineEvent_args();
      }

      public AsyncMethodCallback<PipelineEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PipelineEventResponse>() { 
          public void onComplete(PipelineEventResponse o) {
            storePipelineEvent_result result = new storePipelineEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storePipelineEvent_result result = new storePipelineEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storePipelineEvent_args args, org.apache.thrift.async.AsyncMethodCallback<PipelineEventResponse> resultHandler) throws TException {
        iface.storePipelineEvent(args.pipelineEvent,resultHandler);
      }
    }

    public static class storeCrossValidationEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeCrossValidationEvent_args, CrossValidationEventResponse> {
      public storeCrossValidationEvent() {
        super("storeCrossValidationEvent");
      }

      public storeCrossValidationEvent_args getEmptyArgsInstance() {
        return new storeCrossValidationEvent_args();
      }

      public AsyncMethodCallback<CrossValidationEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CrossValidationEventResponse>() { 
          public void onComplete(CrossValidationEventResponse o) {
            storeCrossValidationEvent_result result = new storeCrossValidationEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeCrossValidationEvent_result result = new storeCrossValidationEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeCrossValidationEvent_args args, org.apache.thrift.async.AsyncMethodCallback<CrossValidationEventResponse> resultHandler) throws TException {
        iface.storeCrossValidationEvent(args.cve,resultHandler);
      }
    }

    public static class storeGridSearchCrossValidationEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeGridSearchCrossValidationEvent_args, GridSearchCrossValidationEventResponse> {
      public storeGridSearchCrossValidationEvent() {
        super("storeGridSearchCrossValidationEvent");
      }

      public storeGridSearchCrossValidationEvent_args getEmptyArgsInstance() {
        return new storeGridSearchCrossValidationEvent_args();
      }

      public AsyncMethodCallback<GridSearchCrossValidationEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GridSearchCrossValidationEventResponse>() { 
          public void onComplete(GridSearchCrossValidationEventResponse o) {
            storeGridSearchCrossValidationEvent_result result = new storeGridSearchCrossValidationEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeGridSearchCrossValidationEvent_result result = new storeGridSearchCrossValidationEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeGridSearchCrossValidationEvent_args args, org.apache.thrift.async.AsyncMethodCallback<GridSearchCrossValidationEventResponse> resultHandler) throws TException {
        iface.storeGridSearchCrossValidationEvent(args.gscve,resultHandler);
      }
    }

    public static class storeAnnotationEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeAnnotationEvent_args, AnnotationEventResponse> {
      public storeAnnotationEvent() {
        super("storeAnnotationEvent");
      }

      public storeAnnotationEvent_args getEmptyArgsInstance() {
        return new storeAnnotationEvent_args();
      }

      public AsyncMethodCallback<AnnotationEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AnnotationEventResponse>() { 
          public void onComplete(AnnotationEventResponse o) {
            storeAnnotationEvent_result result = new storeAnnotationEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeAnnotationEvent_result result = new storeAnnotationEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeAnnotationEvent_args args, org.apache.thrift.async.AsyncMethodCallback<AnnotationEventResponse> resultHandler) throws TException {
        iface.storeAnnotationEvent(args.ae,resultHandler);
      }
    }

    public static class storeProjectEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeProjectEvent_args, ProjectEventResponse> {
      public storeProjectEvent() {
        super("storeProjectEvent");
      }

      public storeProjectEvent_args getEmptyArgsInstance() {
        return new storeProjectEvent_args();
      }

      public AsyncMethodCallback<ProjectEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProjectEventResponse>() { 
          public void onComplete(ProjectEventResponse o) {
            storeProjectEvent_result result = new storeProjectEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeProjectEvent_result result = new storeProjectEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeProjectEvent_args args, org.apache.thrift.async.AsyncMethodCallback<ProjectEventResponse> resultHandler) throws TException {
        iface.storeProjectEvent(args.pr,resultHandler);
      }
    }

    public static class storeExperimentEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeExperimentEvent_args, ExperimentEventResponse> {
      public storeExperimentEvent() {
        super("storeExperimentEvent");
      }

      public storeExperimentEvent_args getEmptyArgsInstance() {
        return new storeExperimentEvent_args();
      }

      public AsyncMethodCallback<ExperimentEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExperimentEventResponse>() { 
          public void onComplete(ExperimentEventResponse o) {
            storeExperimentEvent_result result = new storeExperimentEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeExperimentEvent_result result = new storeExperimentEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeExperimentEvent_args args, org.apache.thrift.async.AsyncMethodCallback<ExperimentEventResponse> resultHandler) throws TException {
        iface.storeExperimentEvent(args.er,resultHandler);
      }
    }

    public static class storeExperimentRunEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeExperimentRunEvent_args, ExperimentRunEventResponse> {
      public storeExperimentRunEvent() {
        super("storeExperimentRunEvent");
      }

      public storeExperimentRunEvent_args getEmptyArgsInstance() {
        return new storeExperimentRunEvent_args();
      }

      public AsyncMethodCallback<ExperimentRunEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExperimentRunEventResponse>() { 
          public void onComplete(ExperimentRunEventResponse o) {
            storeExperimentRunEvent_result result = new storeExperimentRunEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeExperimentRunEvent_result result = new storeExperimentRunEvent_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeExperimentRunEvent_args args, org.apache.thrift.async.AsyncMethodCallback<ExperimentRunEventResponse> resultHandler) throws TException {
        iface.storeExperimentRunEvent(args.er,resultHandler);
      }
    }

    public static class storeLinearModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeLinearModel_args, Boolean> {
      public storeLinearModel() {
        super("storeLinearModel");
      }

      public storeLinearModel_args getEmptyArgsInstance() {
        return new storeLinearModel_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            storeLinearModel_result result = new storeLinearModel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeLinearModel_result result = new storeLinearModel_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeLinearModel_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.storeLinearModel(args.modelId, args.model,resultHandler);
      }
    }

    public static class getDataFrameAncestry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataFrameAncestry_args, DataFrameAncestry> {
      public getDataFrameAncestry() {
        super("getDataFrameAncestry");
      }

      public getDataFrameAncestry_args getEmptyArgsInstance() {
        return new getDataFrameAncestry_args();
      }

      public AsyncMethodCallback<DataFrameAncestry> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DataFrameAncestry>() { 
          public void onComplete(DataFrameAncestry o) {
            getDataFrameAncestry_result result = new getDataFrameAncestry_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDataFrameAncestry_result result = new getDataFrameAncestry_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDataFrameAncestry_args args, org.apache.thrift.async.AsyncMethodCallback<DataFrameAncestry> resultHandler) throws TException {
        iface.getDataFrameAncestry(args.dataFrameId,resultHandler);
      }
    }

    public static class getCommonAncestor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCommonAncestor_args, CommonAncestor> {
      public getCommonAncestor() {
        super("getCommonAncestor");
      }

      public getCommonAncestor_args getEmptyArgsInstance() {
        return new getCommonAncestor_args();
      }

      public AsyncMethodCallback<CommonAncestor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CommonAncestor>() { 
          public void onComplete(CommonAncestor o) {
            getCommonAncestor_result result = new getCommonAncestor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCommonAncestor_result result = new getCommonAncestor_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCommonAncestor_args args, org.apache.thrift.async.AsyncMethodCallback<CommonAncestor> resultHandler) throws TException {
        iface.getCommonAncestor(args.dfId1, args.dfId2,resultHandler);
      }
    }

    public static class getCommonAncestorForModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCommonAncestorForModels_args, CommonAncestor> {
      public getCommonAncestorForModels() {
        super("getCommonAncestorForModels");
      }

      public getCommonAncestorForModels_args getEmptyArgsInstance() {
        return new getCommonAncestorForModels_args();
      }

      public AsyncMethodCallback<CommonAncestor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CommonAncestor>() { 
          public void onComplete(CommonAncestor o) {
            getCommonAncestorForModels_result result = new getCommonAncestorForModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCommonAncestorForModels_result result = new getCommonAncestorForModels_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCommonAncestorForModels_args args, org.apache.thrift.async.AsyncMethodCallback<CommonAncestor> resultHandler) throws TException {
        iface.getCommonAncestorForModels(args.modelId1, args.modelId2,resultHandler);
      }
    }

    public static class getTrainingRowsCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTrainingRowsCount_args, Integer> {
      public getTrainingRowsCount() {
        super("getTrainingRowsCount");
      }

      public getTrainingRowsCount_args getEmptyArgsInstance() {
        return new getTrainingRowsCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getTrainingRowsCount_result result = new getTrainingRowsCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTrainingRowsCount_result result = new getTrainingRowsCount_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTrainingRowsCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getTrainingRowsCount(args.modelId,resultHandler);
      }
    }

    public static class getTrainingRowsCounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTrainingRowsCounts_args, List<Integer>> {
      public getTrainingRowsCounts() {
        super("getTrainingRowsCounts");
      }

      public getTrainingRowsCounts_args getEmptyArgsInstance() {
        return new getTrainingRowsCounts_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getTrainingRowsCounts_result result = new getTrainingRowsCounts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTrainingRowsCounts_result result = new getTrainingRowsCounts_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTrainingRowsCounts_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getTrainingRowsCounts(args.modelIds,resultHandler);
      }
    }

    public static class compareHyperparameters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compareHyperparameters_args, CompareHyperParametersResponse> {
      public compareHyperparameters() {
        super("compareHyperparameters");
      }

      public compareHyperparameters_args getEmptyArgsInstance() {
        return new compareHyperparameters_args();
      }

      public AsyncMethodCallback<CompareHyperParametersResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CompareHyperParametersResponse>() { 
          public void onComplete(CompareHyperParametersResponse o) {
            compareHyperparameters_result result = new compareHyperparameters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            compareHyperparameters_result result = new compareHyperparameters_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, compareHyperparameters_args args, org.apache.thrift.async.AsyncMethodCallback<CompareHyperParametersResponse> resultHandler) throws TException {
        iface.compareHyperparameters(args.modelId1, args.modelId2,resultHandler);
      }
    }

    public static class compareFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compareFeatures_args, CompareFeaturesResponse> {
      public compareFeatures() {
        super("compareFeatures");
      }

      public compareFeatures_args getEmptyArgsInstance() {
        return new compareFeatures_args();
      }

      public AsyncMethodCallback<CompareFeaturesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CompareFeaturesResponse>() { 
          public void onComplete(CompareFeaturesResponse o) {
            compareFeatures_result result = new compareFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            compareFeatures_result result = new compareFeatures_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, compareFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<CompareFeaturesResponse> resultHandler) throws TException {
        iface.compareFeatures(args.modelId1, args.modelId2,resultHandler);
      }
    }

    public static class groupByProblemType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, groupByProblemType_args, Map<ProblemType,List<Integer>>> {
      public groupByProblemType() {
        super("groupByProblemType");
      }

      public groupByProblemType_args getEmptyArgsInstance() {
        return new groupByProblemType_args();
      }

      public AsyncMethodCallback<Map<ProblemType,List<Integer>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<ProblemType,List<Integer>>>() { 
          public void onComplete(Map<ProblemType,List<Integer>> o) {
            groupByProblemType_result result = new groupByProblemType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            groupByProblemType_result result = new groupByProblemType_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, groupByProblemType_args args, org.apache.thrift.async.AsyncMethodCallback<Map<ProblemType,List<Integer>>> resultHandler) throws TException {
        iface.groupByProblemType(args.modelIds,resultHandler);
      }
    }

    public static class similarModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, similarModels_args, List<Integer>> {
      public similarModels() {
        super("similarModels");
      }

      public similarModels_args getEmptyArgsInstance() {
        return new similarModels_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            similarModels_result result = new similarModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            similarModels_result result = new similarModels_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BadRequestException) {
                        result.brEx = (BadRequestException) e;
                        result.setBrExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, similarModels_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.similarModels(args.modelId, args.compMetrics, args.numModels,resultHandler);
      }
    }

    public static class linearModelFeatureImportances<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, linearModelFeatureImportances_args, List<String>> {
      public linearModelFeatureImportances() {
        super("linearModelFeatureImportances");
      }

      public linearModelFeatureImportances_args getEmptyArgsInstance() {
        return new linearModelFeatureImportances_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            linearModelFeatureImportances_result result = new linearModelFeatureImportances_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            linearModelFeatureImportances_result result = new linearModelFeatureImportances_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IllegalOperationException) {
                        result.ioEx = (IllegalOperationException) e;
                        result.setIoExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, linearModelFeatureImportances_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.linearModelFeatureImportances(args.modelId,resultHandler);
      }
    }

    public static class compareLinearModelFeatureImportances<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compareLinearModelFeatureImportances_args, List<FeatureImportanceComparison>> {
      public compareLinearModelFeatureImportances() {
        super("compareLinearModelFeatureImportances");
      }

      public compareLinearModelFeatureImportances_args getEmptyArgsInstance() {
        return new compareLinearModelFeatureImportances_args();
      }

      public AsyncMethodCallback<List<FeatureImportanceComparison>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FeatureImportanceComparison>>() { 
          public void onComplete(List<FeatureImportanceComparison> o) {
            compareLinearModelFeatureImportances_result result = new compareLinearModelFeatureImportances_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            compareLinearModelFeatureImportances_result result = new compareLinearModelFeatureImportances_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IllegalOperationException) {
                        result.ioEx = (IllegalOperationException) e;
                        result.setIoExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, compareLinearModelFeatureImportances_args args, org.apache.thrift.async.AsyncMethodCallback<List<FeatureImportanceComparison>> resultHandler) throws TException {
        iface.compareLinearModelFeatureImportances(args.model1Id, args.model2Id,resultHandler);
      }
    }

    public static class iterationsUntilConvergence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, iterationsUntilConvergence_args, List<Integer>> {
      public iterationsUntilConvergence() {
        super("iterationsUntilConvergence");
      }

      public iterationsUntilConvergence_args getEmptyArgsInstance() {
        return new iterationsUntilConvergence_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            iterationsUntilConvergence_result result = new iterationsUntilConvergence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            iterationsUntilConvergence_result result = new iterationsUntilConvergence_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, iterationsUntilConvergence_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.iterationsUntilConvergence(args.modelIds, args.tolerance,resultHandler);
      }
    }

    public static class rankModels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rankModels_args, List<Integer>> {
      public rankModels() {
        super("rankModels");
      }

      public rankModels_args getEmptyArgsInstance() {
        return new rankModels_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            rankModels_result result = new rankModels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rankModels_result result = new rankModels_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rankModels_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.rankModels(args.modelIds, args.metric,resultHandler);
      }
    }

    public static class confidenceIntervals<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confidenceIntervals_args, List<ConfidenceInterval>> {
      public confidenceIntervals() {
        super("confidenceIntervals");
      }

      public confidenceIntervals_args getEmptyArgsInstance() {
        return new confidenceIntervals_args();
      }

      public AsyncMethodCallback<List<ConfidenceInterval>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ConfidenceInterval>>() { 
          public void onComplete(List<ConfidenceInterval> o) {
            confidenceIntervals_result result = new confidenceIntervals_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confidenceIntervals_result result = new confidenceIntervals_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IllegalOperationException) {
                        result.ioEx = (IllegalOperationException) e;
                        result.setIoExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof BadRequestException) {
                        result.brEx = (BadRequestException) e;
                        result.setBrExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confidenceIntervals_args args, org.apache.thrift.async.AsyncMethodCallback<List<ConfidenceInterval>> resultHandler) throws TException {
        iface.confidenceIntervals(args.modelId, args.sigLevel,resultHandler);
      }
    }

    public static class modelsWithFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modelsWithFeatures_args, List<Integer>> {
      public modelsWithFeatures() {
        super("modelsWithFeatures");
      }

      public modelsWithFeatures_args getEmptyArgsInstance() {
        return new modelsWithFeatures_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            modelsWithFeatures_result result = new modelsWithFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modelsWithFeatures_result result = new modelsWithFeatures_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modelsWithFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.modelsWithFeatures(args.featureNames,resultHandler);
      }
    }

    public static class modelsDerivedFromDataFrame<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modelsDerivedFromDataFrame_args, List<Integer>> {
      public modelsDerivedFromDataFrame() {
        super("modelsDerivedFromDataFrame");
      }

      public modelsDerivedFromDataFrame_args getEmptyArgsInstance() {
        return new modelsDerivedFromDataFrame_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            modelsDerivedFromDataFrame_result result = new modelsDerivedFromDataFrame_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modelsDerivedFromDataFrame_result result = new modelsDerivedFromDataFrame_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modelsDerivedFromDataFrame_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.modelsDerivedFromDataFrame(args.dfId,resultHandler);
      }
    }

    public static class getProjectIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectIds_args, List<Integer>> {
      public getProjectIds() {
        super("getProjectIds");
      }

      public getProjectIds_args getEmptyArgsInstance() {
        return new getProjectIds_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getProjectIds_result result = new getProjectIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectIds_result result = new getProjectIds_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getProjectIds(args.keyValuePairs,resultHandler);
      }
    }

    public static class getModelIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModelIds_args, List<Integer>> {
      public getModelIds() {
        super("getModelIds");
      }

      public getModelIds_args getEmptyArgsInstance() {
        return new getModelIds_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getModelIds_result result = new getModelIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getModelIds_result result = new getModelIds_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModelIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getModelIds(args.keyValuePairs,resultHandler);
      }
    }

    public static class updateProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProject_args, Boolean> {
      public updateProject() {
        super("updateProject");
      }

      public updateProject_args getEmptyArgsInstance() {
        return new updateProject_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateProject_result result = new updateProject_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProject_result result = new updateProject_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProject_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateProject(args.projectId, args.key, args.value,resultHandler);
      }
    }

    public static class createOrUpdateScalarField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrUpdateScalarField_args, Boolean> {
      public createOrUpdateScalarField() {
        super("createOrUpdateScalarField");
      }

      public createOrUpdateScalarField_args getEmptyArgsInstance() {
        return new createOrUpdateScalarField_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createOrUpdateScalarField_result result = new createOrUpdateScalarField_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createOrUpdateScalarField_result result = new createOrUpdateScalarField_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOrUpdateScalarField_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createOrUpdateScalarField(args.modelId, args.key, args.value, args.valueType,resultHandler);
      }
    }

    public static class createVectorField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createVectorField_args, Boolean> {
      public createVectorField() {
        super("createVectorField");
      }

      public createVectorField_args getEmptyArgsInstance() {
        return new createVectorField_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            createVectorField_result result = new createVectorField_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createVectorField_result result = new createVectorField_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createVectorField_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.createVectorField(args.modelId, args.vectorName, args.vectorConfig,resultHandler);
      }
    }

    public static class updateVectorField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVectorField_args, Boolean> {
      public updateVectorField() {
        super("updateVectorField");
      }

      public updateVectorField_args getEmptyArgsInstance() {
        return new updateVectorField_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateVectorField_result result = new updateVectorField_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVectorField_result result = new updateVectorField_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVectorField_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateVectorField(args.modelId, args.key, args.valueIndex, args.value, args.valueType,resultHandler);
      }
    }

    public static class appendToVectorField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, appendToVectorField_args, Boolean> {
      public appendToVectorField() {
        super("appendToVectorField");
      }

      public appendToVectorField_args getEmptyArgsInstance() {
        return new appendToVectorField_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            appendToVectorField_result result = new appendToVectorField_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            appendToVectorField_result result = new appendToVectorField_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, appendToVectorField_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.appendToVectorField(args.modelId, args.vectorName, args.value, args.valueType,resultHandler);
      }
    }

    public static class getModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModel_args, ModelResponse> {
      public getModel() {
        super("getModel");
      }

      public getModel_args getEmptyArgsInstance() {
        return new getModel_args();
      }

      public AsyncMethodCallback<ModelResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ModelResponse>() { 
          public void onComplete(ModelResponse o) {
            getModel_result result = new getModel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getModel_result result = new getModel_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModel_args args, org.apache.thrift.async.AsyncMethodCallback<ModelResponse> resultHandler) throws TException {
        iface.getModel(args.modelId,resultHandler);
      }
    }

    public static class getRunsInExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRunsInExperiment_args, List<ExperimentRun>> {
      public getRunsInExperiment() {
        super("getRunsInExperiment");
      }

      public getRunsInExperiment_args getEmptyArgsInstance() {
        return new getRunsInExperiment_args();
      }

      public AsyncMethodCallback<List<ExperimentRun>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ExperimentRun>>() { 
          public void onComplete(List<ExperimentRun> o) {
            getRunsInExperiment_result result = new getRunsInExperiment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRunsInExperiment_result result = new getRunsInExperiment_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRunsInExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<List<ExperimentRun>> resultHandler) throws TException {
        iface.getRunsInExperiment(args.experimentId,resultHandler);
      }
    }

    public static class getRunsAndExperimentsInProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRunsAndExperimentsInProject_args, ProjectExperimentsAndRuns> {
      public getRunsAndExperimentsInProject() {
        super("getRunsAndExperimentsInProject");
      }

      public getRunsAndExperimentsInProject_args getEmptyArgsInstance() {
        return new getRunsAndExperimentsInProject_args();
      }

      public AsyncMethodCallback<ProjectExperimentsAndRuns> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProjectExperimentsAndRuns>() { 
          public void onComplete(ProjectExperimentsAndRuns o) {
            getRunsAndExperimentsInProject_result result = new getRunsAndExperimentsInProject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRunsAndExperimentsInProject_result result = new getRunsAndExperimentsInProject_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRunsAndExperimentsInProject_args args, org.apache.thrift.async.AsyncMethodCallback<ProjectExperimentsAndRuns> resultHandler) throws TException {
        iface.getRunsAndExperimentsInProject(args.projId,resultHandler);
      }
    }

    public static class getProjectOverviews<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectOverviews_args, List<ProjectOverviewResponse>> {
      public getProjectOverviews() {
        super("getProjectOverviews");
      }

      public getProjectOverviews_args getEmptyArgsInstance() {
        return new getProjectOverviews_args();
      }

      public AsyncMethodCallback<List<ProjectOverviewResponse>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectOverviewResponse>>() { 
          public void onComplete(List<ProjectOverviewResponse> o) {
            getProjectOverviews_result result = new getProjectOverviews_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectOverviews_result result = new getProjectOverviews_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectOverviews_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectOverviewResponse>> resultHandler) throws TException {
        iface.getProjectOverviews(resultHandler);
      }
    }

    public static class getExperimentRunDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentRunDetails_args, ExperimentRunDetailsResponse> {
      public getExperimentRunDetails() {
        super("getExperimentRunDetails");
      }

      public getExperimentRunDetails_args getEmptyArgsInstance() {
        return new getExperimentRunDetails_args();
      }

      public AsyncMethodCallback<ExperimentRunDetailsResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExperimentRunDetailsResponse>() { 
          public void onComplete(ExperimentRunDetailsResponse o) {
            getExperimentRunDetails_result result = new getExperimentRunDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getExperimentRunDetails_result result = new getExperimentRunDetails_result();
            if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getExperimentRunDetails_args args, org.apache.thrift.async.AsyncMethodCallback<ExperimentRunDetailsResponse> resultHandler) throws TException {
        iface.getExperimentRunDetails(args.experimentRunId,resultHandler);
      }
    }

    public static class originalFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, originalFeatures_args, List<String>> {
      public originalFeatures() {
        super("originalFeatures");
      }

      public originalFeatures_args getEmptyArgsInstance() {
        return new originalFeatures_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            originalFeatures_result result = new originalFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            originalFeatures_result result = new originalFeatures_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, originalFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.originalFeatures(args.modelId,resultHandler);
      }
    }

    public static class storeTreeModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeTreeModel_args, Boolean> {
      public storeTreeModel() {
        super("storeTreeModel");
      }

      public storeTreeModel_args getEmptyArgsInstance() {
        return new storeTreeModel_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            storeTreeModel_result result = new storeTreeModel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeTreeModel_result result = new storeTreeModel_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeTreeModel_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.storeTreeModel(args.modelId, args.model,resultHandler);
      }
    }

    public static class storePipelineTransformEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storePipelineTransformEvent_args, List<TransformEventResponse>> {
      public storePipelineTransformEvent() {
        super("storePipelineTransformEvent");
      }

      public storePipelineTransformEvent_args getEmptyArgsInstance() {
        return new storePipelineTransformEvent_args();
      }

      public AsyncMethodCallback<List<TransformEventResponse>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TransformEventResponse>>() { 
          public void onComplete(List<TransformEventResponse> o) {
            storePipelineTransformEvent_result result = new storePipelineTransformEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storePipelineTransformEvent_result result = new storePipelineTransformEvent_result();
            if (e instanceof InvalidExperimentRunException) {
                        result.ierEx = (InvalidExperimentRunException) e;
                        result.setIerExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storePipelineTransformEvent_args args, org.apache.thrift.async.AsyncMethodCallback<List<TransformEventResponse>> resultHandler) throws TException {
        iface.storePipelineTransformEvent(args.te,resultHandler);
      }
    }

    public static class computeModelAncestry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeModelAncestry_args, ModelAncestryResponse> {
      public computeModelAncestry() {
        super("computeModelAncestry");
      }

      public computeModelAncestry_args getEmptyArgsInstance() {
        return new computeModelAncestry_args();
      }

      public AsyncMethodCallback<ModelAncestryResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ModelAncestryResponse>() { 
          public void onComplete(ModelAncestryResponse o) {
            computeModelAncestry_result result = new computeModelAncestry_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            computeModelAncestry_result result = new computeModelAncestry_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeModelAncestry_args args, org.apache.thrift.async.AsyncMethodCallback<ModelAncestryResponse> resultHandler) throws TException {
        iface.computeModelAncestry(args.modelId,resultHandler);
      }
    }

    public static class extractPipeline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, extractPipeline_args, ExtractedPipelineResponse> {
      public extractPipeline() {
        super("extractPipeline");
      }

      public extractPipeline_args getEmptyArgsInstance() {
        return new extractPipeline_args();
      }

      public AsyncMethodCallback<ExtractedPipelineResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExtractedPipelineResponse>() { 
          public void onComplete(ExtractedPipelineResponse o) {
            extractPipeline_result result = new extractPipeline_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            extractPipeline_result result = new extractPipeline_result();
            if (e instanceof ResourceNotFoundException) {
                        result.rnfEx = (ResourceNotFoundException) e;
                        result.setRnfExIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerLogicException) {
                        result.svEx = (ServerLogicException) e;
                        result.setSvExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, extractPipeline_args args, org.apache.thrift.async.AsyncMethodCallback<ExtractedPipelineResponse> resultHandler) throws TException {
        iface.extractPipeline(args.modelId,resultHandler);
      }
    }

  }

  public static class testConnection_args implements org.apache.thrift.TBase<testConnection_args, testConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<testConnection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnection_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testConnection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testConnection_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnection_args.class, metaDataMap);
    }

    public testConnection_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnection_args(testConnection_args other) {
    }

    public testConnection_args deepCopy() {
      return new testConnection_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnection_args)
        return this.equals((testConnection_args)that);
      return false;
    }

    public boolean equals(testConnection_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(testConnection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnection_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testConnection_argsStandardSchemeFactory implements SchemeFactory {
      public testConnection_argsStandardScheme getScheme() {
        return new testConnection_argsStandardScheme();
      }
    }

    private static class testConnection_argsStandardScheme extends StandardScheme<testConnection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testConnection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testConnection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testConnection_argsTupleSchemeFactory implements SchemeFactory {
      public testConnection_argsTupleScheme getScheme() {
        return new testConnection_argsTupleScheme();
      }
    }

    private static class testConnection_argsTupleScheme extends TupleScheme<testConnection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testConnection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class testConnection_result implements org.apache.thrift.TBase<testConnection_result, testConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<testConnection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testConnection_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testConnection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testConnection_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testConnection_result.class, metaDataMap);
    }

    public testConnection_result() {
    }

    public testConnection_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testConnection_result(testConnection_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public testConnection_result deepCopy() {
      return new testConnection_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public testConnection_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testConnection_result)
        return this.equals((testConnection_result)that);
      return false;
    }

    public boolean equals(testConnection_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(testConnection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testConnection_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testConnection_resultStandardSchemeFactory implements SchemeFactory {
      public testConnection_resultStandardScheme getScheme() {
        return new testConnection_resultStandardScheme();
      }
    }

    private static class testConnection_resultStandardScheme extends StandardScheme<testConnection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testConnection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testConnection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testConnection_resultTupleSchemeFactory implements SchemeFactory {
      public testConnection_resultTupleScheme getScheme() {
        return new testConnection_resultTupleScheme();
      }
    }

    private static class testConnection_resultTupleScheme extends TupleScheme<testConnection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testConnection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeDataFrame_args implements org.apache.thrift.TBase<storeDataFrame_args, storeDataFrame_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeDataFrame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeDataFrame_args");

    private static final org.apache.thrift.protocol.TField DF_FIELD_DESC = new org.apache.thrift.protocol.TField("df", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeDataFrame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeDataFrame_argsTupleSchemeFactory());
    }

    public DataFrame df; // required
    public int experimentRunId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DF((short)1, "df"),
      EXPERIMENT_RUN_ID((short)2, "experimentRunId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DF
            return DF;
          case 2: // EXPERIMENT_RUN_ID
            return EXPERIMENT_RUN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPERIMENTRUNID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DF, new org.apache.thrift.meta_data.FieldMetaData("df", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrame.class)));
      tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeDataFrame_args.class, metaDataMap);
    }

    public storeDataFrame_args() {
    }

    public storeDataFrame_args(
      DataFrame df,
      int experimentRunId)
    {
      this();
      this.df = df;
      this.experimentRunId = experimentRunId;
      setExperimentRunIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeDataFrame_args(storeDataFrame_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDf()) {
        this.df = new DataFrame(other.df);
      }
      this.experimentRunId = other.experimentRunId;
    }

    public storeDataFrame_args deepCopy() {
      return new storeDataFrame_args(this);
    }

    @Override
    public void clear() {
      this.df = null;
      setExperimentRunIdIsSet(false);
      this.experimentRunId = 0;
    }

    public DataFrame getDf() {
      return this.df;
    }

    public storeDataFrame_args setDf(DataFrame df) {
      this.df = df;
      return this;
    }

    public void unsetDf() {
      this.df = null;
    }

    /** Returns true if field df is set (has been assigned a value) and false otherwise */
    public boolean isSetDf() {
      return this.df != null;
    }

    public void setDfIsSet(boolean value) {
      if (!value) {
        this.df = null;
      }
    }

    public int getExperimentRunId() {
      return this.experimentRunId;
    }

    public storeDataFrame_args setExperimentRunId(int experimentRunId) {
      this.experimentRunId = experimentRunId;
      setExperimentRunIdIsSet(true);
      return this;
    }

    public void unsetExperimentRunId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
    }

    /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentRunId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
    }

    public void setExperimentRunIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DF:
        if (value == null) {
          unsetDf();
        } else {
          setDf((DataFrame)value);
        }
        break;

      case EXPERIMENT_RUN_ID:
        if (value == null) {
          unsetExperimentRunId();
        } else {
          setExperimentRunId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DF:
        return getDf();

      case EXPERIMENT_RUN_ID:
        return getExperimentRunId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DF:
        return isSetDf();
      case EXPERIMENT_RUN_ID:
        return isSetExperimentRunId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeDataFrame_args)
        return this.equals((storeDataFrame_args)that);
      return false;
    }

    public boolean equals(storeDataFrame_args that) {
      if (that == null)
        return false;

      boolean this_present_df = true && this.isSetDf();
      boolean that_present_df = true && that.isSetDf();
      if (this_present_df || that_present_df) {
        if (!(this_present_df && that_present_df))
          return false;
        if (!this.df.equals(that.df))
          return false;
      }

      boolean this_present_experimentRunId = true;
      boolean that_present_experimentRunId = true;
      if (this_present_experimentRunId || that_present_experimentRunId) {
        if (!(this_present_experimentRunId && that_present_experimentRunId))
          return false;
        if (this.experimentRunId != that.experimentRunId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_df = true && (isSetDf());
      list.add(present_df);
      if (present_df)
        list.add(df);

      boolean present_experimentRunId = true;
      list.add(present_experimentRunId);
      if (present_experimentRunId)
        list.add(experimentRunId);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeDataFrame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDf()).compareTo(other.isSetDf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.df, other.df);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentRunId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeDataFrame_args(");
      boolean first = true;

      sb.append("df:");
      if (this.df == null) {
        sb.append("null");
      } else {
        sb.append(this.df);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentRunId:");
      sb.append(this.experimentRunId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (df != null) {
        df.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeDataFrame_argsStandardSchemeFactory implements SchemeFactory {
      public storeDataFrame_argsStandardScheme getScheme() {
        return new storeDataFrame_argsStandardScheme();
      }
    }

    private static class storeDataFrame_argsStandardScheme extends StandardScheme<storeDataFrame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeDataFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.df = new DataFrame();
                struct.df.read(iprot);
                struct.setDfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXPERIMENT_RUN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.experimentRunId = iprot.readI32();
                struct.setExperimentRunIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeDataFrame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.df != null) {
          oprot.writeFieldBegin(DF_FIELD_DESC);
          struct.df.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
        oprot.writeI32(struct.experimentRunId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeDataFrame_argsTupleSchemeFactory implements SchemeFactory {
      public storeDataFrame_argsTupleScheme getScheme() {
        return new storeDataFrame_argsTupleScheme();
      }
    }

    private static class storeDataFrame_argsTupleScheme extends TupleScheme<storeDataFrame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeDataFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDf()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentRunId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDf()) {
          struct.df.write(oprot);
        }
        if (struct.isSetExperimentRunId()) {
          oprot.writeI32(struct.experimentRunId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeDataFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.df = new DataFrame();
          struct.df.read(iprot);
          struct.setDfIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentRunId = iprot.readI32();
          struct.setExperimentRunIdIsSet(true);
        }
      }
    }

  }

  public static class storeDataFrame_result implements org.apache.thrift.TBase<storeDataFrame_result, storeDataFrame_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeDataFrame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeDataFrame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField IER_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ierEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeDataFrame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeDataFrame_resultTupleSchemeFactory());
    }

    public int success; // required
    public InvalidExperimentRunException ierEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IER_EX((short)1, "ierEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IER_EX
            return IER_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IER_EX, new org.apache.thrift.meta_data.FieldMetaData("ierEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeDataFrame_result.class, metaDataMap);
    }

    public storeDataFrame_result() {
    }

    public storeDataFrame_result(
      int success,
      InvalidExperimentRunException ierEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ierEx = ierEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeDataFrame_result(storeDataFrame_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIerEx()) {
        this.ierEx = new InvalidExperimentRunException(other.ierEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeDataFrame_result deepCopy() {
      return new storeDataFrame_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ierEx = null;
      this.svEx = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public storeDataFrame_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public InvalidExperimentRunException getIerEx() {
      return this.ierEx;
    }

    public storeDataFrame_result setIerEx(InvalidExperimentRunException ierEx) {
      this.ierEx = ierEx;
      return this;
    }

    public void unsetIerEx() {
      this.ierEx = null;
    }

    /** Returns true if field ierEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIerEx() {
      return this.ierEx != null;
    }

    public void setIerExIsSet(boolean value) {
      if (!value) {
        this.ierEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeDataFrame_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case IER_EX:
        if (value == null) {
          unsetIerEx();
        } else {
          setIerEx((InvalidExperimentRunException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IER_EX:
        return getIerEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IER_EX:
        return isSetIerEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeDataFrame_result)
        return this.equals((storeDataFrame_result)that);
      return false;
    }

    public boolean equals(storeDataFrame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ierEx = true && this.isSetIerEx();
      boolean that_present_ierEx = true && that.isSetIerEx();
      if (this_present_ierEx || that_present_ierEx) {
        if (!(this_present_ierEx && that_present_ierEx))
          return false;
        if (!this.ierEx.equals(that.ierEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ierEx = true && (isSetIerEx());
      list.add(present_ierEx);
      if (present_ierEx)
        list.add(ierEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeDataFrame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIerEx()).compareTo(other.isSetIerEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIerEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ierEx, other.ierEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeDataFrame_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ierEx:");
      if (this.ierEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ierEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeDataFrame_resultStandardSchemeFactory implements SchemeFactory {
      public storeDataFrame_resultStandardScheme getScheme() {
        return new storeDataFrame_resultStandardScheme();
      }
    }

    private static class storeDataFrame_resultStandardScheme extends StandardScheme<storeDataFrame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeDataFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IER_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ierEx = new InvalidExperimentRunException();
                struct.ierEx.read(iprot);
                struct.setIerExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeDataFrame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ierEx != null) {
          oprot.writeFieldBegin(IER_EX_FIELD_DESC);
          struct.ierEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeDataFrame_resultTupleSchemeFactory implements SchemeFactory {
      public storeDataFrame_resultTupleScheme getScheme() {
        return new storeDataFrame_resultTupleScheme();
      }
    }

    private static class storeDataFrame_resultTupleScheme extends TupleScheme<storeDataFrame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeDataFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIerEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetIerEx()) {
          struct.ierEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeDataFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ierEx = new InvalidExperimentRunException();
          struct.ierEx.read(iprot);
          struct.setIerExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class pathForTransformer_args implements org.apache.thrift.TBase<pathForTransformer_args, pathForTransformer_args._Fields>, java.io.Serializable, Cloneable, Comparable<pathForTransformer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pathForTransformer_args");

    private static final org.apache.thrift.protocol.TField TRANSFORMER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transformerId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pathForTransformer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pathForTransformer_argsTupleSchemeFactory());
    }

    public int transformerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFORMER_ID((short)1, "transformerId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFORMER_ID
            return TRANSFORMER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TRANSFORMERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFORMER_ID, new org.apache.thrift.meta_data.FieldMetaData("transformerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pathForTransformer_args.class, metaDataMap);
    }

    public pathForTransformer_args() {
    }

    public pathForTransformer_args(
      int transformerId)
    {
      this();
      this.transformerId = transformerId;
      setTransformerIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pathForTransformer_args(pathForTransformer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.transformerId = other.transformerId;
    }

    public pathForTransformer_args deepCopy() {
      return new pathForTransformer_args(this);
    }

    @Override
    public void clear() {
      setTransformerIdIsSet(false);
      this.transformerId = 0;
    }

    public int getTransformerId() {
      return this.transformerId;
    }

    public pathForTransformer_args setTransformerId(int transformerId) {
      this.transformerId = transformerId;
      setTransformerIdIsSet(true);
      return this;
    }

    public void unsetTransformerId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSFORMERID_ISSET_ID);
    }

    /** Returns true if field transformerId is set (has been assigned a value) and false otherwise */
    public boolean isSetTransformerId() {
      return EncodingUtils.testBit(__isset_bitfield, __TRANSFORMERID_ISSET_ID);
    }

    public void setTransformerIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSFORMERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSFORMER_ID:
        if (value == null) {
          unsetTransformerId();
        } else {
          setTransformerId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFORMER_ID:
        return getTransformerId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSFORMER_ID:
        return isSetTransformerId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pathForTransformer_args)
        return this.equals((pathForTransformer_args)that);
      return false;
    }

    public boolean equals(pathForTransformer_args that) {
      if (that == null)
        return false;

      boolean this_present_transformerId = true;
      boolean that_present_transformerId = true;
      if (this_present_transformerId || that_present_transformerId) {
        if (!(this_present_transformerId && that_present_transformerId))
          return false;
        if (this.transformerId != that.transformerId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_transformerId = true;
      list.add(present_transformerId);
      if (present_transformerId)
        list.add(transformerId);

      return list.hashCode();
    }

    @Override
    public int compareTo(pathForTransformer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransformerId()).compareTo(other.isSetTransformerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransformerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transformerId, other.transformerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pathForTransformer_args(");
      boolean first = true;

      sb.append("transformerId:");
      sb.append(this.transformerId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pathForTransformer_argsStandardSchemeFactory implements SchemeFactory {
      public pathForTransformer_argsStandardScheme getScheme() {
        return new pathForTransformer_argsStandardScheme();
      }
    }

    private static class pathForTransformer_argsStandardScheme extends StandardScheme<pathForTransformer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pathForTransformer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFORMER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.transformerId = iprot.readI32();
                struct.setTransformerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pathForTransformer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TRANSFORMER_ID_FIELD_DESC);
        oprot.writeI32(struct.transformerId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pathForTransformer_argsTupleSchemeFactory implements SchemeFactory {
      public pathForTransformer_argsTupleScheme getScheme() {
        return new pathForTransformer_argsTupleScheme();
      }
    }

    private static class pathForTransformer_argsTupleScheme extends TupleScheme<pathForTransformer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pathForTransformer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransformerId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransformerId()) {
          oprot.writeI32(struct.transformerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pathForTransformer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transformerId = iprot.readI32();
          struct.setTransformerIdIsSet(true);
        }
      }
    }

  }

  public static class pathForTransformer_result implements org.apache.thrift.TBase<pathForTransformer_result, pathForTransformer_result._Fields>, java.io.Serializable, Cloneable, Comparable<pathForTransformer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pathForTransformer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("efEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pathForTransformer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pathForTransformer_resultTupleSchemeFactory());
    }

    public String success; // required
    public ResourceNotFoundException rnfEx; // required
    public InvalidFieldException efEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      EF_EX((short)2, "efEx"),
      SV_EX((short)3, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // EF_EX
            return EF_EX;
          case 3: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EF_EX, new org.apache.thrift.meta_data.FieldMetaData("efEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pathForTransformer_result.class, metaDataMap);
    }

    public pathForTransformer_result() {
    }

    public pathForTransformer_result(
      String success,
      ResourceNotFoundException rnfEx,
      InvalidFieldException efEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.efEx = efEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pathForTransformer_result(pathForTransformer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetEfEx()) {
        this.efEx = new InvalidFieldException(other.efEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public pathForTransformer_result deepCopy() {
      return new pathForTransformer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.efEx = null;
      this.svEx = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public pathForTransformer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public pathForTransformer_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public InvalidFieldException getEfEx() {
      return this.efEx;
    }

    public pathForTransformer_result setEfEx(InvalidFieldException efEx) {
      this.efEx = efEx;
      return this;
    }

    public void unsetEfEx() {
      this.efEx = null;
    }

    /** Returns true if field efEx is set (has been assigned a value) and false otherwise */
    public boolean isSetEfEx() {
      return this.efEx != null;
    }

    public void setEfExIsSet(boolean value) {
      if (!value) {
        this.efEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public pathForTransformer_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case EF_EX:
        if (value == null) {
          unsetEfEx();
        } else {
          setEfEx((InvalidFieldException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case EF_EX:
        return getEfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case EF_EX:
        return isSetEfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pathForTransformer_result)
        return this.equals((pathForTransformer_result)that);
      return false;
    }

    public boolean equals(pathForTransformer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_efEx = true && this.isSetEfEx();
      boolean that_present_efEx = true && that.isSetEfEx();
      if (this_present_efEx || that_present_efEx) {
        if (!(this_present_efEx && that_present_efEx))
          return false;
        if (!this.efEx.equals(that.efEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_efEx = true && (isSetEfEx());
      list.add(present_efEx);
      if (present_efEx)
        list.add(efEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(pathForTransformer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEfEx()).compareTo(other.isSetEfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.efEx, other.efEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pathForTransformer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("efEx:");
      if (this.efEx == null) {
        sb.append("null");
      } else {
        sb.append(this.efEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pathForTransformer_resultStandardSchemeFactory implements SchemeFactory {
      public pathForTransformer_resultStandardScheme getScheme() {
        return new pathForTransformer_resultStandardScheme();
      }
    }

    private static class pathForTransformer_resultStandardScheme extends StandardScheme<pathForTransformer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pathForTransformer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.efEx = new InvalidFieldException();
                struct.efEx.read(iprot);
                struct.setEfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pathForTransformer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.efEx != null) {
          oprot.writeFieldBegin(EF_EX_FIELD_DESC);
          struct.efEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pathForTransformer_resultTupleSchemeFactory implements SchemeFactory {
      public pathForTransformer_resultTupleScheme getScheme() {
        return new pathForTransformer_resultTupleScheme();
      }
    }

    private static class pathForTransformer_resultTupleScheme extends TupleScheme<pathForTransformer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pathForTransformer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetEfEx()) {
          optionals.set(2);
        }
        if (struct.isSetSvEx()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetEfEx()) {
          struct.efEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pathForTransformer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.efEx = new InvalidFieldException();
          struct.efEx.read(iprot);
          struct.setEfExIsSet(true);
        }
        if (incoming.get(3)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeFitEvent_args implements org.apache.thrift.TBase<storeFitEvent_args, storeFitEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeFitEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeFitEvent_args");

    private static final org.apache.thrift.protocol.TField FE_FIELD_DESC = new org.apache.thrift.protocol.TField("fe", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeFitEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeFitEvent_argsTupleSchemeFactory());
    }

    public FitEvent fe; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FE((short)1, "fe");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FE
            return FE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FE, new org.apache.thrift.meta_data.FieldMetaData("fe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FitEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeFitEvent_args.class, metaDataMap);
    }

    public storeFitEvent_args() {
    }

    public storeFitEvent_args(
      FitEvent fe)
    {
      this();
      this.fe = fe;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeFitEvent_args(storeFitEvent_args other) {
      if (other.isSetFe()) {
        this.fe = new FitEvent(other.fe);
      }
    }

    public storeFitEvent_args deepCopy() {
      return new storeFitEvent_args(this);
    }

    @Override
    public void clear() {
      this.fe = null;
    }

    public FitEvent getFe() {
      return this.fe;
    }

    public storeFitEvent_args setFe(FitEvent fe) {
      this.fe = fe;
      return this;
    }

    public void unsetFe() {
      this.fe = null;
    }

    /** Returns true if field fe is set (has been assigned a value) and false otherwise */
    public boolean isSetFe() {
      return this.fe != null;
    }

    public void setFeIsSet(boolean value) {
      if (!value) {
        this.fe = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FE:
        if (value == null) {
          unsetFe();
        } else {
          setFe((FitEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FE:
        return getFe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FE:
        return isSetFe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeFitEvent_args)
        return this.equals((storeFitEvent_args)that);
      return false;
    }

    public boolean equals(storeFitEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_fe = true && this.isSetFe();
      boolean that_present_fe = true && that.isSetFe();
      if (this_present_fe || that_present_fe) {
        if (!(this_present_fe && that_present_fe))
          return false;
        if (!this.fe.equals(that.fe))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fe = true && (isSetFe());
      list.add(present_fe);
      if (present_fe)
        list.add(fe);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeFitEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFe()).compareTo(other.isSetFe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fe, other.fe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeFitEvent_args(");
      boolean first = true;

      sb.append("fe:");
      if (this.fe == null) {
        sb.append("null");
      } else {
        sb.append(this.fe);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fe != null) {
        fe.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeFitEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeFitEvent_argsStandardScheme getScheme() {
        return new storeFitEvent_argsStandardScheme();
      }
    }

    private static class storeFitEvent_argsStandardScheme extends StandardScheme<storeFitEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeFitEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fe = new FitEvent();
                struct.fe.read(iprot);
                struct.setFeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeFitEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fe != null) {
          oprot.writeFieldBegin(FE_FIELD_DESC);
          struct.fe.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeFitEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeFitEvent_argsTupleScheme getScheme() {
        return new storeFitEvent_argsTupleScheme();
      }
    }

    private static class storeFitEvent_argsTupleScheme extends TupleScheme<storeFitEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeFitEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFe()) {
          struct.fe.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeFitEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fe = new FitEvent();
          struct.fe.read(iprot);
          struct.setFeIsSet(true);
        }
      }
    }

  }

  public static class storeFitEvent_result implements org.apache.thrift.TBase<storeFitEvent_result, storeFitEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeFitEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeFitEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IER_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ierEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeFitEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeFitEvent_resultTupleSchemeFactory());
    }

    public FitEventResponse success; // required
    public InvalidExperimentRunException ierEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IER_EX((short)1, "ierEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IER_EX
            return IER_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FitEventResponse.class)));
      tmpMap.put(_Fields.IER_EX, new org.apache.thrift.meta_data.FieldMetaData("ierEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeFitEvent_result.class, metaDataMap);
    }

    public storeFitEvent_result() {
    }

    public storeFitEvent_result(
      FitEventResponse success,
      InvalidExperimentRunException ierEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.ierEx = ierEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeFitEvent_result(storeFitEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new FitEventResponse(other.success);
      }
      if (other.isSetIerEx()) {
        this.ierEx = new InvalidExperimentRunException(other.ierEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeFitEvent_result deepCopy() {
      return new storeFitEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ierEx = null;
      this.svEx = null;
    }

    public FitEventResponse getSuccess() {
      return this.success;
    }

    public storeFitEvent_result setSuccess(FitEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidExperimentRunException getIerEx() {
      return this.ierEx;
    }

    public storeFitEvent_result setIerEx(InvalidExperimentRunException ierEx) {
      this.ierEx = ierEx;
      return this;
    }

    public void unsetIerEx() {
      this.ierEx = null;
    }

    /** Returns true if field ierEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIerEx() {
      return this.ierEx != null;
    }

    public void setIerExIsSet(boolean value) {
      if (!value) {
        this.ierEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeFitEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FitEventResponse)value);
        }
        break;

      case IER_EX:
        if (value == null) {
          unsetIerEx();
        } else {
          setIerEx((InvalidExperimentRunException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IER_EX:
        return getIerEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IER_EX:
        return isSetIerEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeFitEvent_result)
        return this.equals((storeFitEvent_result)that);
      return false;
    }

    public boolean equals(storeFitEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ierEx = true && this.isSetIerEx();
      boolean that_present_ierEx = true && that.isSetIerEx();
      if (this_present_ierEx || that_present_ierEx) {
        if (!(this_present_ierEx && that_present_ierEx))
          return false;
        if (!this.ierEx.equals(that.ierEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ierEx = true && (isSetIerEx());
      list.add(present_ierEx);
      if (present_ierEx)
        list.add(ierEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeFitEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIerEx()).compareTo(other.isSetIerEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIerEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ierEx, other.ierEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeFitEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ierEx:");
      if (this.ierEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ierEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeFitEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeFitEvent_resultStandardScheme getScheme() {
        return new storeFitEvent_resultStandardScheme();
      }
    }

    private static class storeFitEvent_resultStandardScheme extends StandardScheme<storeFitEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeFitEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FitEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IER_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ierEx = new InvalidExperimentRunException();
                struct.ierEx.read(iprot);
                struct.setIerExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeFitEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ierEx != null) {
          oprot.writeFieldBegin(IER_EX_FIELD_DESC);
          struct.ierEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeFitEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeFitEvent_resultTupleScheme getScheme() {
        return new storeFitEvent_resultTupleScheme();
      }
    }

    private static class storeFitEvent_resultTupleScheme extends TupleScheme<storeFitEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeFitEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIerEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIerEx()) {
          struct.ierEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeFitEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new FitEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ierEx = new InvalidExperimentRunException();
          struct.ierEx.read(iprot);
          struct.setIerExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeMetricEvent_args implements org.apache.thrift.TBase<storeMetricEvent_args, storeMetricEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeMetricEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeMetricEvent_args");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeMetricEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeMetricEvent_argsTupleSchemeFactory());
    }

    public MetricEvent me; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeMetricEvent_args.class, metaDataMap);
    }

    public storeMetricEvent_args() {
    }

    public storeMetricEvent_args(
      MetricEvent me)
    {
      this();
      this.me = me;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeMetricEvent_args(storeMetricEvent_args other) {
      if (other.isSetMe()) {
        this.me = new MetricEvent(other.me);
      }
    }

    public storeMetricEvent_args deepCopy() {
      return new storeMetricEvent_args(this);
    }

    @Override
    public void clear() {
      this.me = null;
    }

    public MetricEvent getMe() {
      return this.me;
    }

    public storeMetricEvent_args setMe(MetricEvent me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((MetricEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeMetricEvent_args)
        return this.equals((storeMetricEvent_args)that);
      return false;
    }

    public boolean equals(storeMetricEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_me = true && (isSetMe());
      list.add(present_me);
      if (present_me)
        list.add(me);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeMetricEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(other.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, other.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeMetricEvent_args(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (me != null) {
        me.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeMetricEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeMetricEvent_argsStandardScheme getScheme() {
        return new storeMetricEvent_argsStandardScheme();
      }
    }

    private static class storeMetricEvent_argsStandardScheme extends StandardScheme<storeMetricEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeMetricEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new MetricEvent();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeMetricEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeMetricEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeMetricEvent_argsTupleScheme getScheme() {
        return new storeMetricEvent_argsTupleScheme();
      }
    }

    private static class storeMetricEvent_argsTupleScheme extends TupleScheme<storeMetricEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeMetricEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeMetricEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.me = new MetricEvent();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
      }
    }

  }

  public static class storeMetricEvent_result implements org.apache.thrift.TBase<storeMetricEvent_result, storeMetricEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeMetricEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeMetricEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IER_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ierEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeMetricEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeMetricEvent_resultTupleSchemeFactory());
    }

    public MetricEventResponse success; // required
    public InvalidExperimentRunException ierEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IER_EX((short)1, "ierEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IER_EX
            return IER_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MetricEventResponse.class)));
      tmpMap.put(_Fields.IER_EX, new org.apache.thrift.meta_data.FieldMetaData("ierEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeMetricEvent_result.class, metaDataMap);
    }

    public storeMetricEvent_result() {
    }

    public storeMetricEvent_result(
      MetricEventResponse success,
      InvalidExperimentRunException ierEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.ierEx = ierEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeMetricEvent_result(storeMetricEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new MetricEventResponse(other.success);
      }
      if (other.isSetIerEx()) {
        this.ierEx = new InvalidExperimentRunException(other.ierEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeMetricEvent_result deepCopy() {
      return new storeMetricEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ierEx = null;
      this.svEx = null;
    }

    public MetricEventResponse getSuccess() {
      return this.success;
    }

    public storeMetricEvent_result setSuccess(MetricEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidExperimentRunException getIerEx() {
      return this.ierEx;
    }

    public storeMetricEvent_result setIerEx(InvalidExperimentRunException ierEx) {
      this.ierEx = ierEx;
      return this;
    }

    public void unsetIerEx() {
      this.ierEx = null;
    }

    /** Returns true if field ierEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIerEx() {
      return this.ierEx != null;
    }

    public void setIerExIsSet(boolean value) {
      if (!value) {
        this.ierEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeMetricEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MetricEventResponse)value);
        }
        break;

      case IER_EX:
        if (value == null) {
          unsetIerEx();
        } else {
          setIerEx((InvalidExperimentRunException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IER_EX:
        return getIerEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IER_EX:
        return isSetIerEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeMetricEvent_result)
        return this.equals((storeMetricEvent_result)that);
      return false;
    }

    public boolean equals(storeMetricEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ierEx = true && this.isSetIerEx();
      boolean that_present_ierEx = true && that.isSetIerEx();
      if (this_present_ierEx || that_present_ierEx) {
        if (!(this_present_ierEx && that_present_ierEx))
          return false;
        if (!this.ierEx.equals(that.ierEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ierEx = true && (isSetIerEx());
      list.add(present_ierEx);
      if (present_ierEx)
        list.add(ierEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeMetricEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIerEx()).compareTo(other.isSetIerEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIerEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ierEx, other.ierEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeMetricEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ierEx:");
      if (this.ierEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ierEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeMetricEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeMetricEvent_resultStandardScheme getScheme() {
        return new storeMetricEvent_resultStandardScheme();
      }
    }

    private static class storeMetricEvent_resultStandardScheme extends StandardScheme<storeMetricEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeMetricEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MetricEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IER_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ierEx = new InvalidExperimentRunException();
                struct.ierEx.read(iprot);
                struct.setIerExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeMetricEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ierEx != null) {
          oprot.writeFieldBegin(IER_EX_FIELD_DESC);
          struct.ierEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeMetricEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeMetricEvent_resultTupleScheme getScheme() {
        return new storeMetricEvent_resultTupleScheme();
      }
    }

    private static class storeMetricEvent_resultTupleScheme extends TupleScheme<storeMetricEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeMetricEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIerEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIerEx()) {
          struct.ierEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeMetricEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new MetricEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ierEx = new InvalidExperimentRunException();
          struct.ierEx.read(iprot);
          struct.setIerExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getFilePath_args implements org.apache.thrift.TBase<getFilePath_args, getFilePath_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFilePath_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilePath_args");

    private static final org.apache.thrift.protocol.TField T_FIELD_DESC = new org.apache.thrift.protocol.TField("t", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilePath_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilePath_argsTupleSchemeFactory());
    }

    public Transformer t; // required
    public int experimentRunId; // required
    public String filename; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      T((short)1, "t"),
      EXPERIMENT_RUN_ID((short)2, "experimentRunId"),
      FILENAME((short)3, "filename");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // T
            return T;
          case 2: // EXPERIMENT_RUN_ID
            return EXPERIMENT_RUN_ID;
          case 3: // FILENAME
            return FILENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPERIMENTRUNID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.T, new org.apache.thrift.meta_data.FieldMetaData("t", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transformer.class)));
      tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilePath_args.class, metaDataMap);
    }

    public getFilePath_args() {
    }

    public getFilePath_args(
      Transformer t,
      int experimentRunId,
      String filename)
    {
      this();
      this.t = t;
      this.experimentRunId = experimentRunId;
      setExperimentRunIdIsSet(true);
      this.filename = filename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilePath_args(getFilePath_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetT()) {
        this.t = new Transformer(other.t);
      }
      this.experimentRunId = other.experimentRunId;
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
    }

    public getFilePath_args deepCopy() {
      return new getFilePath_args(this);
    }

    @Override
    public void clear() {
      this.t = null;
      setExperimentRunIdIsSet(false);
      this.experimentRunId = 0;
      this.filename = null;
    }

    public Transformer getT() {
      return this.t;
    }

    public getFilePath_args setT(Transformer t) {
      this.t = t;
      return this;
    }

    public void unsetT() {
      this.t = null;
    }

    /** Returns true if field t is set (has been assigned a value) and false otherwise */
    public boolean isSetT() {
      return this.t != null;
    }

    public void setTIsSet(boolean value) {
      if (!value) {
        this.t = null;
      }
    }

    public int getExperimentRunId() {
      return this.experimentRunId;
    }

    public getFilePath_args setExperimentRunId(int experimentRunId) {
      this.experimentRunId = experimentRunId;
      setExperimentRunIdIsSet(true);
      return this;
    }

    public void unsetExperimentRunId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
    }

    /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentRunId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
    }

    public void setExperimentRunIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
    }

    public String getFilename() {
      return this.filename;
    }

    public getFilePath_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case T:
        if (value == null) {
          unsetT();
        } else {
          setT((Transformer)value);
        }
        break;

      case EXPERIMENT_RUN_ID:
        if (value == null) {
          unsetExperimentRunId();
        } else {
          setExperimentRunId((Integer)value);
        }
        break;

      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case T:
        return getT();

      case EXPERIMENT_RUN_ID:
        return getExperimentRunId();

      case FILENAME:
        return getFilename();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case T:
        return isSetT();
      case EXPERIMENT_RUN_ID:
        return isSetExperimentRunId();
      case FILENAME:
        return isSetFilename();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilePath_args)
        return this.equals((getFilePath_args)that);
      return false;
    }

    public boolean equals(getFilePath_args that) {
      if (that == null)
        return false;

      boolean this_present_t = true && this.isSetT();
      boolean that_present_t = true && that.isSetT();
      if (this_present_t || that_present_t) {
        if (!(this_present_t && that_present_t))
          return false;
        if (!this.t.equals(that.t))
          return false;
      }

      boolean this_present_experimentRunId = true;
      boolean that_present_experimentRunId = true;
      if (this_present_experimentRunId || that_present_experimentRunId) {
        if (!(this_present_experimentRunId && that_present_experimentRunId))
          return false;
        if (this.experimentRunId != that.experimentRunId)
          return false;
      }

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_t = true && (isSetT());
      list.add(present_t);
      if (present_t)
        list.add(t);

      boolean present_experimentRunId = true;
      list.add(present_experimentRunId);
      if (present_experimentRunId)
        list.add(experimentRunId);

      boolean present_filename = true && (isSetFilename());
      list.add(present_filename);
      if (present_filename)
        list.add(filename);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilePath_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetT()).compareTo(other.isSetT());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetT()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t, other.t);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentRunId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilePath_args(");
      boolean first = true;

      sb.append("t:");
      if (this.t == null) {
        sb.append("null");
      } else {
        sb.append(this.t);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("experimentRunId:");
      sb.append(this.experimentRunId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (t != null) {
        t.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilePath_argsStandardSchemeFactory implements SchemeFactory {
      public getFilePath_argsStandardScheme getScheme() {
        return new getFilePath_argsStandardScheme();
      }
    }

    private static class getFilePath_argsStandardScheme extends StandardScheme<getFilePath_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilePath_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // T
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.t = new Transformer();
                struct.t.read(iprot);
                struct.setTIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXPERIMENT_RUN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.experimentRunId = iprot.readI32();
                struct.setExperimentRunIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilePath_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.t != null) {
          oprot.writeFieldBegin(T_FIELD_DESC);
          struct.t.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
        oprot.writeI32(struct.experimentRunId);
        oprot.writeFieldEnd();
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilePath_argsTupleSchemeFactory implements SchemeFactory {
      public getFilePath_argsTupleScheme getScheme() {
        return new getFilePath_argsTupleScheme();
      }
    }

    private static class getFilePath_argsTupleScheme extends TupleScheme<getFilePath_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilePath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetT()) {
          optionals.set(0);
        }
        if (struct.isSetExperimentRunId()) {
          optionals.set(1);
        }
        if (struct.isSetFilename()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetT()) {
          struct.t.write(oprot);
        }
        if (struct.isSetExperimentRunId()) {
          oprot.writeI32(struct.experimentRunId);
        }
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilePath_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.t = new Transformer();
          struct.t.read(iprot);
          struct.setTIsSet(true);
        }
        if (incoming.get(1)) {
          struct.experimentRunId = iprot.readI32();
          struct.setExperimentRunIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
      }
    }

  }

  public static class getFilePath_result implements org.apache.thrift.TBase<getFilePath_result, getFilePath_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFilePath_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilePath_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilePath_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilePath_resultTupleSchemeFactory());
    }

    public String success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilePath_result.class, metaDataMap);
    }

    public getFilePath_result() {
    }

    public getFilePath_result(
      String success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilePath_result(getFilePath_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getFilePath_result deepCopy() {
      return new getFilePath_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFilePath_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getFilePath_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getFilePath_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilePath_result)
        return this.equals((getFilePath_result)that);
      return false;
    }

    public boolean equals(getFilePath_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilePath_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilePath_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilePath_resultStandardSchemeFactory implements SchemeFactory {
      public getFilePath_resultStandardScheme getScheme() {
        return new getFilePath_resultStandardScheme();
      }
    }

    private static class getFilePath_resultStandardScheme extends StandardScheme<getFilePath_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilePath_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilePath_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilePath_resultTupleSchemeFactory implements SchemeFactory {
      public getFilePath_resultTupleScheme getScheme() {
        return new getFilePath_resultTupleScheme();
      }
    }

    private static class getFilePath_resultTupleScheme extends TupleScheme<getFilePath_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilePath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilePath_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeTransformEvent_args implements org.apache.thrift.TBase<storeTransformEvent_args, storeTransformEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeTransformEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeTransformEvent_args");

    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeTransformEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeTransformEvent_argsTupleSchemeFactory());
    }

    public TransformEvent te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TE((short)1, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeTransformEvent_args.class, metaDataMap);
    }

    public storeTransformEvent_args() {
    }

    public storeTransformEvent_args(
      TransformEvent te)
    {
      this();
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeTransformEvent_args(storeTransformEvent_args other) {
      if (other.isSetTe()) {
        this.te = new TransformEvent(other.te);
      }
    }

    public storeTransformEvent_args deepCopy() {
      return new storeTransformEvent_args(this);
    }

    @Override
    public void clear() {
      this.te = null;
    }

    public TransformEvent getTe() {
      return this.te;
    }

    public storeTransformEvent_args setTe(TransformEvent te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TransformEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeTransformEvent_args)
        return this.equals((storeTransformEvent_args)that);
      return false;
    }

    public boolean equals(storeTransformEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeTransformEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeTransformEvent_args(");
      boolean first = true;

      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (te != null) {
        te.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeTransformEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeTransformEvent_argsStandardScheme getScheme() {
        return new storeTransformEvent_argsStandardScheme();
      }
    }

    private static class storeTransformEvent_argsStandardScheme extends StandardScheme<storeTransformEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeTransformEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.te = new TransformEvent();
                struct.te.read(iprot);
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeTransformEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          struct.te.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeTransformEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeTransformEvent_argsTupleScheme getScheme() {
        return new storeTransformEvent_argsTupleScheme();
      }
    }

    private static class storeTransformEvent_argsTupleScheme extends TupleScheme<storeTransformEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeTransformEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTe()) {
          struct.te.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeTransformEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.te = new TransformEvent();
          struct.te.read(iprot);
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class storeTransformEvent_result implements org.apache.thrift.TBase<storeTransformEvent_result, storeTransformEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeTransformEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeTransformEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IER_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ierEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeTransformEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeTransformEvent_resultTupleSchemeFactory());
    }

    public TransformEventResponse success; // required
    public InvalidExperimentRunException ierEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IER_EX((short)1, "ierEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IER_EX
            return IER_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformEventResponse.class)));
      tmpMap.put(_Fields.IER_EX, new org.apache.thrift.meta_data.FieldMetaData("ierEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeTransformEvent_result.class, metaDataMap);
    }

    public storeTransformEvent_result() {
    }

    public storeTransformEvent_result(
      TransformEventResponse success,
      InvalidExperimentRunException ierEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.ierEx = ierEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeTransformEvent_result(storeTransformEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new TransformEventResponse(other.success);
      }
      if (other.isSetIerEx()) {
        this.ierEx = new InvalidExperimentRunException(other.ierEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeTransformEvent_result deepCopy() {
      return new storeTransformEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ierEx = null;
      this.svEx = null;
    }

    public TransformEventResponse getSuccess() {
      return this.success;
    }

    public storeTransformEvent_result setSuccess(TransformEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidExperimentRunException getIerEx() {
      return this.ierEx;
    }

    public storeTransformEvent_result setIerEx(InvalidExperimentRunException ierEx) {
      this.ierEx = ierEx;
      return this;
    }

    public void unsetIerEx() {
      this.ierEx = null;
    }

    /** Returns true if field ierEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIerEx() {
      return this.ierEx != null;
    }

    public void setIerExIsSet(boolean value) {
      if (!value) {
        this.ierEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeTransformEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransformEventResponse)value);
        }
        break;

      case IER_EX:
        if (value == null) {
          unsetIerEx();
        } else {
          setIerEx((InvalidExperimentRunException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IER_EX:
        return getIerEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IER_EX:
        return isSetIerEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeTransformEvent_result)
        return this.equals((storeTransformEvent_result)that);
      return false;
    }

    public boolean equals(storeTransformEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ierEx = true && this.isSetIerEx();
      boolean that_present_ierEx = true && that.isSetIerEx();
      if (this_present_ierEx || that_present_ierEx) {
        if (!(this_present_ierEx && that_present_ierEx))
          return false;
        if (!this.ierEx.equals(that.ierEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ierEx = true && (isSetIerEx());
      list.add(present_ierEx);
      if (present_ierEx)
        list.add(ierEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeTransformEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIerEx()).compareTo(other.isSetIerEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIerEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ierEx, other.ierEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeTransformEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ierEx:");
      if (this.ierEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ierEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeTransformEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeTransformEvent_resultStandardScheme getScheme() {
        return new storeTransformEvent_resultStandardScheme();
      }
    }

    private static class storeTransformEvent_resultStandardScheme extends StandardScheme<storeTransformEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeTransformEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TransformEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IER_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ierEx = new InvalidExperimentRunException();
                struct.ierEx.read(iprot);
                struct.setIerExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeTransformEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ierEx != null) {
          oprot.writeFieldBegin(IER_EX_FIELD_DESC);
          struct.ierEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeTransformEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeTransformEvent_resultTupleScheme getScheme() {
        return new storeTransformEvent_resultTupleScheme();
      }
    }

    private static class storeTransformEvent_resultTupleScheme extends TupleScheme<storeTransformEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeTransformEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIerEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIerEx()) {
          struct.ierEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeTransformEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TransformEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ierEx = new InvalidExperimentRunException();
          struct.ierEx.read(iprot);
          struct.setIerExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeRandomSplitEvent_args implements org.apache.thrift.TBase<storeRandomSplitEvent_args, storeRandomSplitEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeRandomSplitEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeRandomSplitEvent_args");

    private static final org.apache.thrift.protocol.TField RSE_FIELD_DESC = new org.apache.thrift.protocol.TField("rse", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeRandomSplitEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeRandomSplitEvent_argsTupleSchemeFactory());
    }

    public RandomSplitEvent rse; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RSE((short)1, "rse");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RSE
            return RSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RSE, new org.apache.thrift.meta_data.FieldMetaData("rse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RandomSplitEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeRandomSplitEvent_args.class, metaDataMap);
    }

    public storeRandomSplitEvent_args() {
    }

    public storeRandomSplitEvent_args(
      RandomSplitEvent rse)
    {
      this();
      this.rse = rse;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeRandomSplitEvent_args(storeRandomSplitEvent_args other) {
      if (other.isSetRse()) {
        this.rse = new RandomSplitEvent(other.rse);
      }
    }

    public storeRandomSplitEvent_args deepCopy() {
      return new storeRandomSplitEvent_args(this);
    }

    @Override
    public void clear() {
      this.rse = null;
    }

    public RandomSplitEvent getRse() {
      return this.rse;
    }

    public storeRandomSplitEvent_args setRse(RandomSplitEvent rse) {
      this.rse = rse;
      return this;
    }

    public void unsetRse() {
      this.rse = null;
    }

    /** Returns true if field rse is set (has been assigned a value) and false otherwise */
    public boolean isSetRse() {
      return this.rse != null;
    }

    public void setRseIsSet(boolean value) {
      if (!value) {
        this.rse = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RSE:
        if (value == null) {
          unsetRse();
        } else {
          setRse((RandomSplitEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RSE:
        return getRse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RSE:
        return isSetRse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeRandomSplitEvent_args)
        return this.equals((storeRandomSplitEvent_args)that);
      return false;
    }

    public boolean equals(storeRandomSplitEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_rse = true && this.isSetRse();
      boolean that_present_rse = true && that.isSetRse();
      if (this_present_rse || that_present_rse) {
        if (!(this_present_rse && that_present_rse))
          return false;
        if (!this.rse.equals(that.rse))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rse = true && (isSetRse());
      list.add(present_rse);
      if (present_rse)
        list.add(rse);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeRandomSplitEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRse()).compareTo(other.isSetRse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rse, other.rse);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeRandomSplitEvent_args(");
      boolean first = true;

      sb.append("rse:");
      if (this.rse == null) {
        sb.append("null");
      } else {
        sb.append(this.rse);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rse != null) {
        rse.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeRandomSplitEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeRandomSplitEvent_argsStandardScheme getScheme() {
        return new storeRandomSplitEvent_argsStandardScheme();
      }
    }

    private static class storeRandomSplitEvent_argsStandardScheme extends StandardScheme<storeRandomSplitEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeRandomSplitEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rse = new RandomSplitEvent();
                struct.rse.read(iprot);
                struct.setRseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeRandomSplitEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rse != null) {
          oprot.writeFieldBegin(RSE_FIELD_DESC);
          struct.rse.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeRandomSplitEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeRandomSplitEvent_argsTupleScheme getScheme() {
        return new storeRandomSplitEvent_argsTupleScheme();
      }
    }

    private static class storeRandomSplitEvent_argsTupleScheme extends TupleScheme<storeRandomSplitEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeRandomSplitEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRse()) {
          struct.rse.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeRandomSplitEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rse = new RandomSplitEvent();
          struct.rse.read(iprot);
          struct.setRseIsSet(true);
        }
      }
    }

  }

  public static class storeRandomSplitEvent_result implements org.apache.thrift.TBase<storeRandomSplitEvent_result, storeRandomSplitEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeRandomSplitEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeRandomSplitEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeRandomSplitEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeRandomSplitEvent_resultTupleSchemeFactory());
    }

    public RandomSplitEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RandomSplitEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeRandomSplitEvent_result.class, metaDataMap);
    }

    public storeRandomSplitEvent_result() {
    }

    public storeRandomSplitEvent_result(
      RandomSplitEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeRandomSplitEvent_result(storeRandomSplitEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new RandomSplitEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeRandomSplitEvent_result deepCopy() {
      return new storeRandomSplitEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public RandomSplitEventResponse getSuccess() {
      return this.success;
    }

    public storeRandomSplitEvent_result setSuccess(RandomSplitEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeRandomSplitEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RandomSplitEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeRandomSplitEvent_result)
        return this.equals((storeRandomSplitEvent_result)that);
      return false;
    }

    public boolean equals(storeRandomSplitEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeRandomSplitEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeRandomSplitEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeRandomSplitEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeRandomSplitEvent_resultStandardScheme getScheme() {
        return new storeRandomSplitEvent_resultStandardScheme();
      }
    }

    private static class storeRandomSplitEvent_resultStandardScheme extends StandardScheme<storeRandomSplitEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeRandomSplitEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RandomSplitEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeRandomSplitEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeRandomSplitEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeRandomSplitEvent_resultTupleScheme getScheme() {
        return new storeRandomSplitEvent_resultTupleScheme();
      }
    }

    private static class storeRandomSplitEvent_resultTupleScheme extends TupleScheme<storeRandomSplitEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeRandomSplitEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeRandomSplitEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RandomSplitEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storePipelineEvent_args implements org.apache.thrift.TBase<storePipelineEvent_args, storePipelineEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storePipelineEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storePipelineEvent_args");

    private static final org.apache.thrift.protocol.TField PIPELINE_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelineEvent", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storePipelineEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storePipelineEvent_argsTupleSchemeFactory());
    }

    public PipelineEvent pipelineEvent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PIPELINE_EVENT((short)1, "pipelineEvent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PIPELINE_EVENT
            return PIPELINE_EVENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PIPELINE_EVENT, new org.apache.thrift.meta_data.FieldMetaData("pipelineEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PipelineEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storePipelineEvent_args.class, metaDataMap);
    }

    public storePipelineEvent_args() {
    }

    public storePipelineEvent_args(
      PipelineEvent pipelineEvent)
    {
      this();
      this.pipelineEvent = pipelineEvent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storePipelineEvent_args(storePipelineEvent_args other) {
      if (other.isSetPipelineEvent()) {
        this.pipelineEvent = new PipelineEvent(other.pipelineEvent);
      }
    }

    public storePipelineEvent_args deepCopy() {
      return new storePipelineEvent_args(this);
    }

    @Override
    public void clear() {
      this.pipelineEvent = null;
    }

    public PipelineEvent getPipelineEvent() {
      return this.pipelineEvent;
    }

    public storePipelineEvent_args setPipelineEvent(PipelineEvent pipelineEvent) {
      this.pipelineEvent = pipelineEvent;
      return this;
    }

    public void unsetPipelineEvent() {
      this.pipelineEvent = null;
    }

    /** Returns true if field pipelineEvent is set (has been assigned a value) and false otherwise */
    public boolean isSetPipelineEvent() {
      return this.pipelineEvent != null;
    }

    public void setPipelineEventIsSet(boolean value) {
      if (!value) {
        this.pipelineEvent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PIPELINE_EVENT:
        if (value == null) {
          unsetPipelineEvent();
        } else {
          setPipelineEvent((PipelineEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PIPELINE_EVENT:
        return getPipelineEvent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PIPELINE_EVENT:
        return isSetPipelineEvent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storePipelineEvent_args)
        return this.equals((storePipelineEvent_args)that);
      return false;
    }

    public boolean equals(storePipelineEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_pipelineEvent = true && this.isSetPipelineEvent();
      boolean that_present_pipelineEvent = true && that.isSetPipelineEvent();
      if (this_present_pipelineEvent || that_present_pipelineEvent) {
        if (!(this_present_pipelineEvent && that_present_pipelineEvent))
          return false;
        if (!this.pipelineEvent.equals(that.pipelineEvent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pipelineEvent = true && (isSetPipelineEvent());
      list.add(present_pipelineEvent);
      if (present_pipelineEvent)
        list.add(pipelineEvent);

      return list.hashCode();
    }

    @Override
    public int compareTo(storePipelineEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPipelineEvent()).compareTo(other.isSetPipelineEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPipelineEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelineEvent, other.pipelineEvent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storePipelineEvent_args(");
      boolean first = true;

      sb.append("pipelineEvent:");
      if (this.pipelineEvent == null) {
        sb.append("null");
      } else {
        sb.append(this.pipelineEvent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pipelineEvent != null) {
        pipelineEvent.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storePipelineEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storePipelineEvent_argsStandardScheme getScheme() {
        return new storePipelineEvent_argsStandardScheme();
      }
    }

    private static class storePipelineEvent_argsStandardScheme extends StandardScheme<storePipelineEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storePipelineEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PIPELINE_EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pipelineEvent = new PipelineEvent();
                struct.pipelineEvent.read(iprot);
                struct.setPipelineEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storePipelineEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pipelineEvent != null) {
          oprot.writeFieldBegin(PIPELINE_EVENT_FIELD_DESC);
          struct.pipelineEvent.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storePipelineEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storePipelineEvent_argsTupleScheme getScheme() {
        return new storePipelineEvent_argsTupleScheme();
      }
    }

    private static class storePipelineEvent_argsTupleScheme extends TupleScheme<storePipelineEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storePipelineEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPipelineEvent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPipelineEvent()) {
          struct.pipelineEvent.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storePipelineEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pipelineEvent = new PipelineEvent();
          struct.pipelineEvent.read(iprot);
          struct.setPipelineEventIsSet(true);
        }
      }
    }

  }

  public static class storePipelineEvent_result implements org.apache.thrift.TBase<storePipelineEvent_result, storePipelineEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storePipelineEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storePipelineEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storePipelineEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storePipelineEvent_resultTupleSchemeFactory());
    }

    public PipelineEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PipelineEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storePipelineEvent_result.class, metaDataMap);
    }

    public storePipelineEvent_result() {
    }

    public storePipelineEvent_result(
      PipelineEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storePipelineEvent_result(storePipelineEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new PipelineEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storePipelineEvent_result deepCopy() {
      return new storePipelineEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public PipelineEventResponse getSuccess() {
      return this.success;
    }

    public storePipelineEvent_result setSuccess(PipelineEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storePipelineEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PipelineEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storePipelineEvent_result)
        return this.equals((storePipelineEvent_result)that);
      return false;
    }

    public boolean equals(storePipelineEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storePipelineEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storePipelineEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storePipelineEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storePipelineEvent_resultStandardScheme getScheme() {
        return new storePipelineEvent_resultStandardScheme();
      }
    }

    private static class storePipelineEvent_resultStandardScheme extends StandardScheme<storePipelineEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storePipelineEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PipelineEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storePipelineEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storePipelineEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storePipelineEvent_resultTupleScheme getScheme() {
        return new storePipelineEvent_resultTupleScheme();
      }
    }

    private static class storePipelineEvent_resultTupleScheme extends TupleScheme<storePipelineEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storePipelineEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storePipelineEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PipelineEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeCrossValidationEvent_args implements org.apache.thrift.TBase<storeCrossValidationEvent_args, storeCrossValidationEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeCrossValidationEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeCrossValidationEvent_args");

    private static final org.apache.thrift.protocol.TField CVE_FIELD_DESC = new org.apache.thrift.protocol.TField("cve", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeCrossValidationEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeCrossValidationEvent_argsTupleSchemeFactory());
    }

    public CrossValidationEvent cve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CVE((short)1, "cve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CVE
            return CVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CVE, new org.apache.thrift.meta_data.FieldMetaData("cve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossValidationEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeCrossValidationEvent_args.class, metaDataMap);
    }

    public storeCrossValidationEvent_args() {
    }

    public storeCrossValidationEvent_args(
      CrossValidationEvent cve)
    {
      this();
      this.cve = cve;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeCrossValidationEvent_args(storeCrossValidationEvent_args other) {
      if (other.isSetCve()) {
        this.cve = new CrossValidationEvent(other.cve);
      }
    }

    public storeCrossValidationEvent_args deepCopy() {
      return new storeCrossValidationEvent_args(this);
    }

    @Override
    public void clear() {
      this.cve = null;
    }

    public CrossValidationEvent getCve() {
      return this.cve;
    }

    public storeCrossValidationEvent_args setCve(CrossValidationEvent cve) {
      this.cve = cve;
      return this;
    }

    public void unsetCve() {
      this.cve = null;
    }

    /** Returns true if field cve is set (has been assigned a value) and false otherwise */
    public boolean isSetCve() {
      return this.cve != null;
    }

    public void setCveIsSet(boolean value) {
      if (!value) {
        this.cve = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CVE:
        if (value == null) {
          unsetCve();
        } else {
          setCve((CrossValidationEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CVE:
        return getCve();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CVE:
        return isSetCve();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeCrossValidationEvent_args)
        return this.equals((storeCrossValidationEvent_args)that);
      return false;
    }

    public boolean equals(storeCrossValidationEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_cve = true && this.isSetCve();
      boolean that_present_cve = true && that.isSetCve();
      if (this_present_cve || that_present_cve) {
        if (!(this_present_cve && that_present_cve))
          return false;
        if (!this.cve.equals(that.cve))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cve = true && (isSetCve());
      list.add(present_cve);
      if (present_cve)
        list.add(cve);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeCrossValidationEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCve()).compareTo(other.isSetCve());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCve()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cve, other.cve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeCrossValidationEvent_args(");
      boolean first = true;

      sb.append("cve:");
      if (this.cve == null) {
        sb.append("null");
      } else {
        sb.append(this.cve);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cve != null) {
        cve.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeCrossValidationEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeCrossValidationEvent_argsStandardScheme getScheme() {
        return new storeCrossValidationEvent_argsStandardScheme();
      }
    }

    private static class storeCrossValidationEvent_argsStandardScheme extends StandardScheme<storeCrossValidationEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cve = new CrossValidationEvent();
                struct.cve.read(iprot);
                struct.setCveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cve != null) {
          oprot.writeFieldBegin(CVE_FIELD_DESC);
          struct.cve.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeCrossValidationEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeCrossValidationEvent_argsTupleScheme getScheme() {
        return new storeCrossValidationEvent_argsTupleScheme();
      }
    }

    private static class storeCrossValidationEvent_argsTupleScheme extends TupleScheme<storeCrossValidationEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCve()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCve()) {
          struct.cve.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cve = new CrossValidationEvent();
          struct.cve.read(iprot);
          struct.setCveIsSet(true);
        }
      }
    }

  }

  public static class storeCrossValidationEvent_result implements org.apache.thrift.TBase<storeCrossValidationEvent_result, storeCrossValidationEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeCrossValidationEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeCrossValidationEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeCrossValidationEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeCrossValidationEvent_resultTupleSchemeFactory());
    }

    public CrossValidationEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CrossValidationEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeCrossValidationEvent_result.class, metaDataMap);
    }

    public storeCrossValidationEvent_result() {
    }

    public storeCrossValidationEvent_result(
      CrossValidationEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeCrossValidationEvent_result(storeCrossValidationEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new CrossValidationEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeCrossValidationEvent_result deepCopy() {
      return new storeCrossValidationEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public CrossValidationEventResponse getSuccess() {
      return this.success;
    }

    public storeCrossValidationEvent_result setSuccess(CrossValidationEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeCrossValidationEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CrossValidationEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeCrossValidationEvent_result)
        return this.equals((storeCrossValidationEvent_result)that);
      return false;
    }

    public boolean equals(storeCrossValidationEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeCrossValidationEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeCrossValidationEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeCrossValidationEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeCrossValidationEvent_resultStandardScheme getScheme() {
        return new storeCrossValidationEvent_resultStandardScheme();
      }
    }

    private static class storeCrossValidationEvent_resultStandardScheme extends StandardScheme<storeCrossValidationEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CrossValidationEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeCrossValidationEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeCrossValidationEvent_resultTupleScheme getScheme() {
        return new storeCrossValidationEvent_resultTupleScheme();
      }
    }

    private static class storeCrossValidationEvent_resultTupleScheme extends TupleScheme<storeCrossValidationEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CrossValidationEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeGridSearchCrossValidationEvent_args implements org.apache.thrift.TBase<storeGridSearchCrossValidationEvent_args, storeGridSearchCrossValidationEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeGridSearchCrossValidationEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeGridSearchCrossValidationEvent_args");

    private static final org.apache.thrift.protocol.TField GSCVE_FIELD_DESC = new org.apache.thrift.protocol.TField("gscve", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeGridSearchCrossValidationEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeGridSearchCrossValidationEvent_argsTupleSchemeFactory());
    }

    public GridSearchCrossValidationEvent gscve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GSCVE((short)1, "gscve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GSCVE
            return GSCVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GSCVE, new org.apache.thrift.meta_data.FieldMetaData("gscve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GridSearchCrossValidationEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeGridSearchCrossValidationEvent_args.class, metaDataMap);
    }

    public storeGridSearchCrossValidationEvent_args() {
    }

    public storeGridSearchCrossValidationEvent_args(
      GridSearchCrossValidationEvent gscve)
    {
      this();
      this.gscve = gscve;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeGridSearchCrossValidationEvent_args(storeGridSearchCrossValidationEvent_args other) {
      if (other.isSetGscve()) {
        this.gscve = new GridSearchCrossValidationEvent(other.gscve);
      }
    }

    public storeGridSearchCrossValidationEvent_args deepCopy() {
      return new storeGridSearchCrossValidationEvent_args(this);
    }

    @Override
    public void clear() {
      this.gscve = null;
    }

    public GridSearchCrossValidationEvent getGscve() {
      return this.gscve;
    }

    public storeGridSearchCrossValidationEvent_args setGscve(GridSearchCrossValidationEvent gscve) {
      this.gscve = gscve;
      return this;
    }

    public void unsetGscve() {
      this.gscve = null;
    }

    /** Returns true if field gscve is set (has been assigned a value) and false otherwise */
    public boolean isSetGscve() {
      return this.gscve != null;
    }

    public void setGscveIsSet(boolean value) {
      if (!value) {
        this.gscve = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GSCVE:
        if (value == null) {
          unsetGscve();
        } else {
          setGscve((GridSearchCrossValidationEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GSCVE:
        return getGscve();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GSCVE:
        return isSetGscve();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeGridSearchCrossValidationEvent_args)
        return this.equals((storeGridSearchCrossValidationEvent_args)that);
      return false;
    }

    public boolean equals(storeGridSearchCrossValidationEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_gscve = true && this.isSetGscve();
      boolean that_present_gscve = true && that.isSetGscve();
      if (this_present_gscve || that_present_gscve) {
        if (!(this_present_gscve && that_present_gscve))
          return false;
        if (!this.gscve.equals(that.gscve))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_gscve = true && (isSetGscve());
      list.add(present_gscve);
      if (present_gscve)
        list.add(gscve);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeGridSearchCrossValidationEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGscve()).compareTo(other.isSetGscve());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGscve()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gscve, other.gscve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeGridSearchCrossValidationEvent_args(");
      boolean first = true;

      sb.append("gscve:");
      if (this.gscve == null) {
        sb.append("null");
      } else {
        sb.append(this.gscve);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (gscve != null) {
        gscve.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeGridSearchCrossValidationEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeGridSearchCrossValidationEvent_argsStandardScheme getScheme() {
        return new storeGridSearchCrossValidationEvent_argsStandardScheme();
      }
    }

    private static class storeGridSearchCrossValidationEvent_argsStandardScheme extends StandardScheme<storeGridSearchCrossValidationEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeGridSearchCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GSCVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gscve = new GridSearchCrossValidationEvent();
                struct.gscve.read(iprot);
                struct.setGscveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeGridSearchCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gscve != null) {
          oprot.writeFieldBegin(GSCVE_FIELD_DESC);
          struct.gscve.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeGridSearchCrossValidationEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeGridSearchCrossValidationEvent_argsTupleScheme getScheme() {
        return new storeGridSearchCrossValidationEvent_argsTupleScheme();
      }
    }

    private static class storeGridSearchCrossValidationEvent_argsTupleScheme extends TupleScheme<storeGridSearchCrossValidationEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeGridSearchCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGscve()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGscve()) {
          struct.gscve.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeGridSearchCrossValidationEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gscve = new GridSearchCrossValidationEvent();
          struct.gscve.read(iprot);
          struct.setGscveIsSet(true);
        }
      }
    }

  }

  public static class storeGridSearchCrossValidationEvent_result implements org.apache.thrift.TBase<storeGridSearchCrossValidationEvent_result, storeGridSearchCrossValidationEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeGridSearchCrossValidationEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeGridSearchCrossValidationEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeGridSearchCrossValidationEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeGridSearchCrossValidationEvent_resultTupleSchemeFactory());
    }

    public GridSearchCrossValidationEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GridSearchCrossValidationEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeGridSearchCrossValidationEvent_result.class, metaDataMap);
    }

    public storeGridSearchCrossValidationEvent_result() {
    }

    public storeGridSearchCrossValidationEvent_result(
      GridSearchCrossValidationEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeGridSearchCrossValidationEvent_result(storeGridSearchCrossValidationEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new GridSearchCrossValidationEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeGridSearchCrossValidationEvent_result deepCopy() {
      return new storeGridSearchCrossValidationEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public GridSearchCrossValidationEventResponse getSuccess() {
      return this.success;
    }

    public storeGridSearchCrossValidationEvent_result setSuccess(GridSearchCrossValidationEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeGridSearchCrossValidationEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GridSearchCrossValidationEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeGridSearchCrossValidationEvent_result)
        return this.equals((storeGridSearchCrossValidationEvent_result)that);
      return false;
    }

    public boolean equals(storeGridSearchCrossValidationEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeGridSearchCrossValidationEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeGridSearchCrossValidationEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeGridSearchCrossValidationEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeGridSearchCrossValidationEvent_resultStandardScheme getScheme() {
        return new storeGridSearchCrossValidationEvent_resultStandardScheme();
      }
    }

    private static class storeGridSearchCrossValidationEvent_resultStandardScheme extends StandardScheme<storeGridSearchCrossValidationEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeGridSearchCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GridSearchCrossValidationEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeGridSearchCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeGridSearchCrossValidationEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeGridSearchCrossValidationEvent_resultTupleScheme getScheme() {
        return new storeGridSearchCrossValidationEvent_resultTupleScheme();
      }
    }

    private static class storeGridSearchCrossValidationEvent_resultTupleScheme extends TupleScheme<storeGridSearchCrossValidationEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeGridSearchCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeGridSearchCrossValidationEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GridSearchCrossValidationEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeAnnotationEvent_args implements org.apache.thrift.TBase<storeAnnotationEvent_args, storeAnnotationEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeAnnotationEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeAnnotationEvent_args");

    private static final org.apache.thrift.protocol.TField AE_FIELD_DESC = new org.apache.thrift.protocol.TField("ae", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeAnnotationEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeAnnotationEvent_argsTupleSchemeFactory());
    }

    public AnnotationEvent ae; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AE((short)1, "ae");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AE
            return AE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AE, new org.apache.thrift.meta_data.FieldMetaData("ae", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnnotationEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeAnnotationEvent_args.class, metaDataMap);
    }

    public storeAnnotationEvent_args() {
    }

    public storeAnnotationEvent_args(
      AnnotationEvent ae)
    {
      this();
      this.ae = ae;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeAnnotationEvent_args(storeAnnotationEvent_args other) {
      if (other.isSetAe()) {
        this.ae = new AnnotationEvent(other.ae);
      }
    }

    public storeAnnotationEvent_args deepCopy() {
      return new storeAnnotationEvent_args(this);
    }

    @Override
    public void clear() {
      this.ae = null;
    }

    public AnnotationEvent getAe() {
      return this.ae;
    }

    public storeAnnotationEvent_args setAe(AnnotationEvent ae) {
      this.ae = ae;
      return this;
    }

    public void unsetAe() {
      this.ae = null;
    }

    /** Returns true if field ae is set (has been assigned a value) and false otherwise */
    public boolean isSetAe() {
      return this.ae != null;
    }

    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((AnnotationEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AE:
        return getAe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AE:
        return isSetAe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeAnnotationEvent_args)
        return this.equals((storeAnnotationEvent_args)that);
      return false;
    }

    public boolean equals(storeAnnotationEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_ae = true && this.isSetAe();
      boolean that_present_ae = true && that.isSetAe();
      if (this_present_ae || that_present_ae) {
        if (!(this_present_ae && that_present_ae))
          return false;
        if (!this.ae.equals(that.ae))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ae = true && (isSetAe());
      list.add(present_ae);
      if (present_ae)
        list.add(ae);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeAnnotationEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAe()).compareTo(other.isSetAe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ae, other.ae);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeAnnotationEvent_args(");
      boolean first = true;

      sb.append("ae:");
      if (this.ae == null) {
        sb.append("null");
      } else {
        sb.append(this.ae);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ae != null) {
        ae.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeAnnotationEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeAnnotationEvent_argsStandardScheme getScheme() {
        return new storeAnnotationEvent_argsStandardScheme();
      }
    }

    private static class storeAnnotationEvent_argsStandardScheme extends StandardScheme<storeAnnotationEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeAnnotationEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ae = new AnnotationEvent();
                struct.ae.read(iprot);
                struct.setAeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeAnnotationEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ae != null) {
          oprot.writeFieldBegin(AE_FIELD_DESC);
          struct.ae.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeAnnotationEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeAnnotationEvent_argsTupleScheme getScheme() {
        return new storeAnnotationEvent_argsTupleScheme();
      }
    }

    private static class storeAnnotationEvent_argsTupleScheme extends TupleScheme<storeAnnotationEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeAnnotationEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAe()) {
          struct.ae.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeAnnotationEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ae = new AnnotationEvent();
          struct.ae.read(iprot);
          struct.setAeIsSet(true);
        }
      }
    }

  }

  public static class storeAnnotationEvent_result implements org.apache.thrift.TBase<storeAnnotationEvent_result, storeAnnotationEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeAnnotationEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeAnnotationEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeAnnotationEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeAnnotationEvent_resultTupleSchemeFactory());
    }

    public AnnotationEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnnotationEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeAnnotationEvent_result.class, metaDataMap);
    }

    public storeAnnotationEvent_result() {
    }

    public storeAnnotationEvent_result(
      AnnotationEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeAnnotationEvent_result(storeAnnotationEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new AnnotationEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeAnnotationEvent_result deepCopy() {
      return new storeAnnotationEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public AnnotationEventResponse getSuccess() {
      return this.success;
    }

    public storeAnnotationEvent_result setSuccess(AnnotationEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeAnnotationEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AnnotationEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeAnnotationEvent_result)
        return this.equals((storeAnnotationEvent_result)that);
      return false;
    }

    public boolean equals(storeAnnotationEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeAnnotationEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeAnnotationEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeAnnotationEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeAnnotationEvent_resultStandardScheme getScheme() {
        return new storeAnnotationEvent_resultStandardScheme();
      }
    }

    private static class storeAnnotationEvent_resultStandardScheme extends StandardScheme<storeAnnotationEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeAnnotationEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AnnotationEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeAnnotationEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeAnnotationEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeAnnotationEvent_resultTupleScheme getScheme() {
        return new storeAnnotationEvent_resultTupleScheme();
      }
    }

    private static class storeAnnotationEvent_resultTupleScheme extends TupleScheme<storeAnnotationEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeAnnotationEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeAnnotationEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AnnotationEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeProjectEvent_args implements org.apache.thrift.TBase<storeProjectEvent_args, storeProjectEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeProjectEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeProjectEvent_args");

    private static final org.apache.thrift.protocol.TField PR_FIELD_DESC = new org.apache.thrift.protocol.TField("pr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeProjectEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeProjectEvent_argsTupleSchemeFactory());
    }

    public ProjectEvent pr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PR((short)1, "pr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PR
            return PR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PR, new org.apache.thrift.meta_data.FieldMetaData("pr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeProjectEvent_args.class, metaDataMap);
    }

    public storeProjectEvent_args() {
    }

    public storeProjectEvent_args(
      ProjectEvent pr)
    {
      this();
      this.pr = pr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeProjectEvent_args(storeProjectEvent_args other) {
      if (other.isSetPr()) {
        this.pr = new ProjectEvent(other.pr);
      }
    }

    public storeProjectEvent_args deepCopy() {
      return new storeProjectEvent_args(this);
    }

    @Override
    public void clear() {
      this.pr = null;
    }

    public ProjectEvent getPr() {
      return this.pr;
    }

    public storeProjectEvent_args setPr(ProjectEvent pr) {
      this.pr = pr;
      return this;
    }

    public void unsetPr() {
      this.pr = null;
    }

    /** Returns true if field pr is set (has been assigned a value) and false otherwise */
    public boolean isSetPr() {
      return this.pr != null;
    }

    public void setPrIsSet(boolean value) {
      if (!value) {
        this.pr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PR:
        if (value == null) {
          unsetPr();
        } else {
          setPr((ProjectEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PR:
        return getPr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PR:
        return isSetPr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeProjectEvent_args)
        return this.equals((storeProjectEvent_args)that);
      return false;
    }

    public boolean equals(storeProjectEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_pr = true && this.isSetPr();
      boolean that_present_pr = true && that.isSetPr();
      if (this_present_pr || that_present_pr) {
        if (!(this_present_pr && that_present_pr))
          return false;
        if (!this.pr.equals(that.pr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pr = true && (isSetPr());
      list.add(present_pr);
      if (present_pr)
        list.add(pr);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeProjectEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPr()).compareTo(other.isSetPr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pr, other.pr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeProjectEvent_args(");
      boolean first = true;

      sb.append("pr:");
      if (this.pr == null) {
        sb.append("null");
      } else {
        sb.append(this.pr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pr != null) {
        pr.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeProjectEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeProjectEvent_argsStandardScheme getScheme() {
        return new storeProjectEvent_argsStandardScheme();
      }
    }

    private static class storeProjectEvent_argsStandardScheme extends StandardScheme<storeProjectEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeProjectEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pr = new ProjectEvent();
                struct.pr.read(iprot);
                struct.setPrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeProjectEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pr != null) {
          oprot.writeFieldBegin(PR_FIELD_DESC);
          struct.pr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeProjectEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeProjectEvent_argsTupleScheme getScheme() {
        return new storeProjectEvent_argsTupleScheme();
      }
    }

    private static class storeProjectEvent_argsTupleScheme extends TupleScheme<storeProjectEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeProjectEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPr()) {
          struct.pr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeProjectEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pr = new ProjectEvent();
          struct.pr.read(iprot);
          struct.setPrIsSet(true);
        }
      }
    }

  }

  public static class storeProjectEvent_result implements org.apache.thrift.TBase<storeProjectEvent_result, storeProjectEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeProjectEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeProjectEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeProjectEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeProjectEvent_resultTupleSchemeFactory());
    }

    public ProjectEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeProjectEvent_result.class, metaDataMap);
    }

    public storeProjectEvent_result() {
    }

    public storeProjectEvent_result(
      ProjectEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeProjectEvent_result(storeProjectEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProjectEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeProjectEvent_result deepCopy() {
      return new storeProjectEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public ProjectEventResponse getSuccess() {
      return this.success;
    }

    public storeProjectEvent_result setSuccess(ProjectEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeProjectEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProjectEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeProjectEvent_result)
        return this.equals((storeProjectEvent_result)that);
      return false;
    }

    public boolean equals(storeProjectEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeProjectEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeProjectEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeProjectEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeProjectEvent_resultStandardScheme getScheme() {
        return new storeProjectEvent_resultStandardScheme();
      }
    }

    private static class storeProjectEvent_resultStandardScheme extends StandardScheme<storeProjectEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeProjectEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProjectEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeProjectEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeProjectEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeProjectEvent_resultTupleScheme getScheme() {
        return new storeProjectEvent_resultTupleScheme();
      }
    }

    private static class storeProjectEvent_resultTupleScheme extends TupleScheme<storeProjectEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeProjectEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeProjectEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProjectEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeExperimentEvent_args implements org.apache.thrift.TBase<storeExperimentEvent_args, storeExperimentEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeExperimentEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeExperimentEvent_args");

    private static final org.apache.thrift.protocol.TField ER_FIELD_DESC = new org.apache.thrift.protocol.TField("er", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeExperimentEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeExperimentEvent_argsTupleSchemeFactory());
    }

    public ExperimentEvent er; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ER((short)1, "er");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ER
            return ER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ER, new org.apache.thrift.meta_data.FieldMetaData("er", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeExperimentEvent_args.class, metaDataMap);
    }

    public storeExperimentEvent_args() {
    }

    public storeExperimentEvent_args(
      ExperimentEvent er)
    {
      this();
      this.er = er;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeExperimentEvent_args(storeExperimentEvent_args other) {
      if (other.isSetEr()) {
        this.er = new ExperimentEvent(other.er);
      }
    }

    public storeExperimentEvent_args deepCopy() {
      return new storeExperimentEvent_args(this);
    }

    @Override
    public void clear() {
      this.er = null;
    }

    public ExperimentEvent getEr() {
      return this.er;
    }

    public storeExperimentEvent_args setEr(ExperimentEvent er) {
      this.er = er;
      return this;
    }

    public void unsetEr() {
      this.er = null;
    }

    /** Returns true if field er is set (has been assigned a value) and false otherwise */
    public boolean isSetEr() {
      return this.er != null;
    }

    public void setErIsSet(boolean value) {
      if (!value) {
        this.er = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ER:
        if (value == null) {
          unsetEr();
        } else {
          setEr((ExperimentEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ER:
        return getEr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ER:
        return isSetEr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeExperimentEvent_args)
        return this.equals((storeExperimentEvent_args)that);
      return false;
    }

    public boolean equals(storeExperimentEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_er = true && this.isSetEr();
      boolean that_present_er = true && that.isSetEr();
      if (this_present_er || that_present_er) {
        if (!(this_present_er && that_present_er))
          return false;
        if (!this.er.equals(that.er))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_er = true && (isSetEr());
      list.add(present_er);
      if (present_er)
        list.add(er);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeExperimentEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEr()).compareTo(other.isSetEr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.er, other.er);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeExperimentEvent_args(");
      boolean first = true;

      sb.append("er:");
      if (this.er == null) {
        sb.append("null");
      } else {
        sb.append(this.er);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (er != null) {
        er.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeExperimentEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeExperimentEvent_argsStandardScheme getScheme() {
        return new storeExperimentEvent_argsStandardScheme();
      }
    }

    private static class storeExperimentEvent_argsStandardScheme extends StandardScheme<storeExperimentEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeExperimentEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.er = new ExperimentEvent();
                struct.er.read(iprot);
                struct.setErIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeExperimentEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.er != null) {
          oprot.writeFieldBegin(ER_FIELD_DESC);
          struct.er.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeExperimentEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeExperimentEvent_argsTupleScheme getScheme() {
        return new storeExperimentEvent_argsTupleScheme();
      }
    }

    private static class storeExperimentEvent_argsTupleScheme extends TupleScheme<storeExperimentEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeExperimentEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEr()) {
          struct.er.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeExperimentEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.er = new ExperimentEvent();
          struct.er.read(iprot);
          struct.setErIsSet(true);
        }
      }
    }

  }

  public static class storeExperimentEvent_result implements org.apache.thrift.TBase<storeExperimentEvent_result, storeExperimentEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeExperimentEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeExperimentEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeExperimentEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeExperimentEvent_resultTupleSchemeFactory());
    }

    public ExperimentEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeExperimentEvent_result.class, metaDataMap);
    }

    public storeExperimentEvent_result() {
    }

    public storeExperimentEvent_result(
      ExperimentEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeExperimentEvent_result(storeExperimentEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExperimentEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeExperimentEvent_result deepCopy() {
      return new storeExperimentEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public ExperimentEventResponse getSuccess() {
      return this.success;
    }

    public storeExperimentEvent_result setSuccess(ExperimentEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeExperimentEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExperimentEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeExperimentEvent_result)
        return this.equals((storeExperimentEvent_result)that);
      return false;
    }

    public boolean equals(storeExperimentEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeExperimentEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeExperimentEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeExperimentEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeExperimentEvent_resultStandardScheme getScheme() {
        return new storeExperimentEvent_resultStandardScheme();
      }
    }

    private static class storeExperimentEvent_resultStandardScheme extends StandardScheme<storeExperimentEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeExperimentEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExperimentEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeExperimentEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeExperimentEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeExperimentEvent_resultTupleScheme getScheme() {
        return new storeExperimentEvent_resultTupleScheme();
      }
    }

    private static class storeExperimentEvent_resultTupleScheme extends TupleScheme<storeExperimentEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeExperimentEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeExperimentEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ExperimentEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeExperimentRunEvent_args implements org.apache.thrift.TBase<storeExperimentRunEvent_args, storeExperimentRunEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeExperimentRunEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeExperimentRunEvent_args");

    private static final org.apache.thrift.protocol.TField ER_FIELD_DESC = new org.apache.thrift.protocol.TField("er", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeExperimentRunEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeExperimentRunEvent_argsTupleSchemeFactory());
    }

    public ExperimentRunEvent er; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ER((short)1, "er");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ER
            return ER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ER, new org.apache.thrift.meta_data.FieldMetaData("er", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentRunEvent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeExperimentRunEvent_args.class, metaDataMap);
    }

    public storeExperimentRunEvent_args() {
    }

    public storeExperimentRunEvent_args(
      ExperimentRunEvent er)
    {
      this();
      this.er = er;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeExperimentRunEvent_args(storeExperimentRunEvent_args other) {
      if (other.isSetEr()) {
        this.er = new ExperimentRunEvent(other.er);
      }
    }

    public storeExperimentRunEvent_args deepCopy() {
      return new storeExperimentRunEvent_args(this);
    }

    @Override
    public void clear() {
      this.er = null;
    }

    public ExperimentRunEvent getEr() {
      return this.er;
    }

    public storeExperimentRunEvent_args setEr(ExperimentRunEvent er) {
      this.er = er;
      return this;
    }

    public void unsetEr() {
      this.er = null;
    }

    /** Returns true if field er is set (has been assigned a value) and false otherwise */
    public boolean isSetEr() {
      return this.er != null;
    }

    public void setErIsSet(boolean value) {
      if (!value) {
        this.er = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ER:
        if (value == null) {
          unsetEr();
        } else {
          setEr((ExperimentRunEvent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ER:
        return getEr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ER:
        return isSetEr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeExperimentRunEvent_args)
        return this.equals((storeExperimentRunEvent_args)that);
      return false;
    }

    public boolean equals(storeExperimentRunEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_er = true && this.isSetEr();
      boolean that_present_er = true && that.isSetEr();
      if (this_present_er || that_present_er) {
        if (!(this_present_er && that_present_er))
          return false;
        if (!this.er.equals(that.er))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_er = true && (isSetEr());
      list.add(present_er);
      if (present_er)
        list.add(er);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeExperimentRunEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEr()).compareTo(other.isSetEr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.er, other.er);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeExperimentRunEvent_args(");
      boolean first = true;

      sb.append("er:");
      if (this.er == null) {
        sb.append("null");
      } else {
        sb.append(this.er);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (er != null) {
        er.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeExperimentRunEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storeExperimentRunEvent_argsStandardScheme getScheme() {
        return new storeExperimentRunEvent_argsStandardScheme();
      }
    }

    private static class storeExperimentRunEvent_argsStandardScheme extends StandardScheme<storeExperimentRunEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeExperimentRunEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.er = new ExperimentRunEvent();
                struct.er.read(iprot);
                struct.setErIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeExperimentRunEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.er != null) {
          oprot.writeFieldBegin(ER_FIELD_DESC);
          struct.er.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeExperimentRunEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storeExperimentRunEvent_argsTupleScheme getScheme() {
        return new storeExperimentRunEvent_argsTupleScheme();
      }
    }

    private static class storeExperimentRunEvent_argsTupleScheme extends TupleScheme<storeExperimentRunEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeExperimentRunEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEr()) {
          struct.er.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeExperimentRunEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.er = new ExperimentRunEvent();
          struct.er.read(iprot);
          struct.setErIsSet(true);
        }
      }
    }

  }

  public static class storeExperimentRunEvent_result implements org.apache.thrift.TBase<storeExperimentRunEvent_result, storeExperimentRunEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeExperimentRunEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeExperimentRunEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeExperimentRunEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeExperimentRunEvent_resultTupleSchemeFactory());
    }

    public ExperimentRunEventResponse success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentRunEventResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeExperimentRunEvent_result.class, metaDataMap);
    }

    public storeExperimentRunEvent_result() {
    }

    public storeExperimentRunEvent_result(
      ExperimentRunEventResponse success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeExperimentRunEvent_result(storeExperimentRunEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExperimentRunEventResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeExperimentRunEvent_result deepCopy() {
      return new storeExperimentRunEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public ExperimentRunEventResponse getSuccess() {
      return this.success;
    }

    public storeExperimentRunEvent_result setSuccess(ExperimentRunEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeExperimentRunEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExperimentRunEventResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeExperimentRunEvent_result)
        return this.equals((storeExperimentRunEvent_result)that);
      return false;
    }

    public boolean equals(storeExperimentRunEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeExperimentRunEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeExperimentRunEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeExperimentRunEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storeExperimentRunEvent_resultStandardScheme getScheme() {
        return new storeExperimentRunEvent_resultStandardScheme();
      }
    }

    private static class storeExperimentRunEvent_resultStandardScheme extends StandardScheme<storeExperimentRunEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeExperimentRunEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExperimentRunEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeExperimentRunEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeExperimentRunEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storeExperimentRunEvent_resultTupleScheme getScheme() {
        return new storeExperimentRunEvent_resultTupleScheme();
      }
    }

    private static class storeExperimentRunEvent_resultTupleScheme extends TupleScheme<storeExperimentRunEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeExperimentRunEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeExperimentRunEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ExperimentRunEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeLinearModel_args implements org.apache.thrift.TBase<storeLinearModel_args, storeLinearModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeLinearModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeLinearModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeLinearModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeLinearModel_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public LinearModel model; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      MODEL((short)2, "model");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // MODEL
            return MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LinearModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeLinearModel_args.class, metaDataMap);
    }

    public storeLinearModel_args() {
    }

    public storeLinearModel_args(
      int modelId,
      LinearModel model)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.model = model;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeLinearModel_args(storeLinearModel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetModel()) {
        this.model = new LinearModel(other.model);
      }
    }

    public storeLinearModel_args deepCopy() {
      return new storeLinearModel_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.model = null;
    }

    public int getModelId() {
      return this.modelId;
    }

    public storeLinearModel_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public LinearModel getModel() {
      return this.model;
    }

    public storeLinearModel_args setModel(LinearModel model) {
      this.model = model;
      return this;
    }

    public void unsetModel() {
      this.model = null;
    }

    /** Returns true if field model is set (has been assigned a value) and false otherwise */
    public boolean isSetModel() {
      return this.model != null;
    }

    public void setModelIsSet(boolean value) {
      if (!value) {
        this.model = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case MODEL:
        if (value == null) {
          unsetModel();
        } else {
          setModel((LinearModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case MODEL:
        return getModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case MODEL:
        return isSetModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeLinearModel_args)
        return this.equals((storeLinearModel_args)that);
      return false;
    }

    public boolean equals(storeLinearModel_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_model = true && this.isSetModel();
      boolean that_present_model = true && that.isSetModel();
      if (this_present_model || that_present_model) {
        if (!(this_present_model && that_present_model))
          return false;
        if (!this.model.equals(that.model))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_model = true && (isSetModel());
      list.add(present_model);
      if (present_model)
        list.add(model);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeLinearModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeLinearModel_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (model != null) {
        model.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeLinearModel_argsStandardSchemeFactory implements SchemeFactory {
      public storeLinearModel_argsStandardScheme getScheme() {
        return new storeLinearModel_argsStandardScheme();
      }
    }

    private static class storeLinearModel_argsStandardScheme extends StandardScheme<storeLinearModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeLinearModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.model = new LinearModel();
                struct.model.read(iprot);
                struct.setModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeLinearModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.model != null) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          struct.model.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeLinearModel_argsTupleSchemeFactory implements SchemeFactory {
      public storeLinearModel_argsTupleScheme getScheme() {
        return new storeLinearModel_argsTupleScheme();
      }
    }

    private static class storeLinearModel_argsTupleScheme extends TupleScheme<storeLinearModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeLinearModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetModel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetModel()) {
          struct.model.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeLinearModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.model = new LinearModel();
          struct.model.read(iprot);
          struct.setModelIsSet(true);
        }
      }
    }

  }

  public static class storeLinearModel_result implements org.apache.thrift.TBase<storeLinearModel_result, storeLinearModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeLinearModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeLinearModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeLinearModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeLinearModel_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeLinearModel_result.class, metaDataMap);
    }

    public storeLinearModel_result() {
    }

    public storeLinearModel_result(
      boolean success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeLinearModel_result(storeLinearModel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeLinearModel_result deepCopy() {
      return new storeLinearModel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.rnfEx = null;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public storeLinearModel_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public storeLinearModel_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeLinearModel_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeLinearModel_result)
        return this.equals((storeLinearModel_result)that);
      return false;
    }

    public boolean equals(storeLinearModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeLinearModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeLinearModel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeLinearModel_resultStandardSchemeFactory implements SchemeFactory {
      public storeLinearModel_resultStandardScheme getScheme() {
        return new storeLinearModel_resultStandardScheme();
      }
    }

    private static class storeLinearModel_resultStandardScheme extends StandardScheme<storeLinearModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeLinearModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeLinearModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeLinearModel_resultTupleSchemeFactory implements SchemeFactory {
      public storeLinearModel_resultTupleScheme getScheme() {
        return new storeLinearModel_resultTupleScheme();
      }
    }

    private static class storeLinearModel_resultTupleScheme extends TupleScheme<storeLinearModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeLinearModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeLinearModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getDataFrameAncestry_args implements org.apache.thrift.TBase<getDataFrameAncestry_args, getDataFrameAncestry_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataFrameAncestry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataFrameAncestry_args");

    private static final org.apache.thrift.protocol.TField DATA_FRAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataFrameId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataFrameAncestry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataFrameAncestry_argsTupleSchemeFactory());
    }

    public int dataFrameId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA_FRAME_ID((short)1, "dataFrameId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA_FRAME_ID
            return DATA_FRAME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATAFRAMEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA_FRAME_ID, new org.apache.thrift.meta_data.FieldMetaData("dataFrameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataFrameAncestry_args.class, metaDataMap);
    }

    public getDataFrameAncestry_args() {
    }

    public getDataFrameAncestry_args(
      int dataFrameId)
    {
      this();
      this.dataFrameId = dataFrameId;
      setDataFrameIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataFrameAncestry_args(getDataFrameAncestry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dataFrameId = other.dataFrameId;
    }

    public getDataFrameAncestry_args deepCopy() {
      return new getDataFrameAncestry_args(this);
    }

    @Override
    public void clear() {
      setDataFrameIdIsSet(false);
      this.dataFrameId = 0;
    }

    public int getDataFrameId() {
      return this.dataFrameId;
    }

    public getDataFrameAncestry_args setDataFrameId(int dataFrameId) {
      this.dataFrameId = dataFrameId;
      setDataFrameIdIsSet(true);
      return this;
    }

    public void unsetDataFrameId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATAFRAMEID_ISSET_ID);
    }

    /** Returns true if field dataFrameId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataFrameId() {
      return EncodingUtils.testBit(__isset_bitfield, __DATAFRAMEID_ISSET_ID);
    }

    public void setDataFrameIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATAFRAMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA_FRAME_ID:
        if (value == null) {
          unsetDataFrameId();
        } else {
          setDataFrameId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA_FRAME_ID:
        return getDataFrameId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA_FRAME_ID:
        return isSetDataFrameId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataFrameAncestry_args)
        return this.equals((getDataFrameAncestry_args)that);
      return false;
    }

    public boolean equals(getDataFrameAncestry_args that) {
      if (that == null)
        return false;

      boolean this_present_dataFrameId = true;
      boolean that_present_dataFrameId = true;
      if (this_present_dataFrameId || that_present_dataFrameId) {
        if (!(this_present_dataFrameId && that_present_dataFrameId))
          return false;
        if (this.dataFrameId != that.dataFrameId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dataFrameId = true;
      list.add(present_dataFrameId);
      if (present_dataFrameId)
        list.add(dataFrameId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataFrameAncestry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDataFrameId()).compareTo(other.isSetDataFrameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataFrameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataFrameId, other.dataFrameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataFrameAncestry_args(");
      boolean first = true;

      sb.append("dataFrameId:");
      sb.append(this.dataFrameId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataFrameAncestry_argsStandardSchemeFactory implements SchemeFactory {
      public getDataFrameAncestry_argsStandardScheme getScheme() {
        return new getDataFrameAncestry_argsStandardScheme();
      }
    }

    private static class getDataFrameAncestry_argsStandardScheme extends StandardScheme<getDataFrameAncestry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataFrameAncestry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA_FRAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dataFrameId = iprot.readI32();
                struct.setDataFrameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataFrameAncestry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATA_FRAME_ID_FIELD_DESC);
        oprot.writeI32(struct.dataFrameId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataFrameAncestry_argsTupleSchemeFactory implements SchemeFactory {
      public getDataFrameAncestry_argsTupleScheme getScheme() {
        return new getDataFrameAncestry_argsTupleScheme();
      }
    }

    private static class getDataFrameAncestry_argsTupleScheme extends TupleScheme<getDataFrameAncestry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataFrameAncestry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDataFrameId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDataFrameId()) {
          oprot.writeI32(struct.dataFrameId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataFrameAncestry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dataFrameId = iprot.readI32();
          struct.setDataFrameIdIsSet(true);
        }
      }
    }

  }

  public static class getDataFrameAncestry_result implements org.apache.thrift.TBase<getDataFrameAncestry_result, getDataFrameAncestry_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataFrameAncestry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataFrameAncestry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDataFrameAncestry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDataFrameAncestry_resultTupleSchemeFactory());
    }

    public DataFrameAncestry success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataFrameAncestry.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataFrameAncestry_result.class, metaDataMap);
    }

    public getDataFrameAncestry_result() {
    }

    public getDataFrameAncestry_result(
      DataFrameAncestry success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDataFrameAncestry_result(getDataFrameAncestry_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataFrameAncestry(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getDataFrameAncestry_result deepCopy() {
      return new getDataFrameAncestry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public DataFrameAncestry getSuccess() {
      return this.success;
    }

    public getDataFrameAncestry_result setSuccess(DataFrameAncestry success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getDataFrameAncestry_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getDataFrameAncestry_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataFrameAncestry)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDataFrameAncestry_result)
        return this.equals((getDataFrameAncestry_result)that);
      return false;
    }

    public boolean equals(getDataFrameAncestry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getDataFrameAncestry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDataFrameAncestry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDataFrameAncestry_resultStandardSchemeFactory implements SchemeFactory {
      public getDataFrameAncestry_resultStandardScheme getScheme() {
        return new getDataFrameAncestry_resultStandardScheme();
      }
    }

    private static class getDataFrameAncestry_resultStandardScheme extends StandardScheme<getDataFrameAncestry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataFrameAncestry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataFrameAncestry();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataFrameAncestry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDataFrameAncestry_resultTupleSchemeFactory implements SchemeFactory {
      public getDataFrameAncestry_resultTupleScheme getScheme() {
        return new getDataFrameAncestry_resultTupleScheme();
      }
    }

    private static class getDataFrameAncestry_resultTupleScheme extends TupleScheme<getDataFrameAncestry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDataFrameAncestry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDataFrameAncestry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new DataFrameAncestry();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getCommonAncestor_args implements org.apache.thrift.TBase<getCommonAncestor_args, getCommonAncestor_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCommonAncestor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCommonAncestor_args");

    private static final org.apache.thrift.protocol.TField DF_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("dfId1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DF_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("dfId2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCommonAncestor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCommonAncestor_argsTupleSchemeFactory());
    }

    public int dfId1; // required
    public int dfId2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DF_ID1((short)1, "dfId1"),
      DF_ID2((short)2, "dfId2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DF_ID1
            return DF_ID1;
          case 2: // DF_ID2
            return DF_ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DFID1_ISSET_ID = 0;
    private static final int __DFID2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DF_ID1, new org.apache.thrift.meta_data.FieldMetaData("dfId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DF_ID2, new org.apache.thrift.meta_data.FieldMetaData("dfId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommonAncestor_args.class, metaDataMap);
    }

    public getCommonAncestor_args() {
    }

    public getCommonAncestor_args(
      int dfId1,
      int dfId2)
    {
      this();
      this.dfId1 = dfId1;
      setDfId1IsSet(true);
      this.dfId2 = dfId2;
      setDfId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommonAncestor_args(getCommonAncestor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dfId1 = other.dfId1;
      this.dfId2 = other.dfId2;
    }

    public getCommonAncestor_args deepCopy() {
      return new getCommonAncestor_args(this);
    }

    @Override
    public void clear() {
      setDfId1IsSet(false);
      this.dfId1 = 0;
      setDfId2IsSet(false);
      this.dfId2 = 0;
    }

    public int getDfId1() {
      return this.dfId1;
    }

    public getCommonAncestor_args setDfId1(int dfId1) {
      this.dfId1 = dfId1;
      setDfId1IsSet(true);
      return this;
    }

    public void unsetDfId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DFID1_ISSET_ID);
    }

    /** Returns true if field dfId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetDfId1() {
      return EncodingUtils.testBit(__isset_bitfield, __DFID1_ISSET_ID);
    }

    public void setDfId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DFID1_ISSET_ID, value);
    }

    public int getDfId2() {
      return this.dfId2;
    }

    public getCommonAncestor_args setDfId2(int dfId2) {
      this.dfId2 = dfId2;
      setDfId2IsSet(true);
      return this;
    }

    public void unsetDfId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DFID2_ISSET_ID);
    }

    /** Returns true if field dfId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetDfId2() {
      return EncodingUtils.testBit(__isset_bitfield, __DFID2_ISSET_ID);
    }

    public void setDfId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DFID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DF_ID1:
        if (value == null) {
          unsetDfId1();
        } else {
          setDfId1((Integer)value);
        }
        break;

      case DF_ID2:
        if (value == null) {
          unsetDfId2();
        } else {
          setDfId2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DF_ID1:
        return getDfId1();

      case DF_ID2:
        return getDfId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DF_ID1:
        return isSetDfId1();
      case DF_ID2:
        return isSetDfId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommonAncestor_args)
        return this.equals((getCommonAncestor_args)that);
      return false;
    }

    public boolean equals(getCommonAncestor_args that) {
      if (that == null)
        return false;

      boolean this_present_dfId1 = true;
      boolean that_present_dfId1 = true;
      if (this_present_dfId1 || that_present_dfId1) {
        if (!(this_present_dfId1 && that_present_dfId1))
          return false;
        if (this.dfId1 != that.dfId1)
          return false;
      }

      boolean this_present_dfId2 = true;
      boolean that_present_dfId2 = true;
      if (this_present_dfId2 || that_present_dfId2) {
        if (!(this_present_dfId2 && that_present_dfId2))
          return false;
        if (this.dfId2 != that.dfId2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dfId1 = true;
      list.add(present_dfId1);
      if (present_dfId1)
        list.add(dfId1);

      boolean present_dfId2 = true;
      list.add(present_dfId2);
      if (present_dfId2)
        list.add(dfId2);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCommonAncestor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDfId1()).compareTo(other.isSetDfId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDfId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dfId1, other.dfId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDfId2()).compareTo(other.isSetDfId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDfId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dfId2, other.dfId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCommonAncestor_args(");
      boolean first = true;

      sb.append("dfId1:");
      sb.append(this.dfId1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dfId2:");
      sb.append(this.dfId2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCommonAncestor_argsStandardSchemeFactory implements SchemeFactory {
      public getCommonAncestor_argsStandardScheme getScheme() {
        return new getCommonAncestor_argsStandardScheme();
      }
    }

    private static class getCommonAncestor_argsStandardScheme extends StandardScheme<getCommonAncestor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCommonAncestor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DF_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dfId1 = iprot.readI32();
                struct.setDfId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DF_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dfId2 = iprot.readI32();
                struct.setDfId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCommonAncestor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DF_ID1_FIELD_DESC);
        oprot.writeI32(struct.dfId1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DF_ID2_FIELD_DESC);
        oprot.writeI32(struct.dfId2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCommonAncestor_argsTupleSchemeFactory implements SchemeFactory {
      public getCommonAncestor_argsTupleScheme getScheme() {
        return new getCommonAncestor_argsTupleScheme();
      }
    }

    private static class getCommonAncestor_argsTupleScheme extends TupleScheme<getCommonAncestor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCommonAncestor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDfId1()) {
          optionals.set(0);
        }
        if (struct.isSetDfId2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDfId1()) {
          oprot.writeI32(struct.dfId1);
        }
        if (struct.isSetDfId2()) {
          oprot.writeI32(struct.dfId2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCommonAncestor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dfId1 = iprot.readI32();
          struct.setDfId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.dfId2 = iprot.readI32();
          struct.setDfId2IsSet(true);
        }
      }
    }

  }

  public static class getCommonAncestor_result implements org.apache.thrift.TBase<getCommonAncestor_result, getCommonAncestor_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCommonAncestor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCommonAncestor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCommonAncestor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCommonAncestor_resultTupleSchemeFactory());
    }

    public CommonAncestor success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonAncestor.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommonAncestor_result.class, metaDataMap);
    }

    public getCommonAncestor_result() {
    }

    public getCommonAncestor_result(
      CommonAncestor success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommonAncestor_result(getCommonAncestor_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommonAncestor(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getCommonAncestor_result deepCopy() {
      return new getCommonAncestor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public CommonAncestor getSuccess() {
      return this.success;
    }

    public getCommonAncestor_result setSuccess(CommonAncestor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getCommonAncestor_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getCommonAncestor_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommonAncestor)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommonAncestor_result)
        return this.equals((getCommonAncestor_result)that);
      return false;
    }

    public boolean equals(getCommonAncestor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCommonAncestor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCommonAncestor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCommonAncestor_resultStandardSchemeFactory implements SchemeFactory {
      public getCommonAncestor_resultStandardScheme getScheme() {
        return new getCommonAncestor_resultStandardScheme();
      }
    }

    private static class getCommonAncestor_resultStandardScheme extends StandardScheme<getCommonAncestor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCommonAncestor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommonAncestor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCommonAncestor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCommonAncestor_resultTupleSchemeFactory implements SchemeFactory {
      public getCommonAncestor_resultTupleScheme getScheme() {
        return new getCommonAncestor_resultTupleScheme();
      }
    }

    private static class getCommonAncestor_resultTupleScheme extends TupleScheme<getCommonAncestor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCommonAncestor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCommonAncestor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CommonAncestor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getCommonAncestorForModels_args implements org.apache.thrift.TBase<getCommonAncestorForModels_args, getCommonAncestorForModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCommonAncestorForModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCommonAncestorForModels_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MODEL_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCommonAncestorForModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCommonAncestorForModels_argsTupleSchemeFactory());
    }

    public int modelId1; // required
    public int modelId2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID1((short)1, "modelId1"),
      MODEL_ID2((short)2, "modelId2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID1
            return MODEL_ID1;
          case 2: // MODEL_ID2
            return MODEL_ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID1_ISSET_ID = 0;
    private static final int __MODELID2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID1, new org.apache.thrift.meta_data.FieldMetaData("modelId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODEL_ID2, new org.apache.thrift.meta_data.FieldMetaData("modelId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommonAncestorForModels_args.class, metaDataMap);
    }

    public getCommonAncestorForModels_args() {
    }

    public getCommonAncestorForModels_args(
      int modelId1,
      int modelId2)
    {
      this();
      this.modelId1 = modelId1;
      setModelId1IsSet(true);
      this.modelId2 = modelId2;
      setModelId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommonAncestorForModels_args(getCommonAncestorForModels_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId1 = other.modelId1;
      this.modelId2 = other.modelId2;
    }

    public getCommonAncestorForModels_args deepCopy() {
      return new getCommonAncestorForModels_args(this);
    }

    @Override
    public void clear() {
      setModelId1IsSet(false);
      this.modelId1 = 0;
      setModelId2IsSet(false);
      this.modelId2 = 0;
    }

    public int getModelId1() {
      return this.modelId1;
    }

    public getCommonAncestorForModels_args setModelId1(int modelId1) {
      this.modelId1 = modelId1;
      setModelId1IsSet(true);
      return this;
    }

    public void unsetModelId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID1_ISSET_ID);
    }

    /** Returns true if field modelId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId1() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID1_ISSET_ID);
    }

    public void setModelId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID1_ISSET_ID, value);
    }

    public int getModelId2() {
      return this.modelId2;
    }

    public getCommonAncestorForModels_args setModelId2(int modelId2) {
      this.modelId2 = modelId2;
      setModelId2IsSet(true);
      return this;
    }

    public void unsetModelId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID2_ISSET_ID);
    }

    /** Returns true if field modelId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId2() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID2_ISSET_ID);
    }

    public void setModelId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID1:
        if (value == null) {
          unsetModelId1();
        } else {
          setModelId1((Integer)value);
        }
        break;

      case MODEL_ID2:
        if (value == null) {
          unsetModelId2();
        } else {
          setModelId2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID1:
        return getModelId1();

      case MODEL_ID2:
        return getModelId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID1:
        return isSetModelId1();
      case MODEL_ID2:
        return isSetModelId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommonAncestorForModels_args)
        return this.equals((getCommonAncestorForModels_args)that);
      return false;
    }

    public boolean equals(getCommonAncestorForModels_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId1 = true;
      boolean that_present_modelId1 = true;
      if (this_present_modelId1 || that_present_modelId1) {
        if (!(this_present_modelId1 && that_present_modelId1))
          return false;
        if (this.modelId1 != that.modelId1)
          return false;
      }

      boolean this_present_modelId2 = true;
      boolean that_present_modelId2 = true;
      if (this_present_modelId2 || that_present_modelId2) {
        if (!(this_present_modelId2 && that_present_modelId2))
          return false;
        if (this.modelId2 != that.modelId2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId1 = true;
      list.add(present_modelId1);
      if (present_modelId1)
        list.add(modelId1);

      boolean present_modelId2 = true;
      list.add(present_modelId2);
      if (present_modelId2)
        list.add(modelId2);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCommonAncestorForModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId1()).compareTo(other.isSetModelId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId1, other.modelId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModelId2()).compareTo(other.isSetModelId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId2, other.modelId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCommonAncestorForModels_args(");
      boolean first = true;

      sb.append("modelId1:");
      sb.append(this.modelId1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelId2:");
      sb.append(this.modelId2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCommonAncestorForModels_argsStandardSchemeFactory implements SchemeFactory {
      public getCommonAncestorForModels_argsStandardScheme getScheme() {
        return new getCommonAncestorForModels_argsStandardScheme();
      }
    }

    private static class getCommonAncestorForModels_argsStandardScheme extends StandardScheme<getCommonAncestorForModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCommonAncestorForModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId1 = iprot.readI32();
                struct.setModelId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODEL_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId2 = iprot.readI32();
                struct.setModelId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCommonAncestorForModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID1_FIELD_DESC);
        oprot.writeI32(struct.modelId1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODEL_ID2_FIELD_DESC);
        oprot.writeI32(struct.modelId2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCommonAncestorForModels_argsTupleSchemeFactory implements SchemeFactory {
      public getCommonAncestorForModels_argsTupleScheme getScheme() {
        return new getCommonAncestorForModels_argsTupleScheme();
      }
    }

    private static class getCommonAncestorForModels_argsTupleScheme extends TupleScheme<getCommonAncestorForModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCommonAncestorForModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId1()) {
          optionals.set(0);
        }
        if (struct.isSetModelId2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelId1()) {
          oprot.writeI32(struct.modelId1);
        }
        if (struct.isSetModelId2()) {
          oprot.writeI32(struct.modelId2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCommonAncestorForModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.modelId1 = iprot.readI32();
          struct.setModelId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.modelId2 = iprot.readI32();
          struct.setModelId2IsSet(true);
        }
      }
    }

  }

  public static class getCommonAncestorForModels_result implements org.apache.thrift.TBase<getCommonAncestorForModels_result, getCommonAncestorForModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCommonAncestorForModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCommonAncestorForModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCommonAncestorForModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCommonAncestorForModels_resultTupleSchemeFactory());
    }

    public CommonAncestor success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonAncestor.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCommonAncestorForModels_result.class, metaDataMap);
    }

    public getCommonAncestorForModels_result() {
    }

    public getCommonAncestorForModels_result(
      CommonAncestor success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommonAncestorForModels_result(getCommonAncestorForModels_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommonAncestor(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getCommonAncestorForModels_result deepCopy() {
      return new getCommonAncestorForModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public CommonAncestor getSuccess() {
      return this.success;
    }

    public getCommonAncestorForModels_result setSuccess(CommonAncestor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getCommonAncestorForModels_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getCommonAncestorForModels_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommonAncestor)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommonAncestorForModels_result)
        return this.equals((getCommonAncestorForModels_result)that);
      return false;
    }

    public boolean equals(getCommonAncestorForModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCommonAncestorForModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCommonAncestorForModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCommonAncestorForModels_resultStandardSchemeFactory implements SchemeFactory {
      public getCommonAncestorForModels_resultStandardScheme getScheme() {
        return new getCommonAncestorForModels_resultStandardScheme();
      }
    }

    private static class getCommonAncestorForModels_resultStandardScheme extends StandardScheme<getCommonAncestorForModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCommonAncestorForModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommonAncestor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCommonAncestorForModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCommonAncestorForModels_resultTupleSchemeFactory implements SchemeFactory {
      public getCommonAncestorForModels_resultTupleScheme getScheme() {
        return new getCommonAncestorForModels_resultTupleScheme();
      }
    }

    private static class getCommonAncestorForModels_resultTupleScheme extends TupleScheme<getCommonAncestorForModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCommonAncestorForModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCommonAncestorForModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CommonAncestor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getTrainingRowsCount_args implements org.apache.thrift.TBase<getTrainingRowsCount_args, getTrainingRowsCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTrainingRowsCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrainingRowsCount_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTrainingRowsCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTrainingRowsCount_argsTupleSchemeFactory());
    }

    public int modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrainingRowsCount_args.class, metaDataMap);
    }

    public getTrainingRowsCount_args() {
    }

    public getTrainingRowsCount_args(
      int modelId)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrainingRowsCount_args(getTrainingRowsCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
    }

    public getTrainingRowsCount_args deepCopy() {
      return new getTrainingRowsCount_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public getTrainingRowsCount_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrainingRowsCount_args)
        return this.equals((getTrainingRowsCount_args)that);
      return false;
    }

    public boolean equals(getTrainingRowsCount_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTrainingRowsCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrainingRowsCount_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTrainingRowsCount_argsStandardSchemeFactory implements SchemeFactory {
      public getTrainingRowsCount_argsStandardScheme getScheme() {
        return new getTrainingRowsCount_argsStandardScheme();
      }
    }

    private static class getTrainingRowsCount_argsStandardScheme extends StandardScheme<getTrainingRowsCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTrainingRowsCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTrainingRowsCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTrainingRowsCount_argsTupleSchemeFactory implements SchemeFactory {
      public getTrainingRowsCount_argsTupleScheme getScheme() {
        return new getTrainingRowsCount_argsTupleScheme();
      }
    }

    private static class getTrainingRowsCount_argsTupleScheme extends TupleScheme<getTrainingRowsCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class getTrainingRowsCount_result implements org.apache.thrift.TBase<getTrainingRowsCount_result, getTrainingRowsCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTrainingRowsCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrainingRowsCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTrainingRowsCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTrainingRowsCount_resultTupleSchemeFactory());
    }

    public int success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrainingRowsCount_result.class, metaDataMap);
    }

    public getTrainingRowsCount_result() {
    }

    public getTrainingRowsCount_result(
      int success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrainingRowsCount_result(getTrainingRowsCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getTrainingRowsCount_result deepCopy() {
      return new getTrainingRowsCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.rnfEx = null;
      this.svEx = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getTrainingRowsCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getTrainingRowsCount_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getTrainingRowsCount_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrainingRowsCount_result)
        return this.equals((getTrainingRowsCount_result)that);
      return false;
    }

    public boolean equals(getTrainingRowsCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTrainingRowsCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrainingRowsCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTrainingRowsCount_resultStandardSchemeFactory implements SchemeFactory {
      public getTrainingRowsCount_resultStandardScheme getScheme() {
        return new getTrainingRowsCount_resultStandardScheme();
      }
    }

    private static class getTrainingRowsCount_resultStandardScheme extends StandardScheme<getTrainingRowsCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTrainingRowsCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTrainingRowsCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTrainingRowsCount_resultTupleSchemeFactory implements SchemeFactory {
      public getTrainingRowsCount_resultTupleScheme getScheme() {
        return new getTrainingRowsCount_resultTupleScheme();
      }
    }

    private static class getTrainingRowsCount_resultTupleScheme extends TupleScheme<getTrainingRowsCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getTrainingRowsCounts_args implements org.apache.thrift.TBase<getTrainingRowsCounts_args, getTrainingRowsCounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTrainingRowsCounts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrainingRowsCounts_args");

    private static final org.apache.thrift.protocol.TField MODEL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("modelIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTrainingRowsCounts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTrainingRowsCounts_argsTupleSchemeFactory());
    }

    public List<Integer> modelIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_IDS((short)1, "modelIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_IDS
            return MODEL_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_IDS, new org.apache.thrift.meta_data.FieldMetaData("modelIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrainingRowsCounts_args.class, metaDataMap);
    }

    public getTrainingRowsCounts_args() {
    }

    public getTrainingRowsCounts_args(
      List<Integer> modelIds)
    {
      this();
      this.modelIds = modelIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrainingRowsCounts_args(getTrainingRowsCounts_args other) {
      if (other.isSetModelIds()) {
        List<Integer> __this__modelIds = new ArrayList<Integer>(other.modelIds);
        this.modelIds = __this__modelIds;
      }
    }

    public getTrainingRowsCounts_args deepCopy() {
      return new getTrainingRowsCounts_args(this);
    }

    @Override
    public void clear() {
      this.modelIds = null;
    }

    public int getModelIdsSize() {
      return (this.modelIds == null) ? 0 : this.modelIds.size();
    }

    public java.util.Iterator<Integer> getModelIdsIterator() {
      return (this.modelIds == null) ? null : this.modelIds.iterator();
    }

    public void addToModelIds(int elem) {
      if (this.modelIds == null) {
        this.modelIds = new ArrayList<Integer>();
      }
      this.modelIds.add(elem);
    }

    public List<Integer> getModelIds() {
      return this.modelIds;
    }

    public getTrainingRowsCounts_args setModelIds(List<Integer> modelIds) {
      this.modelIds = modelIds;
      return this;
    }

    public void unsetModelIds() {
      this.modelIds = null;
    }

    /** Returns true if field modelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetModelIds() {
      return this.modelIds != null;
    }

    public void setModelIdsIsSet(boolean value) {
      if (!value) {
        this.modelIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_IDS:
        if (value == null) {
          unsetModelIds();
        } else {
          setModelIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_IDS:
        return getModelIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_IDS:
        return isSetModelIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrainingRowsCounts_args)
        return this.equals((getTrainingRowsCounts_args)that);
      return false;
    }

    public boolean equals(getTrainingRowsCounts_args that) {
      if (that == null)
        return false;

      boolean this_present_modelIds = true && this.isSetModelIds();
      boolean that_present_modelIds = true && that.isSetModelIds();
      if (this_present_modelIds || that_present_modelIds) {
        if (!(this_present_modelIds && that_present_modelIds))
          return false;
        if (!this.modelIds.equals(that.modelIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelIds = true && (isSetModelIds());
      list.add(present_modelIds);
      if (present_modelIds)
        list.add(modelIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTrainingRowsCounts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelIds()).compareTo(other.isSetModelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelIds, other.modelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrainingRowsCounts_args(");
      boolean first = true;

      sb.append("modelIds:");
      if (this.modelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.modelIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTrainingRowsCounts_argsStandardSchemeFactory implements SchemeFactory {
      public getTrainingRowsCounts_argsStandardScheme getScheme() {
        return new getTrainingRowsCounts_argsStandardScheme();
      }
    }

    private static class getTrainingRowsCounts_argsStandardScheme extends StandardScheme<getTrainingRowsCounts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTrainingRowsCounts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list402 = iprot.readListBegin();
                  struct.modelIds = new ArrayList<Integer>(_list402.size);
                  int _elem403;
                  for (int _i404 = 0; _i404 < _list402.size; ++_i404)
                  {
                    _elem403 = iprot.readI32();
                    struct.modelIds.add(_elem403);
                  }
                  iprot.readListEnd();
                }
                struct.setModelIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTrainingRowsCounts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelIds != null) {
          oprot.writeFieldBegin(MODEL_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.modelIds.size()));
            for (int _iter405 : struct.modelIds)
            {
              oprot.writeI32(_iter405);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTrainingRowsCounts_argsTupleSchemeFactory implements SchemeFactory {
      public getTrainingRowsCounts_argsTupleScheme getScheme() {
        return new getTrainingRowsCounts_argsTupleScheme();
      }
    }

    private static class getTrainingRowsCounts_argsTupleScheme extends TupleScheme<getTrainingRowsCounts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelIds()) {
          {
            oprot.writeI32(struct.modelIds.size());
            for (int _iter406 : struct.modelIds)
            {
              oprot.writeI32(_iter406);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCounts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list407 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.modelIds = new ArrayList<Integer>(_list407.size);
            int _elem408;
            for (int _i409 = 0; _i409 < _list407.size; ++_i409)
            {
              _elem408 = iprot.readI32();
              struct.modelIds.add(_elem408);
            }
          }
          struct.setModelIdsIsSet(true);
        }
      }
    }

  }

  public static class getTrainingRowsCounts_result implements org.apache.thrift.TBase<getTrainingRowsCounts_result, getTrainingRowsCounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTrainingRowsCounts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTrainingRowsCounts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTrainingRowsCounts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTrainingRowsCounts_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTrainingRowsCounts_result.class, metaDataMap);
    }

    public getTrainingRowsCounts_result() {
    }

    public getTrainingRowsCounts_result(
      List<Integer> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTrainingRowsCounts_result(getTrainingRowsCounts_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getTrainingRowsCounts_result deepCopy() {
      return new getTrainingRowsCounts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getTrainingRowsCounts_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getTrainingRowsCounts_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTrainingRowsCounts_result)
        return this.equals((getTrainingRowsCounts_result)that);
      return false;
    }

    public boolean equals(getTrainingRowsCounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTrainingRowsCounts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTrainingRowsCounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTrainingRowsCounts_resultStandardSchemeFactory implements SchemeFactory {
      public getTrainingRowsCounts_resultStandardScheme getScheme() {
        return new getTrainingRowsCounts_resultStandardScheme();
      }
    }

    private static class getTrainingRowsCounts_resultStandardScheme extends StandardScheme<getTrainingRowsCounts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTrainingRowsCounts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list410 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list410.size);
                  int _elem411;
                  for (int _i412 = 0; _i412 < _list410.size; ++_i412)
                  {
                    _elem411 = iprot.readI32();
                    struct.success.add(_elem411);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTrainingRowsCounts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter413 : struct.success)
            {
              oprot.writeI32(_iter413);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTrainingRowsCounts_resultTupleSchemeFactory implements SchemeFactory {
      public getTrainingRowsCounts_resultTupleScheme getScheme() {
        return new getTrainingRowsCounts_resultTupleScheme();
      }
    }

    private static class getTrainingRowsCounts_resultTupleScheme extends TupleScheme<getTrainingRowsCounts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter414 : struct.success)
            {
              oprot.writeI32(_iter414);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTrainingRowsCounts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list415 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list415.size);
            int _elem416;
            for (int _i417 = 0; _i417 < _list415.size; ++_i417)
            {
              _elem416 = iprot.readI32();
              struct.success.add(_elem416);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class compareHyperparameters_args implements org.apache.thrift.TBase<compareHyperparameters_args, compareHyperparameters_args._Fields>, java.io.Serializable, Cloneable, Comparable<compareHyperparameters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compareHyperparameters_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MODEL_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new compareHyperparameters_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compareHyperparameters_argsTupleSchemeFactory());
    }

    public int modelId1; // required
    public int modelId2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID1((short)1, "modelId1"),
      MODEL_ID2((short)2, "modelId2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID1
            return MODEL_ID1;
          case 2: // MODEL_ID2
            return MODEL_ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID1_ISSET_ID = 0;
    private static final int __MODELID2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID1, new org.apache.thrift.meta_data.FieldMetaData("modelId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODEL_ID2, new org.apache.thrift.meta_data.FieldMetaData("modelId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compareHyperparameters_args.class, metaDataMap);
    }

    public compareHyperparameters_args() {
    }

    public compareHyperparameters_args(
      int modelId1,
      int modelId2)
    {
      this();
      this.modelId1 = modelId1;
      setModelId1IsSet(true);
      this.modelId2 = modelId2;
      setModelId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compareHyperparameters_args(compareHyperparameters_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId1 = other.modelId1;
      this.modelId2 = other.modelId2;
    }

    public compareHyperparameters_args deepCopy() {
      return new compareHyperparameters_args(this);
    }

    @Override
    public void clear() {
      setModelId1IsSet(false);
      this.modelId1 = 0;
      setModelId2IsSet(false);
      this.modelId2 = 0;
    }

    public int getModelId1() {
      return this.modelId1;
    }

    public compareHyperparameters_args setModelId1(int modelId1) {
      this.modelId1 = modelId1;
      setModelId1IsSet(true);
      return this;
    }

    public void unsetModelId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID1_ISSET_ID);
    }

    /** Returns true if field modelId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId1() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID1_ISSET_ID);
    }

    public void setModelId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID1_ISSET_ID, value);
    }

    public int getModelId2() {
      return this.modelId2;
    }

    public compareHyperparameters_args setModelId2(int modelId2) {
      this.modelId2 = modelId2;
      setModelId2IsSet(true);
      return this;
    }

    public void unsetModelId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID2_ISSET_ID);
    }

    /** Returns true if field modelId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId2() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID2_ISSET_ID);
    }

    public void setModelId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID1:
        if (value == null) {
          unsetModelId1();
        } else {
          setModelId1((Integer)value);
        }
        break;

      case MODEL_ID2:
        if (value == null) {
          unsetModelId2();
        } else {
          setModelId2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID1:
        return getModelId1();

      case MODEL_ID2:
        return getModelId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID1:
        return isSetModelId1();
      case MODEL_ID2:
        return isSetModelId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compareHyperparameters_args)
        return this.equals((compareHyperparameters_args)that);
      return false;
    }

    public boolean equals(compareHyperparameters_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId1 = true;
      boolean that_present_modelId1 = true;
      if (this_present_modelId1 || that_present_modelId1) {
        if (!(this_present_modelId1 && that_present_modelId1))
          return false;
        if (this.modelId1 != that.modelId1)
          return false;
      }

      boolean this_present_modelId2 = true;
      boolean that_present_modelId2 = true;
      if (this_present_modelId2 || that_present_modelId2) {
        if (!(this_present_modelId2 && that_present_modelId2))
          return false;
        if (this.modelId2 != that.modelId2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId1 = true;
      list.add(present_modelId1);
      if (present_modelId1)
        list.add(modelId1);

      boolean present_modelId2 = true;
      list.add(present_modelId2);
      if (present_modelId2)
        list.add(modelId2);

      return list.hashCode();
    }

    @Override
    public int compareTo(compareHyperparameters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId1()).compareTo(other.isSetModelId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId1, other.modelId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModelId2()).compareTo(other.isSetModelId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId2, other.modelId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compareHyperparameters_args(");
      boolean first = true;

      sb.append("modelId1:");
      sb.append(this.modelId1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelId2:");
      sb.append(this.modelId2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compareHyperparameters_argsStandardSchemeFactory implements SchemeFactory {
      public compareHyperparameters_argsStandardScheme getScheme() {
        return new compareHyperparameters_argsStandardScheme();
      }
    }

    private static class compareHyperparameters_argsStandardScheme extends StandardScheme<compareHyperparameters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compareHyperparameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId1 = iprot.readI32();
                struct.setModelId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODEL_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId2 = iprot.readI32();
                struct.setModelId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compareHyperparameters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID1_FIELD_DESC);
        oprot.writeI32(struct.modelId1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODEL_ID2_FIELD_DESC);
        oprot.writeI32(struct.modelId2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compareHyperparameters_argsTupleSchemeFactory implements SchemeFactory {
      public compareHyperparameters_argsTupleScheme getScheme() {
        return new compareHyperparameters_argsTupleScheme();
      }
    }

    private static class compareHyperparameters_argsTupleScheme extends TupleScheme<compareHyperparameters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compareHyperparameters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId1()) {
          optionals.set(0);
        }
        if (struct.isSetModelId2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelId1()) {
          oprot.writeI32(struct.modelId1);
        }
        if (struct.isSetModelId2()) {
          oprot.writeI32(struct.modelId2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compareHyperparameters_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.modelId1 = iprot.readI32();
          struct.setModelId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.modelId2 = iprot.readI32();
          struct.setModelId2IsSet(true);
        }
      }
    }

  }

  public static class compareHyperparameters_result implements org.apache.thrift.TBase<compareHyperparameters_result, compareHyperparameters_result._Fields>, java.io.Serializable, Cloneable, Comparable<compareHyperparameters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compareHyperparameters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new compareHyperparameters_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compareHyperparameters_resultTupleSchemeFactory());
    }

    public CompareHyperParametersResponse success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompareHyperParametersResponse.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compareHyperparameters_result.class, metaDataMap);
    }

    public compareHyperparameters_result() {
    }

    public compareHyperparameters_result(
      CompareHyperParametersResponse success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compareHyperparameters_result(compareHyperparameters_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompareHyperParametersResponse(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public compareHyperparameters_result deepCopy() {
      return new compareHyperparameters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public CompareHyperParametersResponse getSuccess() {
      return this.success;
    }

    public compareHyperparameters_result setSuccess(CompareHyperParametersResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public compareHyperparameters_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public compareHyperparameters_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompareHyperParametersResponse)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compareHyperparameters_result)
        return this.equals((compareHyperparameters_result)that);
      return false;
    }

    public boolean equals(compareHyperparameters_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(compareHyperparameters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compareHyperparameters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compareHyperparameters_resultStandardSchemeFactory implements SchemeFactory {
      public compareHyperparameters_resultStandardScheme getScheme() {
        return new compareHyperparameters_resultStandardScheme();
      }
    }

    private static class compareHyperparameters_resultStandardScheme extends StandardScheme<compareHyperparameters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compareHyperparameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompareHyperParametersResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compareHyperparameters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compareHyperparameters_resultTupleSchemeFactory implements SchemeFactory {
      public compareHyperparameters_resultTupleScheme getScheme() {
        return new compareHyperparameters_resultTupleScheme();
      }
    }

    private static class compareHyperparameters_resultTupleScheme extends TupleScheme<compareHyperparameters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compareHyperparameters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compareHyperparameters_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CompareHyperParametersResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class compareFeatures_args implements org.apache.thrift.TBase<compareFeatures_args, compareFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<compareFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compareFeatures_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MODEL_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new compareFeatures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compareFeatures_argsTupleSchemeFactory());
    }

    public int modelId1; // required
    public int modelId2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID1((short)1, "modelId1"),
      MODEL_ID2((short)2, "modelId2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID1
            return MODEL_ID1;
          case 2: // MODEL_ID2
            return MODEL_ID2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID1_ISSET_ID = 0;
    private static final int __MODELID2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID1, new org.apache.thrift.meta_data.FieldMetaData("modelId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODEL_ID2, new org.apache.thrift.meta_data.FieldMetaData("modelId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compareFeatures_args.class, metaDataMap);
    }

    public compareFeatures_args() {
    }

    public compareFeatures_args(
      int modelId1,
      int modelId2)
    {
      this();
      this.modelId1 = modelId1;
      setModelId1IsSet(true);
      this.modelId2 = modelId2;
      setModelId2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compareFeatures_args(compareFeatures_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId1 = other.modelId1;
      this.modelId2 = other.modelId2;
    }

    public compareFeatures_args deepCopy() {
      return new compareFeatures_args(this);
    }

    @Override
    public void clear() {
      setModelId1IsSet(false);
      this.modelId1 = 0;
      setModelId2IsSet(false);
      this.modelId2 = 0;
    }

    public int getModelId1() {
      return this.modelId1;
    }

    public compareFeatures_args setModelId1(int modelId1) {
      this.modelId1 = modelId1;
      setModelId1IsSet(true);
      return this;
    }

    public void unsetModelId1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID1_ISSET_ID);
    }

    /** Returns true if field modelId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId1() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID1_ISSET_ID);
    }

    public void setModelId1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID1_ISSET_ID, value);
    }

    public int getModelId2() {
      return this.modelId2;
    }

    public compareFeatures_args setModelId2(int modelId2) {
      this.modelId2 = modelId2;
      setModelId2IsSet(true);
      return this;
    }

    public void unsetModelId2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID2_ISSET_ID);
    }

    /** Returns true if field modelId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId2() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID2_ISSET_ID);
    }

    public void setModelId2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID1:
        if (value == null) {
          unsetModelId1();
        } else {
          setModelId1((Integer)value);
        }
        break;

      case MODEL_ID2:
        if (value == null) {
          unsetModelId2();
        } else {
          setModelId2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID1:
        return getModelId1();

      case MODEL_ID2:
        return getModelId2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID1:
        return isSetModelId1();
      case MODEL_ID2:
        return isSetModelId2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compareFeatures_args)
        return this.equals((compareFeatures_args)that);
      return false;
    }

    public boolean equals(compareFeatures_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId1 = true;
      boolean that_present_modelId1 = true;
      if (this_present_modelId1 || that_present_modelId1) {
        if (!(this_present_modelId1 && that_present_modelId1))
          return false;
        if (this.modelId1 != that.modelId1)
          return false;
      }

      boolean this_present_modelId2 = true;
      boolean that_present_modelId2 = true;
      if (this_present_modelId2 || that_present_modelId2) {
        if (!(this_present_modelId2 && that_present_modelId2))
          return false;
        if (this.modelId2 != that.modelId2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId1 = true;
      list.add(present_modelId1);
      if (present_modelId1)
        list.add(modelId1);

      boolean present_modelId2 = true;
      list.add(present_modelId2);
      if (present_modelId2)
        list.add(modelId2);

      return list.hashCode();
    }

    @Override
    public int compareTo(compareFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId1()).compareTo(other.isSetModelId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId1, other.modelId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModelId2()).compareTo(other.isSetModelId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId2, other.modelId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compareFeatures_args(");
      boolean first = true;

      sb.append("modelId1:");
      sb.append(this.modelId1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelId2:");
      sb.append(this.modelId2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compareFeatures_argsStandardSchemeFactory implements SchemeFactory {
      public compareFeatures_argsStandardScheme getScheme() {
        return new compareFeatures_argsStandardScheme();
      }
    }

    private static class compareFeatures_argsStandardScheme extends StandardScheme<compareFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compareFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId1 = iprot.readI32();
                struct.setModelId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODEL_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId2 = iprot.readI32();
                struct.setModelId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compareFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID1_FIELD_DESC);
        oprot.writeI32(struct.modelId1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODEL_ID2_FIELD_DESC);
        oprot.writeI32(struct.modelId2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compareFeatures_argsTupleSchemeFactory implements SchemeFactory {
      public compareFeatures_argsTupleScheme getScheme() {
        return new compareFeatures_argsTupleScheme();
      }
    }

    private static class compareFeatures_argsTupleScheme extends TupleScheme<compareFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compareFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId1()) {
          optionals.set(0);
        }
        if (struct.isSetModelId2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelId1()) {
          oprot.writeI32(struct.modelId1);
        }
        if (struct.isSetModelId2()) {
          oprot.writeI32(struct.modelId2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compareFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.modelId1 = iprot.readI32();
          struct.setModelId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.modelId2 = iprot.readI32();
          struct.setModelId2IsSet(true);
        }
      }
    }

  }

  public static class compareFeatures_result implements org.apache.thrift.TBase<compareFeatures_result, compareFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<compareFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compareFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new compareFeatures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compareFeatures_resultTupleSchemeFactory());
    }

    public CompareFeaturesResponse success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompareFeaturesResponse.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compareFeatures_result.class, metaDataMap);
    }

    public compareFeatures_result() {
    }

    public compareFeatures_result(
      CompareFeaturesResponse success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compareFeatures_result(compareFeatures_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompareFeaturesResponse(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public compareFeatures_result deepCopy() {
      return new compareFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public CompareFeaturesResponse getSuccess() {
      return this.success;
    }

    public compareFeatures_result setSuccess(CompareFeaturesResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public compareFeatures_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public compareFeatures_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompareFeaturesResponse)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compareFeatures_result)
        return this.equals((compareFeatures_result)that);
      return false;
    }

    public boolean equals(compareFeatures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(compareFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compareFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compareFeatures_resultStandardSchemeFactory implements SchemeFactory {
      public compareFeatures_resultStandardScheme getScheme() {
        return new compareFeatures_resultStandardScheme();
      }
    }

    private static class compareFeatures_resultStandardScheme extends StandardScheme<compareFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compareFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompareFeaturesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compareFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compareFeatures_resultTupleSchemeFactory implements SchemeFactory {
      public compareFeatures_resultTupleScheme getScheme() {
        return new compareFeatures_resultTupleScheme();
      }
    }

    private static class compareFeatures_resultTupleScheme extends TupleScheme<compareFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compareFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compareFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CompareFeaturesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class groupByProblemType_args implements org.apache.thrift.TBase<groupByProblemType_args, groupByProblemType_args._Fields>, java.io.Serializable, Cloneable, Comparable<groupByProblemType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByProblemType_args");

    private static final org.apache.thrift.protocol.TField MODEL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("modelIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new groupByProblemType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new groupByProblemType_argsTupleSchemeFactory());
    }

    public List<Integer> modelIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_IDS((short)1, "modelIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_IDS
            return MODEL_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_IDS, new org.apache.thrift.meta_data.FieldMetaData("modelIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByProblemType_args.class, metaDataMap);
    }

    public groupByProblemType_args() {
    }

    public groupByProblemType_args(
      List<Integer> modelIds)
    {
      this();
      this.modelIds = modelIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByProblemType_args(groupByProblemType_args other) {
      if (other.isSetModelIds()) {
        List<Integer> __this__modelIds = new ArrayList<Integer>(other.modelIds);
        this.modelIds = __this__modelIds;
      }
    }

    public groupByProblemType_args deepCopy() {
      return new groupByProblemType_args(this);
    }

    @Override
    public void clear() {
      this.modelIds = null;
    }

    public int getModelIdsSize() {
      return (this.modelIds == null) ? 0 : this.modelIds.size();
    }

    public java.util.Iterator<Integer> getModelIdsIterator() {
      return (this.modelIds == null) ? null : this.modelIds.iterator();
    }

    public void addToModelIds(int elem) {
      if (this.modelIds == null) {
        this.modelIds = new ArrayList<Integer>();
      }
      this.modelIds.add(elem);
    }

    public List<Integer> getModelIds() {
      return this.modelIds;
    }

    public groupByProblemType_args setModelIds(List<Integer> modelIds) {
      this.modelIds = modelIds;
      return this;
    }

    public void unsetModelIds() {
      this.modelIds = null;
    }

    /** Returns true if field modelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetModelIds() {
      return this.modelIds != null;
    }

    public void setModelIdsIsSet(boolean value) {
      if (!value) {
        this.modelIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_IDS:
        if (value == null) {
          unsetModelIds();
        } else {
          setModelIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_IDS:
        return getModelIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_IDS:
        return isSetModelIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByProblemType_args)
        return this.equals((groupByProblemType_args)that);
      return false;
    }

    public boolean equals(groupByProblemType_args that) {
      if (that == null)
        return false;

      boolean this_present_modelIds = true && this.isSetModelIds();
      boolean that_present_modelIds = true && that.isSetModelIds();
      if (this_present_modelIds || that_present_modelIds) {
        if (!(this_present_modelIds && that_present_modelIds))
          return false;
        if (!this.modelIds.equals(that.modelIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelIds = true && (isSetModelIds());
      list.add(present_modelIds);
      if (present_modelIds)
        list.add(modelIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(groupByProblemType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelIds()).compareTo(other.isSetModelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelIds, other.modelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupByProblemType_args(");
      boolean first = true;

      sb.append("modelIds:");
      if (this.modelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.modelIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupByProblemType_argsStandardSchemeFactory implements SchemeFactory {
      public groupByProblemType_argsStandardScheme getScheme() {
        return new groupByProblemType_argsStandardScheme();
      }
    }

    private static class groupByProblemType_argsStandardScheme extends StandardScheme<groupByProblemType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupByProblemType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list418 = iprot.readListBegin();
                  struct.modelIds = new ArrayList<Integer>(_list418.size);
                  int _elem419;
                  for (int _i420 = 0; _i420 < _list418.size; ++_i420)
                  {
                    _elem419 = iprot.readI32();
                    struct.modelIds.add(_elem419);
                  }
                  iprot.readListEnd();
                }
                struct.setModelIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupByProblemType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelIds != null) {
          oprot.writeFieldBegin(MODEL_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.modelIds.size()));
            for (int _iter421 : struct.modelIds)
            {
              oprot.writeI32(_iter421);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupByProblemType_argsTupleSchemeFactory implements SchemeFactory {
      public groupByProblemType_argsTupleScheme getScheme() {
        return new groupByProblemType_argsTupleScheme();
      }
    }

    private static class groupByProblemType_argsTupleScheme extends TupleScheme<groupByProblemType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupByProblemType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelIds()) {
          {
            oprot.writeI32(struct.modelIds.size());
            for (int _iter422 : struct.modelIds)
            {
              oprot.writeI32(_iter422);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupByProblemType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list423 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.modelIds = new ArrayList<Integer>(_list423.size);
            int _elem424;
            for (int _i425 = 0; _i425 < _list423.size; ++_i425)
            {
              _elem424 = iprot.readI32();
              struct.modelIds.add(_elem424);
            }
          }
          struct.setModelIdsIsSet(true);
        }
      }
    }

  }

  public static class groupByProblemType_result implements org.apache.thrift.TBase<groupByProblemType_result, groupByProblemType_result._Fields>, java.io.Serializable, Cloneable, Comparable<groupByProblemType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("groupByProblemType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new groupByProblemType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new groupByProblemType_resultTupleSchemeFactory());
    }

    public Map<ProblemType,List<Integer>> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProblemType.class), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(groupByProblemType_result.class, metaDataMap);
    }

    public groupByProblemType_result() {
    }

    public groupByProblemType_result(
      Map<ProblemType,List<Integer>> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public groupByProblemType_result(groupByProblemType_result other) {
      if (other.isSetSuccess()) {
        Map<ProblemType,List<Integer>> __this__success = new HashMap<ProblemType,List<Integer>>(other.success.size());
        for (Map.Entry<ProblemType, List<Integer>> other_element : other.success.entrySet()) {

          ProblemType other_element_key = other_element.getKey();
          List<Integer> other_element_value = other_element.getValue();

          ProblemType __this__success_copy_key = other_element_key;

          List<Integer> __this__success_copy_value = new ArrayList<Integer>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public groupByProblemType_result deepCopy() {
      return new groupByProblemType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(ProblemType key, List<Integer> val) {
      if (this.success == null) {
        this.success = new HashMap<ProblemType,List<Integer>>();
      }
      this.success.put(key, val);
    }

    public Map<ProblemType,List<Integer>> getSuccess() {
      return this.success;
    }

    public groupByProblemType_result setSuccess(Map<ProblemType,List<Integer>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public groupByProblemType_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<ProblemType,List<Integer>>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof groupByProblemType_result)
        return this.equals((groupByProblemType_result)that);
      return false;
    }

    public boolean equals(groupByProblemType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(groupByProblemType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("groupByProblemType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class groupByProblemType_resultStandardSchemeFactory implements SchemeFactory {
      public groupByProblemType_resultStandardScheme getScheme() {
        return new groupByProblemType_resultStandardScheme();
      }
    }

    private static class groupByProblemType_resultStandardScheme extends StandardScheme<groupByProblemType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, groupByProblemType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map426 = iprot.readMapBegin();
                  struct.success = new HashMap<ProblemType,List<Integer>>(2*_map426.size);
                  ProblemType _key427;
                  List<Integer> _val428;
                  for (int _i429 = 0; _i429 < _map426.size; ++_i429)
                  {
                    _key427 = modeldb.ProblemType.findByValue(iprot.readI32());
                    {
                      org.apache.thrift.protocol.TList _list430 = iprot.readListBegin();
                      _val428 = new ArrayList<Integer>(_list430.size);
                      int _elem431;
                      for (int _i432 = 0; _i432 < _list430.size; ++_i432)
                      {
                        _elem431 = iprot.readI32();
                        _val428.add(_elem431);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key427, _val428);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, groupByProblemType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<ProblemType, List<Integer>> _iter433 : struct.success.entrySet())
            {
              oprot.writeI32(_iter433.getKey().getValue());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter433.getValue().size()));
                for (int _iter434 : _iter433.getValue())
                {
                  oprot.writeI32(_iter434);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class groupByProblemType_resultTupleSchemeFactory implements SchemeFactory {
      public groupByProblemType_resultTupleScheme getScheme() {
        return new groupByProblemType_resultTupleScheme();
      }
    }

    private static class groupByProblemType_resultTupleScheme extends TupleScheme<groupByProblemType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, groupByProblemType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<ProblemType, List<Integer>> _iter435 : struct.success.entrySet())
            {
              oprot.writeI32(_iter435.getKey().getValue());
              {
                oprot.writeI32(_iter435.getValue().size());
                for (int _iter436 : _iter435.getValue())
                {
                  oprot.writeI32(_iter436);
                }
              }
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, groupByProblemType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map437 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<ProblemType,List<Integer>>(2*_map437.size);
            ProblemType _key438;
            List<Integer> _val439;
            for (int _i440 = 0; _i440 < _map437.size; ++_i440)
            {
              _key438 = modeldb.ProblemType.findByValue(iprot.readI32());
              {
                org.apache.thrift.protocol.TList _list441 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                _val439 = new ArrayList<Integer>(_list441.size);
                int _elem442;
                for (int _i443 = 0; _i443 < _list441.size; ++_i443)
                {
                  _elem442 = iprot.readI32();
                  _val439.add(_elem442);
                }
              }
              struct.success.put(_key438, _val439);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class similarModels_args implements org.apache.thrift.TBase<similarModels_args, similarModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<similarModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("similarModels_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMP_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("compMetrics", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_MODELS_FIELD_DESC = new org.apache.thrift.protocol.TField("numModels", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new similarModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new similarModels_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public List<ModelCompMetric> compMetrics; // required
    public int numModels; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      COMP_METRICS((short)2, "compMetrics"),
      NUM_MODELS((short)3, "numModels");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // COMP_METRICS
            return COMP_METRICS;
          case 3: // NUM_MODELS
            return NUM_MODELS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private static final int __NUMMODELS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMP_METRICS, new org.apache.thrift.meta_data.FieldMetaData("compMetrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ModelCompMetric.class))));
      tmpMap.put(_Fields.NUM_MODELS, new org.apache.thrift.meta_data.FieldMetaData("numModels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(similarModels_args.class, metaDataMap);
    }

    public similarModels_args() {
    }

    public similarModels_args(
      int modelId,
      List<ModelCompMetric> compMetrics,
      int numModels)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.compMetrics = compMetrics;
      this.numModels = numModels;
      setNumModelsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public similarModels_args(similarModels_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetCompMetrics()) {
        List<ModelCompMetric> __this__compMetrics = new ArrayList<ModelCompMetric>(other.compMetrics.size());
        for (ModelCompMetric other_element : other.compMetrics) {
          __this__compMetrics.add(other_element);
        }
        this.compMetrics = __this__compMetrics;
      }
      this.numModels = other.numModels;
    }

    public similarModels_args deepCopy() {
      return new similarModels_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.compMetrics = null;
      setNumModelsIsSet(false);
      this.numModels = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public similarModels_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public int getCompMetricsSize() {
      return (this.compMetrics == null) ? 0 : this.compMetrics.size();
    }

    public java.util.Iterator<ModelCompMetric> getCompMetricsIterator() {
      return (this.compMetrics == null) ? null : this.compMetrics.iterator();
    }

    public void addToCompMetrics(ModelCompMetric elem) {
      if (this.compMetrics == null) {
        this.compMetrics = new ArrayList<ModelCompMetric>();
      }
      this.compMetrics.add(elem);
    }

    public List<ModelCompMetric> getCompMetrics() {
      return this.compMetrics;
    }

    public similarModels_args setCompMetrics(List<ModelCompMetric> compMetrics) {
      this.compMetrics = compMetrics;
      return this;
    }

    public void unsetCompMetrics() {
      this.compMetrics = null;
    }

    /** Returns true if field compMetrics is set (has been assigned a value) and false otherwise */
    public boolean isSetCompMetrics() {
      return this.compMetrics != null;
    }

    public void setCompMetricsIsSet(boolean value) {
      if (!value) {
        this.compMetrics = null;
      }
    }

    public int getNumModels() {
      return this.numModels;
    }

    public similarModels_args setNumModels(int numModels) {
      this.numModels = numModels;
      setNumModelsIsSet(true);
      return this;
    }

    public void unsetNumModels() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMMODELS_ISSET_ID);
    }

    /** Returns true if field numModels is set (has been assigned a value) and false otherwise */
    public boolean isSetNumModels() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMMODELS_ISSET_ID);
    }

    public void setNumModelsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMMODELS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case COMP_METRICS:
        if (value == null) {
          unsetCompMetrics();
        } else {
          setCompMetrics((List<ModelCompMetric>)value);
        }
        break;

      case NUM_MODELS:
        if (value == null) {
          unsetNumModels();
        } else {
          setNumModels((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case COMP_METRICS:
        return getCompMetrics();

      case NUM_MODELS:
        return getNumModels();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case COMP_METRICS:
        return isSetCompMetrics();
      case NUM_MODELS:
        return isSetNumModels();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof similarModels_args)
        return this.equals((similarModels_args)that);
      return false;
    }

    public boolean equals(similarModels_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_compMetrics = true && this.isSetCompMetrics();
      boolean that_present_compMetrics = true && that.isSetCompMetrics();
      if (this_present_compMetrics || that_present_compMetrics) {
        if (!(this_present_compMetrics && that_present_compMetrics))
          return false;
        if (!this.compMetrics.equals(that.compMetrics))
          return false;
      }

      boolean this_present_numModels = true;
      boolean that_present_numModels = true;
      if (this_present_numModels || that_present_numModels) {
        if (!(this_present_numModels && that_present_numModels))
          return false;
        if (this.numModels != that.numModels)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_compMetrics = true && (isSetCompMetrics());
      list.add(present_compMetrics);
      if (present_compMetrics)
        list.add(compMetrics);

      boolean present_numModels = true;
      list.add(present_numModels);
      if (present_numModels)
        list.add(numModels);

      return list.hashCode();
    }

    @Override
    public int compareTo(similarModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompMetrics()).compareTo(other.isSetCompMetrics());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompMetrics()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compMetrics, other.compMetrics);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumModels()).compareTo(other.isSetNumModels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumModels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numModels, other.numModels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("similarModels_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("compMetrics:");
      if (this.compMetrics == null) {
        sb.append("null");
      } else {
        sb.append(this.compMetrics);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numModels:");
      sb.append(this.numModels);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class similarModels_argsStandardSchemeFactory implements SchemeFactory {
      public similarModels_argsStandardScheme getScheme() {
        return new similarModels_argsStandardScheme();
      }
    }

    private static class similarModels_argsStandardScheme extends StandardScheme<similarModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, similarModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMP_METRICS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list444 = iprot.readListBegin();
                  struct.compMetrics = new ArrayList<ModelCompMetric>(_list444.size);
                  ModelCompMetric _elem445;
                  for (int _i446 = 0; _i446 < _list444.size; ++_i446)
                  {
                    _elem445 = modeldb.ModelCompMetric.findByValue(iprot.readI32());
                    struct.compMetrics.add(_elem445);
                  }
                  iprot.readListEnd();
                }
                struct.setCompMetricsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_MODELS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numModels = iprot.readI32();
                struct.setNumModelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, similarModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.compMetrics != null) {
          oprot.writeFieldBegin(COMP_METRICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.compMetrics.size()));
            for (ModelCompMetric _iter447 : struct.compMetrics)
            {
              oprot.writeI32(_iter447.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_MODELS_FIELD_DESC);
        oprot.writeI32(struct.numModels);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class similarModels_argsTupleSchemeFactory implements SchemeFactory {
      public similarModels_argsTupleScheme getScheme() {
        return new similarModels_argsTupleScheme();
      }
    }

    private static class similarModels_argsTupleScheme extends TupleScheme<similarModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, similarModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetCompMetrics()) {
          optionals.set(1);
        }
        if (struct.isSetNumModels()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetCompMetrics()) {
          {
            oprot.writeI32(struct.compMetrics.size());
            for (ModelCompMetric _iter448 : struct.compMetrics)
            {
              oprot.writeI32(_iter448.getValue());
            }
          }
        }
        if (struct.isSetNumModels()) {
          oprot.writeI32(struct.numModels);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, similarModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list449 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.compMetrics = new ArrayList<ModelCompMetric>(_list449.size);
            ModelCompMetric _elem450;
            for (int _i451 = 0; _i451 < _list449.size; ++_i451)
            {
              _elem450 = modeldb.ModelCompMetric.findByValue(iprot.readI32());
              struct.compMetrics.add(_elem450);
            }
          }
          struct.setCompMetricsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numModels = iprot.readI32();
          struct.setNumModelsIsSet(true);
        }
      }
    }

  }

  public static class similarModels_result implements org.apache.thrift.TBase<similarModels_result, similarModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<similarModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("similarModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BR_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("brEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new similarModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new similarModels_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ResourceNotFoundException rnfEx; // required
    public BadRequestException brEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      BR_EX((short)2, "brEx"),
      SV_EX((short)3, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // BR_EX
            return BR_EX;
          case 3: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BR_EX, new org.apache.thrift.meta_data.FieldMetaData("brEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(similarModels_result.class, metaDataMap);
    }

    public similarModels_result() {
    }

    public similarModels_result(
      List<Integer> success,
      ResourceNotFoundException rnfEx,
      BadRequestException brEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.brEx = brEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public similarModels_result(similarModels_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetBrEx()) {
        this.brEx = new BadRequestException(other.brEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public similarModels_result deepCopy() {
      return new similarModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.brEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public similarModels_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public similarModels_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public BadRequestException getBrEx() {
      return this.brEx;
    }

    public similarModels_result setBrEx(BadRequestException brEx) {
      this.brEx = brEx;
      return this;
    }

    public void unsetBrEx() {
      this.brEx = null;
    }

    /** Returns true if field brEx is set (has been assigned a value) and false otherwise */
    public boolean isSetBrEx() {
      return this.brEx != null;
    }

    public void setBrExIsSet(boolean value) {
      if (!value) {
        this.brEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public similarModels_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case BR_EX:
        if (value == null) {
          unsetBrEx();
        } else {
          setBrEx((BadRequestException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case BR_EX:
        return getBrEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case BR_EX:
        return isSetBrEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof similarModels_result)
        return this.equals((similarModels_result)that);
      return false;
    }

    public boolean equals(similarModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_brEx = true && this.isSetBrEx();
      boolean that_present_brEx = true && that.isSetBrEx();
      if (this_present_brEx || that_present_brEx) {
        if (!(this_present_brEx && that_present_brEx))
          return false;
        if (!this.brEx.equals(that.brEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_brEx = true && (isSetBrEx());
      list.add(present_brEx);
      if (present_brEx)
        list.add(brEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(similarModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBrEx()).compareTo(other.isSetBrEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBrEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brEx, other.brEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("similarModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("brEx:");
      if (this.brEx == null) {
        sb.append("null");
      } else {
        sb.append(this.brEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class similarModels_resultStandardSchemeFactory implements SchemeFactory {
      public similarModels_resultStandardScheme getScheme() {
        return new similarModels_resultStandardScheme();
      }
    }

    private static class similarModels_resultStandardScheme extends StandardScheme<similarModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, similarModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list452 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list452.size);
                  int _elem453;
                  for (int _i454 = 0; _i454 < _list452.size; ++_i454)
                  {
                    _elem453 = iprot.readI32();
                    struct.success.add(_elem453);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BR_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.brEx = new BadRequestException();
                struct.brEx.read(iprot);
                struct.setBrExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, similarModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter455 : struct.success)
            {
              oprot.writeI32(_iter455);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.brEx != null) {
          oprot.writeFieldBegin(BR_EX_FIELD_DESC);
          struct.brEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class similarModels_resultTupleSchemeFactory implements SchemeFactory {
      public similarModels_resultTupleScheme getScheme() {
        return new similarModels_resultTupleScheme();
      }
    }

    private static class similarModels_resultTupleScheme extends TupleScheme<similarModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, similarModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetBrEx()) {
          optionals.set(2);
        }
        if (struct.isSetSvEx()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter456 : struct.success)
            {
              oprot.writeI32(_iter456);
            }
          }
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetBrEx()) {
          struct.brEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, similarModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list457 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list457.size);
            int _elem458;
            for (int _i459 = 0; _i459 < _list457.size; ++_i459)
            {
              _elem458 = iprot.readI32();
              struct.success.add(_elem458);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.brEx = new BadRequestException();
          struct.brEx.read(iprot);
          struct.setBrExIsSet(true);
        }
        if (incoming.get(3)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class linearModelFeatureImportances_args implements org.apache.thrift.TBase<linearModelFeatureImportances_args, linearModelFeatureImportances_args._Fields>, java.io.Serializable, Cloneable, Comparable<linearModelFeatureImportances_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linearModelFeatureImportances_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new linearModelFeatureImportances_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new linearModelFeatureImportances_argsTupleSchemeFactory());
    }

    public int modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linearModelFeatureImportances_args.class, metaDataMap);
    }

    public linearModelFeatureImportances_args() {
    }

    public linearModelFeatureImportances_args(
      int modelId)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linearModelFeatureImportances_args(linearModelFeatureImportances_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
    }

    public linearModelFeatureImportances_args deepCopy() {
      return new linearModelFeatureImportances_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public linearModelFeatureImportances_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linearModelFeatureImportances_args)
        return this.equals((linearModelFeatureImportances_args)that);
      return false;
    }

    public boolean equals(linearModelFeatureImportances_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(linearModelFeatureImportances_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linearModelFeatureImportances_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linearModelFeatureImportances_argsStandardSchemeFactory implements SchemeFactory {
      public linearModelFeatureImportances_argsStandardScheme getScheme() {
        return new linearModelFeatureImportances_argsStandardScheme();
      }
    }

    private static class linearModelFeatureImportances_argsStandardScheme extends StandardScheme<linearModelFeatureImportances_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linearModelFeatureImportances_argsTupleSchemeFactory implements SchemeFactory {
      public linearModelFeatureImportances_argsTupleScheme getScheme() {
        return new linearModelFeatureImportances_argsTupleScheme();
      }
    }

    private static class linearModelFeatureImportances_argsTupleScheme extends TupleScheme<linearModelFeatureImportances_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class linearModelFeatureImportances_result implements org.apache.thrift.TBase<linearModelFeatureImportances_result, linearModelFeatureImportances_result._Fields>, java.io.Serializable, Cloneable, Comparable<linearModelFeatureImportances_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("linearModelFeatureImportances_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IO_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ioEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new linearModelFeatureImportances_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new linearModelFeatureImportances_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ResourceNotFoundException rnfEx; // required
    public IllegalOperationException ioEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      IO_EX((short)2, "ioEx"),
      SV_EX((short)3, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // IO_EX
            return IO_EX;
          case 3: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_EX, new org.apache.thrift.meta_data.FieldMetaData("ioEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(linearModelFeatureImportances_result.class, metaDataMap);
    }

    public linearModelFeatureImportances_result() {
    }

    public linearModelFeatureImportances_result(
      List<String> success,
      ResourceNotFoundException rnfEx,
      IllegalOperationException ioEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.ioEx = ioEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linearModelFeatureImportances_result(linearModelFeatureImportances_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetIoEx()) {
        this.ioEx = new IllegalOperationException(other.ioEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public linearModelFeatureImportances_result deepCopy() {
      return new linearModelFeatureImportances_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.ioEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public linearModelFeatureImportances_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public linearModelFeatureImportances_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public IllegalOperationException getIoEx() {
      return this.ioEx;
    }

    public linearModelFeatureImportances_result setIoEx(IllegalOperationException ioEx) {
      this.ioEx = ioEx;
      return this;
    }

    public void unsetIoEx() {
      this.ioEx = null;
    }

    /** Returns true if field ioEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIoEx() {
      return this.ioEx != null;
    }

    public void setIoExIsSet(boolean value) {
      if (!value) {
        this.ioEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public linearModelFeatureImportances_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case IO_EX:
        if (value == null) {
          unsetIoEx();
        } else {
          setIoEx((IllegalOperationException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case IO_EX:
        return getIoEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case IO_EX:
        return isSetIoEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linearModelFeatureImportances_result)
        return this.equals((linearModelFeatureImportances_result)that);
      return false;
    }

    public boolean equals(linearModelFeatureImportances_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_ioEx = true && this.isSetIoEx();
      boolean that_present_ioEx = true && that.isSetIoEx();
      if (this_present_ioEx || that_present_ioEx) {
        if (!(this_present_ioEx && that_present_ioEx))
          return false;
        if (!this.ioEx.equals(that.ioEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_ioEx = true && (isSetIoEx());
      list.add(present_ioEx);
      if (present_ioEx)
        list.add(ioEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(linearModelFeatureImportances_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoEx()).compareTo(other.isSetIoEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioEx, other.ioEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("linearModelFeatureImportances_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioEx:");
      if (this.ioEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ioEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class linearModelFeatureImportances_resultStandardSchemeFactory implements SchemeFactory {
      public linearModelFeatureImportances_resultStandardScheme getScheme() {
        return new linearModelFeatureImportances_resultStandardScheme();
      }
    }

    private static class linearModelFeatureImportances_resultStandardScheme extends StandardScheme<linearModelFeatureImportances_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, linearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list460 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list460.size);
                  String _elem461;
                  for (int _i462 = 0; _i462 < _list460.size; ++_i462)
                  {
                    _elem461 = iprot.readString();
                    struct.success.add(_elem461);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioEx = new IllegalOperationException();
                struct.ioEx.read(iprot);
                struct.setIoExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, linearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter463 : struct.success)
            {
              oprot.writeString(_iter463);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioEx != null) {
          oprot.writeFieldBegin(IO_EX_FIELD_DESC);
          struct.ioEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class linearModelFeatureImportances_resultTupleSchemeFactory implements SchemeFactory {
      public linearModelFeatureImportances_resultTupleScheme getScheme() {
        return new linearModelFeatureImportances_resultTupleScheme();
      }
    }

    private static class linearModelFeatureImportances_resultTupleScheme extends TupleScheme<linearModelFeatureImportances_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, linearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetIoEx()) {
          optionals.set(2);
        }
        if (struct.isSetSvEx()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter464 : struct.success)
            {
              oprot.writeString(_iter464);
            }
          }
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetIoEx()) {
          struct.ioEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, linearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list465 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list465.size);
            String _elem466;
            for (int _i467 = 0; _i467 < _list465.size; ++_i467)
            {
              _elem466 = iprot.readString();
              struct.success.add(_elem466);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ioEx = new IllegalOperationException();
          struct.ioEx.read(iprot);
          struct.setIoExIsSet(true);
        }
        if (incoming.get(3)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class compareLinearModelFeatureImportances_args implements org.apache.thrift.TBase<compareLinearModelFeatureImportances_args, compareLinearModelFeatureImportances_args._Fields>, java.io.Serializable, Cloneable, Comparable<compareLinearModelFeatureImportances_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compareLinearModelFeatureImportances_args");

    private static final org.apache.thrift.protocol.TField MODEL1_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("model1Id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MODEL2_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("model2Id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new compareLinearModelFeatureImportances_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compareLinearModelFeatureImportances_argsTupleSchemeFactory());
    }

    public int model1Id; // required
    public int model2Id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL1_ID((short)1, "model1Id"),
      MODEL2_ID((short)2, "model2Id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL1_ID
            return MODEL1_ID;
          case 2: // MODEL2_ID
            return MODEL2_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODEL1ID_ISSET_ID = 0;
    private static final int __MODEL2ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL1_ID, new org.apache.thrift.meta_data.FieldMetaData("model1Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODEL2_ID, new org.apache.thrift.meta_data.FieldMetaData("model2Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compareLinearModelFeatureImportances_args.class, metaDataMap);
    }

    public compareLinearModelFeatureImportances_args() {
    }

    public compareLinearModelFeatureImportances_args(
      int model1Id,
      int model2Id)
    {
      this();
      this.model1Id = model1Id;
      setModel1IdIsSet(true);
      this.model2Id = model2Id;
      setModel2IdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compareLinearModelFeatureImportances_args(compareLinearModelFeatureImportances_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.model1Id = other.model1Id;
      this.model2Id = other.model2Id;
    }

    public compareLinearModelFeatureImportances_args deepCopy() {
      return new compareLinearModelFeatureImportances_args(this);
    }

    @Override
    public void clear() {
      setModel1IdIsSet(false);
      this.model1Id = 0;
      setModel2IdIsSet(false);
      this.model2Id = 0;
    }

    public int getModel1Id() {
      return this.model1Id;
    }

    public compareLinearModelFeatureImportances_args setModel1Id(int model1Id) {
      this.model1Id = model1Id;
      setModel1IdIsSet(true);
      return this;
    }

    public void unsetModel1Id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODEL1ID_ISSET_ID);
    }

    /** Returns true if field model1Id is set (has been assigned a value) and false otherwise */
    public boolean isSetModel1Id() {
      return EncodingUtils.testBit(__isset_bitfield, __MODEL1ID_ISSET_ID);
    }

    public void setModel1IdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODEL1ID_ISSET_ID, value);
    }

    public int getModel2Id() {
      return this.model2Id;
    }

    public compareLinearModelFeatureImportances_args setModel2Id(int model2Id) {
      this.model2Id = model2Id;
      setModel2IdIsSet(true);
      return this;
    }

    public void unsetModel2Id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODEL2ID_ISSET_ID);
    }

    /** Returns true if field model2Id is set (has been assigned a value) and false otherwise */
    public boolean isSetModel2Id() {
      return EncodingUtils.testBit(__isset_bitfield, __MODEL2ID_ISSET_ID);
    }

    public void setModel2IdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODEL2ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL1_ID:
        if (value == null) {
          unsetModel1Id();
        } else {
          setModel1Id((Integer)value);
        }
        break;

      case MODEL2_ID:
        if (value == null) {
          unsetModel2Id();
        } else {
          setModel2Id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL1_ID:
        return getModel1Id();

      case MODEL2_ID:
        return getModel2Id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL1_ID:
        return isSetModel1Id();
      case MODEL2_ID:
        return isSetModel2Id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compareLinearModelFeatureImportances_args)
        return this.equals((compareLinearModelFeatureImportances_args)that);
      return false;
    }

    public boolean equals(compareLinearModelFeatureImportances_args that) {
      if (that == null)
        return false;

      boolean this_present_model1Id = true;
      boolean that_present_model1Id = true;
      if (this_present_model1Id || that_present_model1Id) {
        if (!(this_present_model1Id && that_present_model1Id))
          return false;
        if (this.model1Id != that.model1Id)
          return false;
      }

      boolean this_present_model2Id = true;
      boolean that_present_model2Id = true;
      if (this_present_model2Id || that_present_model2Id) {
        if (!(this_present_model2Id && that_present_model2Id))
          return false;
        if (this.model2Id != that.model2Id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_model1Id = true;
      list.add(present_model1Id);
      if (present_model1Id)
        list.add(model1Id);

      boolean present_model2Id = true;
      list.add(present_model2Id);
      if (present_model2Id)
        list.add(model2Id);

      return list.hashCode();
    }

    @Override
    public int compareTo(compareLinearModelFeatureImportances_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModel1Id()).compareTo(other.isSetModel1Id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel1Id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model1Id, other.model1Id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModel2Id()).compareTo(other.isSetModel2Id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel2Id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model2Id, other.model2Id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compareLinearModelFeatureImportances_args(");
      boolean first = true;

      sb.append("model1Id:");
      sb.append(this.model1Id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("model2Id:");
      sb.append(this.model2Id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compareLinearModelFeatureImportances_argsStandardSchemeFactory implements SchemeFactory {
      public compareLinearModelFeatureImportances_argsStandardScheme getScheme() {
        return new compareLinearModelFeatureImportances_argsStandardScheme();
      }
    }

    private static class compareLinearModelFeatureImportances_argsStandardScheme extends StandardScheme<compareLinearModelFeatureImportances_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compareLinearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL1_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.model1Id = iprot.readI32();
                struct.setModel1IdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODEL2_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.model2Id = iprot.readI32();
                struct.setModel2IdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compareLinearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL1_ID_FIELD_DESC);
        oprot.writeI32(struct.model1Id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODEL2_ID_FIELD_DESC);
        oprot.writeI32(struct.model2Id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compareLinearModelFeatureImportances_argsTupleSchemeFactory implements SchemeFactory {
      public compareLinearModelFeatureImportances_argsTupleScheme getScheme() {
        return new compareLinearModelFeatureImportances_argsTupleScheme();
      }
    }

    private static class compareLinearModelFeatureImportances_argsTupleScheme extends TupleScheme<compareLinearModelFeatureImportances_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compareLinearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModel1Id()) {
          optionals.set(0);
        }
        if (struct.isSetModel2Id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModel1Id()) {
          oprot.writeI32(struct.model1Id);
        }
        if (struct.isSetModel2Id()) {
          oprot.writeI32(struct.model2Id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compareLinearModelFeatureImportances_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.model1Id = iprot.readI32();
          struct.setModel1IdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.model2Id = iprot.readI32();
          struct.setModel2IdIsSet(true);
        }
      }
    }

  }

  public static class compareLinearModelFeatureImportances_result implements org.apache.thrift.TBase<compareLinearModelFeatureImportances_result, compareLinearModelFeatureImportances_result._Fields>, java.io.Serializable, Cloneable, Comparable<compareLinearModelFeatureImportances_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compareLinearModelFeatureImportances_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IO_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ioEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new compareLinearModelFeatureImportances_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new compareLinearModelFeatureImportances_resultTupleSchemeFactory());
    }

    public List<FeatureImportanceComparison> success; // required
    public ResourceNotFoundException rnfEx; // required
    public IllegalOperationException ioEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      IO_EX((short)2, "ioEx"),
      SV_EX((short)3, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // IO_EX
            return IO_EX;
          case 3: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeatureImportanceComparison.class))));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_EX, new org.apache.thrift.meta_data.FieldMetaData("ioEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compareLinearModelFeatureImportances_result.class, metaDataMap);
    }

    public compareLinearModelFeatureImportances_result() {
    }

    public compareLinearModelFeatureImportances_result(
      List<FeatureImportanceComparison> success,
      ResourceNotFoundException rnfEx,
      IllegalOperationException ioEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.ioEx = ioEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compareLinearModelFeatureImportances_result(compareLinearModelFeatureImportances_result other) {
      if (other.isSetSuccess()) {
        List<FeatureImportanceComparison> __this__success = new ArrayList<FeatureImportanceComparison>(other.success.size());
        for (FeatureImportanceComparison other_element : other.success) {
          __this__success.add(new FeatureImportanceComparison(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetIoEx()) {
        this.ioEx = new IllegalOperationException(other.ioEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public compareLinearModelFeatureImportances_result deepCopy() {
      return new compareLinearModelFeatureImportances_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.ioEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FeatureImportanceComparison> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FeatureImportanceComparison elem) {
      if (this.success == null) {
        this.success = new ArrayList<FeatureImportanceComparison>();
      }
      this.success.add(elem);
    }

    public List<FeatureImportanceComparison> getSuccess() {
      return this.success;
    }

    public compareLinearModelFeatureImportances_result setSuccess(List<FeatureImportanceComparison> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public compareLinearModelFeatureImportances_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public IllegalOperationException getIoEx() {
      return this.ioEx;
    }

    public compareLinearModelFeatureImportances_result setIoEx(IllegalOperationException ioEx) {
      this.ioEx = ioEx;
      return this;
    }

    public void unsetIoEx() {
      this.ioEx = null;
    }

    /** Returns true if field ioEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIoEx() {
      return this.ioEx != null;
    }

    public void setIoExIsSet(boolean value) {
      if (!value) {
        this.ioEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public compareLinearModelFeatureImportances_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FeatureImportanceComparison>)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case IO_EX:
        if (value == null) {
          unsetIoEx();
        } else {
          setIoEx((IllegalOperationException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case IO_EX:
        return getIoEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case IO_EX:
        return isSetIoEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof compareLinearModelFeatureImportances_result)
        return this.equals((compareLinearModelFeatureImportances_result)that);
      return false;
    }

    public boolean equals(compareLinearModelFeatureImportances_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_ioEx = true && this.isSetIoEx();
      boolean that_present_ioEx = true && that.isSetIoEx();
      if (this_present_ioEx || that_present_ioEx) {
        if (!(this_present_ioEx && that_present_ioEx))
          return false;
        if (!this.ioEx.equals(that.ioEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_ioEx = true && (isSetIoEx());
      list.add(present_ioEx);
      if (present_ioEx)
        list.add(ioEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(compareLinearModelFeatureImportances_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoEx()).compareTo(other.isSetIoEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioEx, other.ioEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("compareLinearModelFeatureImportances_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioEx:");
      if (this.ioEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ioEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compareLinearModelFeatureImportances_resultStandardSchemeFactory implements SchemeFactory {
      public compareLinearModelFeatureImportances_resultStandardScheme getScheme() {
        return new compareLinearModelFeatureImportances_resultStandardScheme();
      }
    }

    private static class compareLinearModelFeatureImportances_resultStandardScheme extends StandardScheme<compareLinearModelFeatureImportances_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compareLinearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list468 = iprot.readListBegin();
                  struct.success = new ArrayList<FeatureImportanceComparison>(_list468.size);
                  FeatureImportanceComparison _elem469;
                  for (int _i470 = 0; _i470 < _list468.size; ++_i470)
                  {
                    _elem469 = new FeatureImportanceComparison();
                    _elem469.read(iprot);
                    struct.success.add(_elem469);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioEx = new IllegalOperationException();
                struct.ioEx.read(iprot);
                struct.setIoExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compareLinearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FeatureImportanceComparison _iter471 : struct.success)
            {
              _iter471.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioEx != null) {
          oprot.writeFieldBegin(IO_EX_FIELD_DESC);
          struct.ioEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compareLinearModelFeatureImportances_resultTupleSchemeFactory implements SchemeFactory {
      public compareLinearModelFeatureImportances_resultTupleScheme getScheme() {
        return new compareLinearModelFeatureImportances_resultTupleScheme();
      }
    }

    private static class compareLinearModelFeatureImportances_resultTupleScheme extends TupleScheme<compareLinearModelFeatureImportances_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compareLinearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetIoEx()) {
          optionals.set(2);
        }
        if (struct.isSetSvEx()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FeatureImportanceComparison _iter472 : struct.success)
            {
              _iter472.write(oprot);
            }
          }
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetIoEx()) {
          struct.ioEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compareLinearModelFeatureImportances_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list473 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FeatureImportanceComparison>(_list473.size);
            FeatureImportanceComparison _elem474;
            for (int _i475 = 0; _i475 < _list473.size; ++_i475)
            {
              _elem474 = new FeatureImportanceComparison();
              _elem474.read(iprot);
              struct.success.add(_elem474);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ioEx = new IllegalOperationException();
          struct.ioEx.read(iprot);
          struct.setIoExIsSet(true);
        }
        if (incoming.get(3)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class iterationsUntilConvergence_args implements org.apache.thrift.TBase<iterationsUntilConvergence_args, iterationsUntilConvergence_args._Fields>, java.io.Serializable, Cloneable, Comparable<iterationsUntilConvergence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iterationsUntilConvergence_args");

    private static final org.apache.thrift.protocol.TField MODEL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("modelIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TOLERANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tolerance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iterationsUntilConvergence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iterationsUntilConvergence_argsTupleSchemeFactory());
    }

    public List<Integer> modelIds; // required
    public double tolerance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_IDS((short)1, "modelIds"),
      TOLERANCE((short)2, "tolerance");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_IDS
            return MODEL_IDS;
          case 2: // TOLERANCE
            return TOLERANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOLERANCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_IDS, new org.apache.thrift.meta_data.FieldMetaData("modelIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.TOLERANCE, new org.apache.thrift.meta_data.FieldMetaData("tolerance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iterationsUntilConvergence_args.class, metaDataMap);
    }

    public iterationsUntilConvergence_args() {
    }

    public iterationsUntilConvergence_args(
      List<Integer> modelIds,
      double tolerance)
    {
      this();
      this.modelIds = modelIds;
      this.tolerance = tolerance;
      setToleranceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iterationsUntilConvergence_args(iterationsUntilConvergence_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetModelIds()) {
        List<Integer> __this__modelIds = new ArrayList<Integer>(other.modelIds);
        this.modelIds = __this__modelIds;
      }
      this.tolerance = other.tolerance;
    }

    public iterationsUntilConvergence_args deepCopy() {
      return new iterationsUntilConvergence_args(this);
    }

    @Override
    public void clear() {
      this.modelIds = null;
      setToleranceIsSet(false);
      this.tolerance = 0.0;
    }

    public int getModelIdsSize() {
      return (this.modelIds == null) ? 0 : this.modelIds.size();
    }

    public java.util.Iterator<Integer> getModelIdsIterator() {
      return (this.modelIds == null) ? null : this.modelIds.iterator();
    }

    public void addToModelIds(int elem) {
      if (this.modelIds == null) {
        this.modelIds = new ArrayList<Integer>();
      }
      this.modelIds.add(elem);
    }

    public List<Integer> getModelIds() {
      return this.modelIds;
    }

    public iterationsUntilConvergence_args setModelIds(List<Integer> modelIds) {
      this.modelIds = modelIds;
      return this;
    }

    public void unsetModelIds() {
      this.modelIds = null;
    }

    /** Returns true if field modelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetModelIds() {
      return this.modelIds != null;
    }

    public void setModelIdsIsSet(boolean value) {
      if (!value) {
        this.modelIds = null;
      }
    }

    public double getTolerance() {
      return this.tolerance;
    }

    public iterationsUntilConvergence_args setTolerance(double tolerance) {
      this.tolerance = tolerance;
      setToleranceIsSet(true);
      return this;
    }

    public void unsetTolerance() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOLERANCE_ISSET_ID);
    }

    /** Returns true if field tolerance is set (has been assigned a value) and false otherwise */
    public boolean isSetTolerance() {
      return EncodingUtils.testBit(__isset_bitfield, __TOLERANCE_ISSET_ID);
    }

    public void setToleranceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOLERANCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_IDS:
        if (value == null) {
          unsetModelIds();
        } else {
          setModelIds((List<Integer>)value);
        }
        break;

      case TOLERANCE:
        if (value == null) {
          unsetTolerance();
        } else {
          setTolerance((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_IDS:
        return getModelIds();

      case TOLERANCE:
        return getTolerance();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_IDS:
        return isSetModelIds();
      case TOLERANCE:
        return isSetTolerance();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iterationsUntilConvergence_args)
        return this.equals((iterationsUntilConvergence_args)that);
      return false;
    }

    public boolean equals(iterationsUntilConvergence_args that) {
      if (that == null)
        return false;

      boolean this_present_modelIds = true && this.isSetModelIds();
      boolean that_present_modelIds = true && that.isSetModelIds();
      if (this_present_modelIds || that_present_modelIds) {
        if (!(this_present_modelIds && that_present_modelIds))
          return false;
        if (!this.modelIds.equals(that.modelIds))
          return false;
      }

      boolean this_present_tolerance = true;
      boolean that_present_tolerance = true;
      if (this_present_tolerance || that_present_tolerance) {
        if (!(this_present_tolerance && that_present_tolerance))
          return false;
        if (this.tolerance != that.tolerance)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelIds = true && (isSetModelIds());
      list.add(present_modelIds);
      if (present_modelIds)
        list.add(modelIds);

      boolean present_tolerance = true;
      list.add(present_tolerance);
      if (present_tolerance)
        list.add(tolerance);

      return list.hashCode();
    }

    @Override
    public int compareTo(iterationsUntilConvergence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelIds()).compareTo(other.isSetModelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelIds, other.modelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTolerance()).compareTo(other.isSetTolerance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTolerance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tolerance, other.tolerance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iterationsUntilConvergence_args(");
      boolean first = true;

      sb.append("modelIds:");
      if (this.modelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.modelIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tolerance:");
      sb.append(this.tolerance);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iterationsUntilConvergence_argsStandardSchemeFactory implements SchemeFactory {
      public iterationsUntilConvergence_argsStandardScheme getScheme() {
        return new iterationsUntilConvergence_argsStandardScheme();
      }
    }

    private static class iterationsUntilConvergence_argsStandardScheme extends StandardScheme<iterationsUntilConvergence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iterationsUntilConvergence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list476 = iprot.readListBegin();
                  struct.modelIds = new ArrayList<Integer>(_list476.size);
                  int _elem477;
                  for (int _i478 = 0; _i478 < _list476.size; ++_i478)
                  {
                    _elem477 = iprot.readI32();
                    struct.modelIds.add(_elem477);
                  }
                  iprot.readListEnd();
                }
                struct.setModelIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOLERANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.tolerance = iprot.readDouble();
                struct.setToleranceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iterationsUntilConvergence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelIds != null) {
          oprot.writeFieldBegin(MODEL_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.modelIds.size()));
            for (int _iter479 : struct.modelIds)
            {
              oprot.writeI32(_iter479);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOLERANCE_FIELD_DESC);
        oprot.writeDouble(struct.tolerance);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iterationsUntilConvergence_argsTupleSchemeFactory implements SchemeFactory {
      public iterationsUntilConvergence_argsTupleScheme getScheme() {
        return new iterationsUntilConvergence_argsTupleScheme();
      }
    }

    private static class iterationsUntilConvergence_argsTupleScheme extends TupleScheme<iterationsUntilConvergence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iterationsUntilConvergence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelIds()) {
          optionals.set(0);
        }
        if (struct.isSetTolerance()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelIds()) {
          {
            oprot.writeI32(struct.modelIds.size());
            for (int _iter480 : struct.modelIds)
            {
              oprot.writeI32(_iter480);
            }
          }
        }
        if (struct.isSetTolerance()) {
          oprot.writeDouble(struct.tolerance);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iterationsUntilConvergence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list481 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.modelIds = new ArrayList<Integer>(_list481.size);
            int _elem482;
            for (int _i483 = 0; _i483 < _list481.size; ++_i483)
            {
              _elem482 = iprot.readI32();
              struct.modelIds.add(_elem482);
            }
          }
          struct.setModelIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tolerance = iprot.readDouble();
          struct.setToleranceIsSet(true);
        }
      }
    }

  }

  public static class iterationsUntilConvergence_result implements org.apache.thrift.TBase<iterationsUntilConvergence_result, iterationsUntilConvergence_result._Fields>, java.io.Serializable, Cloneable, Comparable<iterationsUntilConvergence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("iterationsUntilConvergence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new iterationsUntilConvergence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new iterationsUntilConvergence_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(iterationsUntilConvergence_result.class, metaDataMap);
    }

    public iterationsUntilConvergence_result() {
    }

    public iterationsUntilConvergence_result(
      List<Integer> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public iterationsUntilConvergence_result(iterationsUntilConvergence_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public iterationsUntilConvergence_result deepCopy() {
      return new iterationsUntilConvergence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public iterationsUntilConvergence_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public iterationsUntilConvergence_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof iterationsUntilConvergence_result)
        return this.equals((iterationsUntilConvergence_result)that);
      return false;
    }

    public boolean equals(iterationsUntilConvergence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(iterationsUntilConvergence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("iterationsUntilConvergence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class iterationsUntilConvergence_resultStandardSchemeFactory implements SchemeFactory {
      public iterationsUntilConvergence_resultStandardScheme getScheme() {
        return new iterationsUntilConvergence_resultStandardScheme();
      }
    }

    private static class iterationsUntilConvergence_resultStandardScheme extends StandardScheme<iterationsUntilConvergence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, iterationsUntilConvergence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list484 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list484.size);
                  int _elem485;
                  for (int _i486 = 0; _i486 < _list484.size; ++_i486)
                  {
                    _elem485 = iprot.readI32();
                    struct.success.add(_elem485);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, iterationsUntilConvergence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter487 : struct.success)
            {
              oprot.writeI32(_iter487);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class iterationsUntilConvergence_resultTupleSchemeFactory implements SchemeFactory {
      public iterationsUntilConvergence_resultTupleScheme getScheme() {
        return new iterationsUntilConvergence_resultTupleScheme();
      }
    }

    private static class iterationsUntilConvergence_resultTupleScheme extends TupleScheme<iterationsUntilConvergence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, iterationsUntilConvergence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter488 : struct.success)
            {
              oprot.writeI32(_iter488);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, iterationsUntilConvergence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list489 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list489.size);
            int _elem490;
            for (int _i491 = 0; _i491 < _list489.size; ++_i491)
            {
              _elem490 = iprot.readI32();
              struct.success.add(_elem490);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class rankModels_args implements org.apache.thrift.TBase<rankModels_args, rankModels_args._Fields>, java.io.Serializable, Cloneable, Comparable<rankModels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rankModels_args");

    private static final org.apache.thrift.protocol.TField MODEL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("modelIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField METRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("metric", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rankModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rankModels_argsTupleSchemeFactory());
    }

    public List<Integer> modelIds; // required
    /**
     * 
     * @see ModelRankMetric
     */
    public ModelRankMetric metric; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_IDS((short)1, "modelIds"),
      /**
       * 
       * @see ModelRankMetric
       */
      METRIC((short)2, "metric");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_IDS
            return MODEL_IDS;
          case 2: // METRIC
            return METRIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_IDS, new org.apache.thrift.meta_data.FieldMetaData("modelIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.METRIC, new org.apache.thrift.meta_data.FieldMetaData("metric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ModelRankMetric.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rankModels_args.class, metaDataMap);
    }

    public rankModels_args() {
    }

    public rankModels_args(
      List<Integer> modelIds,
      ModelRankMetric metric)
    {
      this();
      this.modelIds = modelIds;
      this.metric = metric;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rankModels_args(rankModels_args other) {
      if (other.isSetModelIds()) {
        List<Integer> __this__modelIds = new ArrayList<Integer>(other.modelIds);
        this.modelIds = __this__modelIds;
      }
      if (other.isSetMetric()) {
        this.metric = other.metric;
      }
    }

    public rankModels_args deepCopy() {
      return new rankModels_args(this);
    }

    @Override
    public void clear() {
      this.modelIds = null;
      this.metric = null;
    }

    public int getModelIdsSize() {
      return (this.modelIds == null) ? 0 : this.modelIds.size();
    }

    public java.util.Iterator<Integer> getModelIdsIterator() {
      return (this.modelIds == null) ? null : this.modelIds.iterator();
    }

    public void addToModelIds(int elem) {
      if (this.modelIds == null) {
        this.modelIds = new ArrayList<Integer>();
      }
      this.modelIds.add(elem);
    }

    public List<Integer> getModelIds() {
      return this.modelIds;
    }

    public rankModels_args setModelIds(List<Integer> modelIds) {
      this.modelIds = modelIds;
      return this;
    }

    public void unsetModelIds() {
      this.modelIds = null;
    }

    /** Returns true if field modelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetModelIds() {
      return this.modelIds != null;
    }

    public void setModelIdsIsSet(boolean value) {
      if (!value) {
        this.modelIds = null;
      }
    }

    /**
     * 
     * @see ModelRankMetric
     */
    public ModelRankMetric getMetric() {
      return this.metric;
    }

    /**
     * 
     * @see ModelRankMetric
     */
    public rankModels_args setMetric(ModelRankMetric metric) {
      this.metric = metric;
      return this;
    }

    public void unsetMetric() {
      this.metric = null;
    }

    /** Returns true if field metric is set (has been assigned a value) and false otherwise */
    public boolean isSetMetric() {
      return this.metric != null;
    }

    public void setMetricIsSet(boolean value) {
      if (!value) {
        this.metric = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_IDS:
        if (value == null) {
          unsetModelIds();
        } else {
          setModelIds((List<Integer>)value);
        }
        break;

      case METRIC:
        if (value == null) {
          unsetMetric();
        } else {
          setMetric((ModelRankMetric)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_IDS:
        return getModelIds();

      case METRIC:
        return getMetric();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_IDS:
        return isSetModelIds();
      case METRIC:
        return isSetMetric();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rankModels_args)
        return this.equals((rankModels_args)that);
      return false;
    }

    public boolean equals(rankModels_args that) {
      if (that == null)
        return false;

      boolean this_present_modelIds = true && this.isSetModelIds();
      boolean that_present_modelIds = true && that.isSetModelIds();
      if (this_present_modelIds || that_present_modelIds) {
        if (!(this_present_modelIds && that_present_modelIds))
          return false;
        if (!this.modelIds.equals(that.modelIds))
          return false;
      }

      boolean this_present_metric = true && this.isSetMetric();
      boolean that_present_metric = true && that.isSetMetric();
      if (this_present_metric || that_present_metric) {
        if (!(this_present_metric && that_present_metric))
          return false;
        if (!this.metric.equals(that.metric))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelIds = true && (isSetModelIds());
      list.add(present_modelIds);
      if (present_modelIds)
        list.add(modelIds);

      boolean present_metric = true && (isSetMetric());
      list.add(present_metric);
      if (present_metric)
        list.add(metric.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(rankModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelIds()).compareTo(other.isSetModelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelIds, other.modelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMetric()).compareTo(other.isSetMetric());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMetric()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric, other.metric);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rankModels_args(");
      boolean first = true;

      sb.append("modelIds:");
      if (this.modelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.modelIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("metric:");
      if (this.metric == null) {
        sb.append("null");
      } else {
        sb.append(this.metric);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rankModels_argsStandardSchemeFactory implements SchemeFactory {
      public rankModels_argsStandardScheme getScheme() {
        return new rankModels_argsStandardScheme();
      }
    }

    private static class rankModels_argsStandardScheme extends StandardScheme<rankModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rankModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list492 = iprot.readListBegin();
                  struct.modelIds = new ArrayList<Integer>(_list492.size);
                  int _elem493;
                  for (int _i494 = 0; _i494 < _list492.size; ++_i494)
                  {
                    _elem493 = iprot.readI32();
                    struct.modelIds.add(_elem493);
                  }
                  iprot.readListEnd();
                }
                struct.setModelIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // METRIC
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.metric = modeldb.ModelRankMetric.findByValue(iprot.readI32());
                struct.setMetricIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rankModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelIds != null) {
          oprot.writeFieldBegin(MODEL_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.modelIds.size()));
            for (int _iter495 : struct.modelIds)
            {
              oprot.writeI32(_iter495);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.metric != null) {
          oprot.writeFieldBegin(METRIC_FIELD_DESC);
          oprot.writeI32(struct.metric.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rankModels_argsTupleSchemeFactory implements SchemeFactory {
      public rankModels_argsTupleScheme getScheme() {
        return new rankModels_argsTupleScheme();
      }
    }

    private static class rankModels_argsTupleScheme extends TupleScheme<rankModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rankModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelIds()) {
          optionals.set(0);
        }
        if (struct.isSetMetric()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelIds()) {
          {
            oprot.writeI32(struct.modelIds.size());
            for (int _iter496 : struct.modelIds)
            {
              oprot.writeI32(_iter496);
            }
          }
        }
        if (struct.isSetMetric()) {
          oprot.writeI32(struct.metric.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rankModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list497 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.modelIds = new ArrayList<Integer>(_list497.size);
            int _elem498;
            for (int _i499 = 0; _i499 < _list497.size; ++_i499)
            {
              _elem498 = iprot.readI32();
              struct.modelIds.add(_elem498);
            }
          }
          struct.setModelIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.metric = modeldb.ModelRankMetric.findByValue(iprot.readI32());
          struct.setMetricIsSet(true);
        }
      }
    }

  }

  public static class rankModels_result implements org.apache.thrift.TBase<rankModels_result, rankModels_result._Fields>, java.io.Serializable, Cloneable, Comparable<rankModels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rankModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rankModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rankModels_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rankModels_result.class, metaDataMap);
    }

    public rankModels_result() {
    }

    public rankModels_result(
      List<Integer> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rankModels_result(rankModels_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public rankModels_result deepCopy() {
      return new rankModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public rankModels_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public rankModels_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rankModels_result)
        return this.equals((rankModels_result)that);
      return false;
    }

    public boolean equals(rankModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(rankModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rankModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rankModels_resultStandardSchemeFactory implements SchemeFactory {
      public rankModels_resultStandardScheme getScheme() {
        return new rankModels_resultStandardScheme();
      }
    }

    private static class rankModels_resultStandardScheme extends StandardScheme<rankModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rankModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list500.size);
                  int _elem501;
                  for (int _i502 = 0; _i502 < _list500.size; ++_i502)
                  {
                    _elem501 = iprot.readI32();
                    struct.success.add(_elem501);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rankModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter503 : struct.success)
            {
              oprot.writeI32(_iter503);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rankModels_resultTupleSchemeFactory implements SchemeFactory {
      public rankModels_resultTupleScheme getScheme() {
        return new rankModels_resultTupleScheme();
      }
    }

    private static class rankModels_resultTupleScheme extends TupleScheme<rankModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rankModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter504 : struct.success)
            {
              oprot.writeI32(_iter504);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rankModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list505 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list505.size);
            int _elem506;
            for (int _i507 = 0; _i507 < _list505.size; ++_i507)
            {
              _elem506 = iprot.readI32();
              struct.success.add(_elem506);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class confidenceIntervals_args implements org.apache.thrift.TBase<confidenceIntervals_args, confidenceIntervals_args._Fields>, java.io.Serializable, Cloneable, Comparable<confidenceIntervals_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confidenceIntervals_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SIG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("sigLevel", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confidenceIntervals_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confidenceIntervals_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public double sigLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      SIG_LEVEL((short)2, "sigLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // SIG_LEVEL
            return SIG_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private static final int __SIGLEVEL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("sigLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confidenceIntervals_args.class, metaDataMap);
    }

    public confidenceIntervals_args() {
    }

    public confidenceIntervals_args(
      int modelId,
      double sigLevel)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.sigLevel = sigLevel;
      setSigLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confidenceIntervals_args(confidenceIntervals_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      this.sigLevel = other.sigLevel;
    }

    public confidenceIntervals_args deepCopy() {
      return new confidenceIntervals_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      setSigLevelIsSet(false);
      this.sigLevel = 0.0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public confidenceIntervals_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public double getSigLevel() {
      return this.sigLevel;
    }

    public confidenceIntervals_args setSigLevel(double sigLevel) {
      this.sigLevel = sigLevel;
      setSigLevelIsSet(true);
      return this;
    }

    public void unsetSigLevel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGLEVEL_ISSET_ID);
    }

    /** Returns true if field sigLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetSigLevel() {
      return EncodingUtils.testBit(__isset_bitfield, __SIGLEVEL_ISSET_ID);
    }

    public void setSigLevelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGLEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case SIG_LEVEL:
        if (value == null) {
          unsetSigLevel();
        } else {
          setSigLevel((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case SIG_LEVEL:
        return getSigLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case SIG_LEVEL:
        return isSetSigLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confidenceIntervals_args)
        return this.equals((confidenceIntervals_args)that);
      return false;
    }

    public boolean equals(confidenceIntervals_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_sigLevel = true;
      boolean that_present_sigLevel = true;
      if (this_present_sigLevel || that_present_sigLevel) {
        if (!(this_present_sigLevel && that_present_sigLevel))
          return false;
        if (this.sigLevel != that.sigLevel)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_sigLevel = true;
      list.add(present_sigLevel);
      if (present_sigLevel)
        list.add(sigLevel);

      return list.hashCode();
    }

    @Override
    public int compareTo(confidenceIntervals_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSigLevel()).compareTo(other.isSetSigLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSigLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sigLevel, other.sigLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confidenceIntervals_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sigLevel:");
      sb.append(this.sigLevel);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confidenceIntervals_argsStandardSchemeFactory implements SchemeFactory {
      public confidenceIntervals_argsStandardScheme getScheme() {
        return new confidenceIntervals_argsStandardScheme();
      }
    }

    private static class confidenceIntervals_argsStandardScheme extends StandardScheme<confidenceIntervals_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confidenceIntervals_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SIG_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.sigLevel = iprot.readDouble();
                struct.setSigLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confidenceIntervals_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIG_LEVEL_FIELD_DESC);
        oprot.writeDouble(struct.sigLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confidenceIntervals_argsTupleSchemeFactory implements SchemeFactory {
      public confidenceIntervals_argsTupleScheme getScheme() {
        return new confidenceIntervals_argsTupleScheme();
      }
    }

    private static class confidenceIntervals_argsTupleScheme extends TupleScheme<confidenceIntervals_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confidenceIntervals_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetSigLevel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetSigLevel()) {
          oprot.writeDouble(struct.sigLevel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confidenceIntervals_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sigLevel = iprot.readDouble();
          struct.setSigLevelIsSet(true);
        }
      }
    }

  }

  public static class confidenceIntervals_result implements org.apache.thrift.TBase<confidenceIntervals_result, confidenceIntervals_result._Fields>, java.io.Serializable, Cloneable, Comparable<confidenceIntervals_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confidenceIntervals_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IO_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ioEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField BR_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("brEx", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confidenceIntervals_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confidenceIntervals_resultTupleSchemeFactory());
    }

    public List<ConfidenceInterval> success; // required
    public ResourceNotFoundException rnfEx; // required
    public IllegalOperationException ioEx; // required
    public BadRequestException brEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      IO_EX((short)2, "ioEx"),
      BR_EX((short)3, "brEx"),
      SV_EX((short)4, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // IO_EX
            return IO_EX;
          case 3: // BR_EX
            return BR_EX;
          case 4: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfidenceInterval.class))));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_EX, new org.apache.thrift.meta_data.FieldMetaData("ioEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.BR_EX, new org.apache.thrift.meta_data.FieldMetaData("brEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confidenceIntervals_result.class, metaDataMap);
    }

    public confidenceIntervals_result() {
    }

    public confidenceIntervals_result(
      List<ConfidenceInterval> success,
      ResourceNotFoundException rnfEx,
      IllegalOperationException ioEx,
      BadRequestException brEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.ioEx = ioEx;
      this.brEx = brEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confidenceIntervals_result(confidenceIntervals_result other) {
      if (other.isSetSuccess()) {
        List<ConfidenceInterval> __this__success = new ArrayList<ConfidenceInterval>(other.success.size());
        for (ConfidenceInterval other_element : other.success) {
          __this__success.add(new ConfidenceInterval(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetIoEx()) {
        this.ioEx = new IllegalOperationException(other.ioEx);
      }
      if (other.isSetBrEx()) {
        this.brEx = new BadRequestException(other.brEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public confidenceIntervals_result deepCopy() {
      return new confidenceIntervals_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.ioEx = null;
      this.brEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ConfidenceInterval> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ConfidenceInterval elem) {
      if (this.success == null) {
        this.success = new ArrayList<ConfidenceInterval>();
      }
      this.success.add(elem);
    }

    public List<ConfidenceInterval> getSuccess() {
      return this.success;
    }

    public confidenceIntervals_result setSuccess(List<ConfidenceInterval> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public confidenceIntervals_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public IllegalOperationException getIoEx() {
      return this.ioEx;
    }

    public confidenceIntervals_result setIoEx(IllegalOperationException ioEx) {
      this.ioEx = ioEx;
      return this;
    }

    public void unsetIoEx() {
      this.ioEx = null;
    }

    /** Returns true if field ioEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIoEx() {
      return this.ioEx != null;
    }

    public void setIoExIsSet(boolean value) {
      if (!value) {
        this.ioEx = null;
      }
    }

    public BadRequestException getBrEx() {
      return this.brEx;
    }

    public confidenceIntervals_result setBrEx(BadRequestException brEx) {
      this.brEx = brEx;
      return this;
    }

    public void unsetBrEx() {
      this.brEx = null;
    }

    /** Returns true if field brEx is set (has been assigned a value) and false otherwise */
    public boolean isSetBrEx() {
      return this.brEx != null;
    }

    public void setBrExIsSet(boolean value) {
      if (!value) {
        this.brEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public confidenceIntervals_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ConfidenceInterval>)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case IO_EX:
        if (value == null) {
          unsetIoEx();
        } else {
          setIoEx((IllegalOperationException)value);
        }
        break;

      case BR_EX:
        if (value == null) {
          unsetBrEx();
        } else {
          setBrEx((BadRequestException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case IO_EX:
        return getIoEx();

      case BR_EX:
        return getBrEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case IO_EX:
        return isSetIoEx();
      case BR_EX:
        return isSetBrEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confidenceIntervals_result)
        return this.equals((confidenceIntervals_result)that);
      return false;
    }

    public boolean equals(confidenceIntervals_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_ioEx = true && this.isSetIoEx();
      boolean that_present_ioEx = true && that.isSetIoEx();
      if (this_present_ioEx || that_present_ioEx) {
        if (!(this_present_ioEx && that_present_ioEx))
          return false;
        if (!this.ioEx.equals(that.ioEx))
          return false;
      }

      boolean this_present_brEx = true && this.isSetBrEx();
      boolean that_present_brEx = true && that.isSetBrEx();
      if (this_present_brEx || that_present_brEx) {
        if (!(this_present_brEx && that_present_brEx))
          return false;
        if (!this.brEx.equals(that.brEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_ioEx = true && (isSetIoEx());
      list.add(present_ioEx);
      if (present_ioEx)
        list.add(ioEx);

      boolean present_brEx = true && (isSetBrEx());
      list.add(present_brEx);
      if (present_brEx)
        list.add(brEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(confidenceIntervals_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoEx()).compareTo(other.isSetIoEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioEx, other.ioEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBrEx()).compareTo(other.isSetBrEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBrEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brEx, other.brEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confidenceIntervals_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioEx:");
      if (this.ioEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ioEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("brEx:");
      if (this.brEx == null) {
        sb.append("null");
      } else {
        sb.append(this.brEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confidenceIntervals_resultStandardSchemeFactory implements SchemeFactory {
      public confidenceIntervals_resultStandardScheme getScheme() {
        return new confidenceIntervals_resultStandardScheme();
      }
    }

    private static class confidenceIntervals_resultStandardScheme extends StandardScheme<confidenceIntervals_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confidenceIntervals_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list508 = iprot.readListBegin();
                  struct.success = new ArrayList<ConfidenceInterval>(_list508.size);
                  ConfidenceInterval _elem509;
                  for (int _i510 = 0; _i510 < _list508.size; ++_i510)
                  {
                    _elem509 = new ConfidenceInterval();
                    _elem509.read(iprot);
                    struct.success.add(_elem509);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ioEx = new IllegalOperationException();
                struct.ioEx.read(iprot);
                struct.setIoExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BR_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.brEx = new BadRequestException();
                struct.brEx.read(iprot);
                struct.setBrExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confidenceIntervals_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ConfidenceInterval _iter511 : struct.success)
            {
              _iter511.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ioEx != null) {
          oprot.writeFieldBegin(IO_EX_FIELD_DESC);
          struct.ioEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.brEx != null) {
          oprot.writeFieldBegin(BR_EX_FIELD_DESC);
          struct.brEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confidenceIntervals_resultTupleSchemeFactory implements SchemeFactory {
      public confidenceIntervals_resultTupleScheme getScheme() {
        return new confidenceIntervals_resultTupleScheme();
      }
    }

    private static class confidenceIntervals_resultTupleScheme extends TupleScheme<confidenceIntervals_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confidenceIntervals_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetIoEx()) {
          optionals.set(2);
        }
        if (struct.isSetBrEx()) {
          optionals.set(3);
        }
        if (struct.isSetSvEx()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ConfidenceInterval _iter512 : struct.success)
            {
              _iter512.write(oprot);
            }
          }
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetIoEx()) {
          struct.ioEx.write(oprot);
        }
        if (struct.isSetBrEx()) {
          struct.brEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confidenceIntervals_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ConfidenceInterval>(_list513.size);
            ConfidenceInterval _elem514;
            for (int _i515 = 0; _i515 < _list513.size; ++_i515)
            {
              _elem514 = new ConfidenceInterval();
              _elem514.read(iprot);
              struct.success.add(_elem514);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ioEx = new IllegalOperationException();
          struct.ioEx.read(iprot);
          struct.setIoExIsSet(true);
        }
        if (incoming.get(3)) {
          struct.brEx = new BadRequestException();
          struct.brEx.read(iprot);
          struct.setBrExIsSet(true);
        }
        if (incoming.get(4)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class modelsWithFeatures_args implements org.apache.thrift.TBase<modelsWithFeatures_args, modelsWithFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<modelsWithFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modelsWithFeatures_args");

    private static final org.apache.thrift.protocol.TField FEATURE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("featureNames", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modelsWithFeatures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modelsWithFeatures_argsTupleSchemeFactory());
    }

    public List<String> featureNames; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEATURE_NAMES((short)1, "featureNames");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEATURE_NAMES
            return FEATURE_NAMES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEATURE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("featureNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modelsWithFeatures_args.class, metaDataMap);
    }

    public modelsWithFeatures_args() {
    }

    public modelsWithFeatures_args(
      List<String> featureNames)
    {
      this();
      this.featureNames = featureNames;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modelsWithFeatures_args(modelsWithFeatures_args other) {
      if (other.isSetFeatureNames()) {
        List<String> __this__featureNames = new ArrayList<String>(other.featureNames);
        this.featureNames = __this__featureNames;
      }
    }

    public modelsWithFeatures_args deepCopy() {
      return new modelsWithFeatures_args(this);
    }

    @Override
    public void clear() {
      this.featureNames = null;
    }

    public int getFeatureNamesSize() {
      return (this.featureNames == null) ? 0 : this.featureNames.size();
    }

    public java.util.Iterator<String> getFeatureNamesIterator() {
      return (this.featureNames == null) ? null : this.featureNames.iterator();
    }

    public void addToFeatureNames(String elem) {
      if (this.featureNames == null) {
        this.featureNames = new ArrayList<String>();
      }
      this.featureNames.add(elem);
    }

    public List<String> getFeatureNames() {
      return this.featureNames;
    }

    public modelsWithFeatures_args setFeatureNames(List<String> featureNames) {
      this.featureNames = featureNames;
      return this;
    }

    public void unsetFeatureNames() {
      this.featureNames = null;
    }

    /** Returns true if field featureNames is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureNames() {
      return this.featureNames != null;
    }

    public void setFeatureNamesIsSet(boolean value) {
      if (!value) {
        this.featureNames = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FEATURE_NAMES:
        if (value == null) {
          unsetFeatureNames();
        } else {
          setFeatureNames((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FEATURE_NAMES:
        return getFeatureNames();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FEATURE_NAMES:
        return isSetFeatureNames();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modelsWithFeatures_args)
        return this.equals((modelsWithFeatures_args)that);
      return false;
    }

    public boolean equals(modelsWithFeatures_args that) {
      if (that == null)
        return false;

      boolean this_present_featureNames = true && this.isSetFeatureNames();
      boolean that_present_featureNames = true && that.isSetFeatureNames();
      if (this_present_featureNames || that_present_featureNames) {
        if (!(this_present_featureNames && that_present_featureNames))
          return false;
        if (!this.featureNames.equals(that.featureNames))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_featureNames = true && (isSetFeatureNames());
      list.add(present_featureNames);
      if (present_featureNames)
        list.add(featureNames);

      return list.hashCode();
    }

    @Override
    public int compareTo(modelsWithFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFeatureNames()).compareTo(other.isSetFeatureNames());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureNames()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureNames, other.featureNames);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modelsWithFeatures_args(");
      boolean first = true;

      sb.append("featureNames:");
      if (this.featureNames == null) {
        sb.append("null");
      } else {
        sb.append(this.featureNames);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modelsWithFeatures_argsStandardSchemeFactory implements SchemeFactory {
      public modelsWithFeatures_argsStandardScheme getScheme() {
        return new modelsWithFeatures_argsStandardScheme();
      }
    }

    private static class modelsWithFeatures_argsStandardScheme extends StandardScheme<modelsWithFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modelsWithFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEATURE_NAMES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
                  struct.featureNames = new ArrayList<String>(_list516.size);
                  String _elem517;
                  for (int _i518 = 0; _i518 < _list516.size; ++_i518)
                  {
                    _elem517 = iprot.readString();
                    struct.featureNames.add(_elem517);
                  }
                  iprot.readListEnd();
                }
                struct.setFeatureNamesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modelsWithFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.featureNames != null) {
          oprot.writeFieldBegin(FEATURE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.featureNames.size()));
            for (String _iter519 : struct.featureNames)
            {
              oprot.writeString(_iter519);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modelsWithFeatures_argsTupleSchemeFactory implements SchemeFactory {
      public modelsWithFeatures_argsTupleScheme getScheme() {
        return new modelsWithFeatures_argsTupleScheme();
      }
    }

    private static class modelsWithFeatures_argsTupleScheme extends TupleScheme<modelsWithFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modelsWithFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFeatureNames()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFeatureNames()) {
          {
            oprot.writeI32(struct.featureNames.size());
            for (String _iter520 : struct.featureNames)
            {
              oprot.writeString(_iter520);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modelsWithFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list521 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.featureNames = new ArrayList<String>(_list521.size);
            String _elem522;
            for (int _i523 = 0; _i523 < _list521.size; ++_i523)
            {
              _elem522 = iprot.readString();
              struct.featureNames.add(_elem522);
            }
          }
          struct.setFeatureNamesIsSet(true);
        }
      }
    }

  }

  public static class modelsWithFeatures_result implements org.apache.thrift.TBase<modelsWithFeatures_result, modelsWithFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<modelsWithFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modelsWithFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modelsWithFeatures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modelsWithFeatures_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modelsWithFeatures_result.class, metaDataMap);
    }

    public modelsWithFeatures_result() {
    }

    public modelsWithFeatures_result(
      List<Integer> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modelsWithFeatures_result(modelsWithFeatures_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public modelsWithFeatures_result deepCopy() {
      return new modelsWithFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public modelsWithFeatures_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public modelsWithFeatures_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modelsWithFeatures_result)
        return this.equals((modelsWithFeatures_result)that);
      return false;
    }

    public boolean equals(modelsWithFeatures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(modelsWithFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modelsWithFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modelsWithFeatures_resultStandardSchemeFactory implements SchemeFactory {
      public modelsWithFeatures_resultStandardScheme getScheme() {
        return new modelsWithFeatures_resultStandardScheme();
      }
    }

    private static class modelsWithFeatures_resultStandardScheme extends StandardScheme<modelsWithFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modelsWithFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list524 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list524.size);
                  int _elem525;
                  for (int _i526 = 0; _i526 < _list524.size; ++_i526)
                  {
                    _elem525 = iprot.readI32();
                    struct.success.add(_elem525);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modelsWithFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter527 : struct.success)
            {
              oprot.writeI32(_iter527);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modelsWithFeatures_resultTupleSchemeFactory implements SchemeFactory {
      public modelsWithFeatures_resultTupleScheme getScheme() {
        return new modelsWithFeatures_resultTupleScheme();
      }
    }

    private static class modelsWithFeatures_resultTupleScheme extends TupleScheme<modelsWithFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modelsWithFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter528 : struct.success)
            {
              oprot.writeI32(_iter528);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modelsWithFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list529 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list529.size);
            int _elem530;
            for (int _i531 = 0; _i531 < _list529.size; ++_i531)
            {
              _elem530 = iprot.readI32();
              struct.success.add(_elem530);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class modelsDerivedFromDataFrame_args implements org.apache.thrift.TBase<modelsDerivedFromDataFrame_args, modelsDerivedFromDataFrame_args._Fields>, java.io.Serializable, Cloneable, Comparable<modelsDerivedFromDataFrame_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modelsDerivedFromDataFrame_args");

    private static final org.apache.thrift.protocol.TField DF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dfId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modelsDerivedFromDataFrame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modelsDerivedFromDataFrame_argsTupleSchemeFactory());
    }

    public int dfId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DF_ID((short)1, "dfId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DF_ID
            return DF_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DFID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DF_ID, new org.apache.thrift.meta_data.FieldMetaData("dfId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modelsDerivedFromDataFrame_args.class, metaDataMap);
    }

    public modelsDerivedFromDataFrame_args() {
    }

    public modelsDerivedFromDataFrame_args(
      int dfId)
    {
      this();
      this.dfId = dfId;
      setDfIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modelsDerivedFromDataFrame_args(modelsDerivedFromDataFrame_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dfId = other.dfId;
    }

    public modelsDerivedFromDataFrame_args deepCopy() {
      return new modelsDerivedFromDataFrame_args(this);
    }

    @Override
    public void clear() {
      setDfIdIsSet(false);
      this.dfId = 0;
    }

    public int getDfId() {
      return this.dfId;
    }

    public modelsDerivedFromDataFrame_args setDfId(int dfId) {
      this.dfId = dfId;
      setDfIdIsSet(true);
      return this;
    }

    public void unsetDfId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DFID_ISSET_ID);
    }

    /** Returns true if field dfId is set (has been assigned a value) and false otherwise */
    public boolean isSetDfId() {
      return EncodingUtils.testBit(__isset_bitfield, __DFID_ISSET_ID);
    }

    public void setDfIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DFID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DF_ID:
        if (value == null) {
          unsetDfId();
        } else {
          setDfId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DF_ID:
        return getDfId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DF_ID:
        return isSetDfId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modelsDerivedFromDataFrame_args)
        return this.equals((modelsDerivedFromDataFrame_args)that);
      return false;
    }

    public boolean equals(modelsDerivedFromDataFrame_args that) {
      if (that == null)
        return false;

      boolean this_present_dfId = true;
      boolean that_present_dfId = true;
      if (this_present_dfId || that_present_dfId) {
        if (!(this_present_dfId && that_present_dfId))
          return false;
        if (this.dfId != that.dfId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dfId = true;
      list.add(present_dfId);
      if (present_dfId)
        list.add(dfId);

      return list.hashCode();
    }

    @Override
    public int compareTo(modelsDerivedFromDataFrame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDfId()).compareTo(other.isSetDfId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDfId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dfId, other.dfId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modelsDerivedFromDataFrame_args(");
      boolean first = true;

      sb.append("dfId:");
      sb.append(this.dfId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modelsDerivedFromDataFrame_argsStandardSchemeFactory implements SchemeFactory {
      public modelsDerivedFromDataFrame_argsStandardScheme getScheme() {
        return new modelsDerivedFromDataFrame_argsStandardScheme();
      }
    }

    private static class modelsDerivedFromDataFrame_argsStandardScheme extends StandardScheme<modelsDerivedFromDataFrame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modelsDerivedFromDataFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dfId = iprot.readI32();
                struct.setDfIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modelsDerivedFromDataFrame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DF_ID_FIELD_DESC);
        oprot.writeI32(struct.dfId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modelsDerivedFromDataFrame_argsTupleSchemeFactory implements SchemeFactory {
      public modelsDerivedFromDataFrame_argsTupleScheme getScheme() {
        return new modelsDerivedFromDataFrame_argsTupleScheme();
      }
    }

    private static class modelsDerivedFromDataFrame_argsTupleScheme extends TupleScheme<modelsDerivedFromDataFrame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modelsDerivedFromDataFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDfId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDfId()) {
          oprot.writeI32(struct.dfId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modelsDerivedFromDataFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dfId = iprot.readI32();
          struct.setDfIdIsSet(true);
        }
      }
    }

  }

  public static class modelsDerivedFromDataFrame_result implements org.apache.thrift.TBase<modelsDerivedFromDataFrame_result, modelsDerivedFromDataFrame_result._Fields>, java.io.Serializable, Cloneable, Comparable<modelsDerivedFromDataFrame_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modelsDerivedFromDataFrame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modelsDerivedFromDataFrame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modelsDerivedFromDataFrame_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modelsDerivedFromDataFrame_result.class, metaDataMap);
    }

    public modelsDerivedFromDataFrame_result() {
    }

    public modelsDerivedFromDataFrame_result(
      List<Integer> success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modelsDerivedFromDataFrame_result(modelsDerivedFromDataFrame_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public modelsDerivedFromDataFrame_result deepCopy() {
      return new modelsDerivedFromDataFrame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public modelsDerivedFromDataFrame_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public modelsDerivedFromDataFrame_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public modelsDerivedFromDataFrame_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modelsDerivedFromDataFrame_result)
        return this.equals((modelsDerivedFromDataFrame_result)that);
      return false;
    }

    public boolean equals(modelsDerivedFromDataFrame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(modelsDerivedFromDataFrame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modelsDerivedFromDataFrame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modelsDerivedFromDataFrame_resultStandardSchemeFactory implements SchemeFactory {
      public modelsDerivedFromDataFrame_resultStandardScheme getScheme() {
        return new modelsDerivedFromDataFrame_resultStandardScheme();
      }
    }

    private static class modelsDerivedFromDataFrame_resultStandardScheme extends StandardScheme<modelsDerivedFromDataFrame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modelsDerivedFromDataFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list532 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list532.size);
                  int _elem533;
                  for (int _i534 = 0; _i534 < _list532.size; ++_i534)
                  {
                    _elem533 = iprot.readI32();
                    struct.success.add(_elem533);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modelsDerivedFromDataFrame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter535 : struct.success)
            {
              oprot.writeI32(_iter535);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modelsDerivedFromDataFrame_resultTupleSchemeFactory implements SchemeFactory {
      public modelsDerivedFromDataFrame_resultTupleScheme getScheme() {
        return new modelsDerivedFromDataFrame_resultTupleScheme();
      }
    }

    private static class modelsDerivedFromDataFrame_resultTupleScheme extends TupleScheme<modelsDerivedFromDataFrame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modelsDerivedFromDataFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter536 : struct.success)
            {
              oprot.writeI32(_iter536);
            }
          }
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modelsDerivedFromDataFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list537 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list537.size);
            int _elem538;
            for (int _i539 = 0; _i539 < _list537.size; ++_i539)
            {
              _elem538 = iprot.readI32();
              struct.success.add(_elem538);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getProjectIds_args implements org.apache.thrift.TBase<getProjectIds_args, getProjectIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectIds_args");

    private static final org.apache.thrift.protocol.TField KEY_VALUE_PAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyValuePairs", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectIds_argsTupleSchemeFactory());
    }

    public Map<String,String> keyValuePairs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY_VALUE_PAIRS((short)1, "keyValuePairs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY_VALUE_PAIRS
            return KEY_VALUE_PAIRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY_VALUE_PAIRS, new org.apache.thrift.meta_data.FieldMetaData("keyValuePairs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectIds_args.class, metaDataMap);
    }

    public getProjectIds_args() {
    }

    public getProjectIds_args(
      Map<String,String> keyValuePairs)
    {
      this();
      this.keyValuePairs = keyValuePairs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectIds_args(getProjectIds_args other) {
      if (other.isSetKeyValuePairs()) {
        Map<String,String> __this__keyValuePairs = new HashMap<String,String>(other.keyValuePairs);
        this.keyValuePairs = __this__keyValuePairs;
      }
    }

    public getProjectIds_args deepCopy() {
      return new getProjectIds_args(this);
    }

    @Override
    public void clear() {
      this.keyValuePairs = null;
    }

    public int getKeyValuePairsSize() {
      return (this.keyValuePairs == null) ? 0 : this.keyValuePairs.size();
    }

    public void putToKeyValuePairs(String key, String val) {
      if (this.keyValuePairs == null) {
        this.keyValuePairs = new HashMap<String,String>();
      }
      this.keyValuePairs.put(key, val);
    }

    public Map<String,String> getKeyValuePairs() {
      return this.keyValuePairs;
    }

    public getProjectIds_args setKeyValuePairs(Map<String,String> keyValuePairs) {
      this.keyValuePairs = keyValuePairs;
      return this;
    }

    public void unsetKeyValuePairs() {
      this.keyValuePairs = null;
    }

    /** Returns true if field keyValuePairs is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyValuePairs() {
      return this.keyValuePairs != null;
    }

    public void setKeyValuePairsIsSet(boolean value) {
      if (!value) {
        this.keyValuePairs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY_VALUE_PAIRS:
        if (value == null) {
          unsetKeyValuePairs();
        } else {
          setKeyValuePairs((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY_VALUE_PAIRS:
        return getKeyValuePairs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY_VALUE_PAIRS:
        return isSetKeyValuePairs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectIds_args)
        return this.equals((getProjectIds_args)that);
      return false;
    }

    public boolean equals(getProjectIds_args that) {
      if (that == null)
        return false;

      boolean this_present_keyValuePairs = true && this.isSetKeyValuePairs();
      boolean that_present_keyValuePairs = true && that.isSetKeyValuePairs();
      if (this_present_keyValuePairs || that_present_keyValuePairs) {
        if (!(this_present_keyValuePairs && that_present_keyValuePairs))
          return false;
        if (!this.keyValuePairs.equals(that.keyValuePairs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keyValuePairs = true && (isSetKeyValuePairs());
      list.add(present_keyValuePairs);
      if (present_keyValuePairs)
        list.add(keyValuePairs);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyValuePairs()).compareTo(other.isSetKeyValuePairs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyValuePairs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyValuePairs, other.keyValuePairs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectIds_args(");
      boolean first = true;

      sb.append("keyValuePairs:");
      if (this.keyValuePairs == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValuePairs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectIds_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectIds_argsStandardScheme getScheme() {
        return new getProjectIds_argsStandardScheme();
      }
    }

    private static class getProjectIds_argsStandardScheme extends StandardScheme<getProjectIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY_VALUE_PAIRS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map540 = iprot.readMapBegin();
                  struct.keyValuePairs = new HashMap<String,String>(2*_map540.size);
                  String _key541;
                  String _val542;
                  for (int _i543 = 0; _i543 < _map540.size; ++_i543)
                  {
                    _key541 = iprot.readString();
                    _val542 = iprot.readString();
                    struct.keyValuePairs.put(_key541, _val542);
                  }
                  iprot.readMapEnd();
                }
                struct.setKeyValuePairsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyValuePairs != null) {
          oprot.writeFieldBegin(KEY_VALUE_PAIRS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.keyValuePairs.size()));
            for (Map.Entry<String, String> _iter544 : struct.keyValuePairs.entrySet())
            {
              oprot.writeString(_iter544.getKey());
              oprot.writeString(_iter544.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectIds_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectIds_argsTupleScheme getScheme() {
        return new getProjectIds_argsTupleScheme();
      }
    }

    private static class getProjectIds_argsTupleScheme extends TupleScheme<getProjectIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyValuePairs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKeyValuePairs()) {
          {
            oprot.writeI32(struct.keyValuePairs.size());
            for (Map.Entry<String, String> _iter545 : struct.keyValuePairs.entrySet())
            {
              oprot.writeString(_iter545.getKey());
              oprot.writeString(_iter545.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map546 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keyValuePairs = new HashMap<String,String>(2*_map546.size);
            String _key547;
            String _val548;
            for (int _i549 = 0; _i549 < _map546.size; ++_i549)
            {
              _key547 = iprot.readString();
              _val548 = iprot.readString();
              struct.keyValuePairs.put(_key547, _val548);
            }
          }
          struct.setKeyValuePairsIsSet(true);
        }
      }
    }

  }

  public static class getProjectIds_result implements org.apache.thrift.TBase<getProjectIds_result, getProjectIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectIds_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectIds_result.class, metaDataMap);
    }

    public getProjectIds_result() {
    }

    public getProjectIds_result(
      List<Integer> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectIds_result(getProjectIds_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getProjectIds_result deepCopy() {
      return new getProjectIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getProjectIds_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getProjectIds_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectIds_result)
        return this.equals((getProjectIds_result)that);
      return false;
    }

    public boolean equals(getProjectIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectIds_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectIds_resultStandardScheme getScheme() {
        return new getProjectIds_resultStandardScheme();
      }
    }

    private static class getProjectIds_resultStandardScheme extends StandardScheme<getProjectIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list550.size);
                  int _elem551;
                  for (int _i552 = 0; _i552 < _list550.size; ++_i552)
                  {
                    _elem551 = iprot.readI32();
                    struct.success.add(_elem551);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter553 : struct.success)
            {
              oprot.writeI32(_iter553);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectIds_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectIds_resultTupleScheme getScheme() {
        return new getProjectIds_resultTupleScheme();
      }
    }

    private static class getProjectIds_resultTupleScheme extends TupleScheme<getProjectIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter554 : struct.success)
            {
              oprot.writeI32(_iter554);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list555.size);
            int _elem556;
            for (int _i557 = 0; _i557 < _list555.size; ++_i557)
            {
              _elem556 = iprot.readI32();
              struct.success.add(_elem556);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getModelIds_args implements org.apache.thrift.TBase<getModelIds_args, getModelIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModelIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelIds_args");

    private static final org.apache.thrift.protocol.TField KEY_VALUE_PAIRS_FIELD_DESC = new org.apache.thrift.protocol.TField("keyValuePairs", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModelIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModelIds_argsTupleSchemeFactory());
    }

    public Map<String,String> keyValuePairs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY_VALUE_PAIRS((short)1, "keyValuePairs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY_VALUE_PAIRS
            return KEY_VALUE_PAIRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY_VALUE_PAIRS, new org.apache.thrift.meta_data.FieldMetaData("keyValuePairs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelIds_args.class, metaDataMap);
    }

    public getModelIds_args() {
    }

    public getModelIds_args(
      Map<String,String> keyValuePairs)
    {
      this();
      this.keyValuePairs = keyValuePairs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelIds_args(getModelIds_args other) {
      if (other.isSetKeyValuePairs()) {
        Map<String,String> __this__keyValuePairs = new HashMap<String,String>(other.keyValuePairs);
        this.keyValuePairs = __this__keyValuePairs;
      }
    }

    public getModelIds_args deepCopy() {
      return new getModelIds_args(this);
    }

    @Override
    public void clear() {
      this.keyValuePairs = null;
    }

    public int getKeyValuePairsSize() {
      return (this.keyValuePairs == null) ? 0 : this.keyValuePairs.size();
    }

    public void putToKeyValuePairs(String key, String val) {
      if (this.keyValuePairs == null) {
        this.keyValuePairs = new HashMap<String,String>();
      }
      this.keyValuePairs.put(key, val);
    }

    public Map<String,String> getKeyValuePairs() {
      return this.keyValuePairs;
    }

    public getModelIds_args setKeyValuePairs(Map<String,String> keyValuePairs) {
      this.keyValuePairs = keyValuePairs;
      return this;
    }

    public void unsetKeyValuePairs() {
      this.keyValuePairs = null;
    }

    /** Returns true if field keyValuePairs is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyValuePairs() {
      return this.keyValuePairs != null;
    }

    public void setKeyValuePairsIsSet(boolean value) {
      if (!value) {
        this.keyValuePairs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY_VALUE_PAIRS:
        if (value == null) {
          unsetKeyValuePairs();
        } else {
          setKeyValuePairs((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY_VALUE_PAIRS:
        return getKeyValuePairs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY_VALUE_PAIRS:
        return isSetKeyValuePairs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelIds_args)
        return this.equals((getModelIds_args)that);
      return false;
    }

    public boolean equals(getModelIds_args that) {
      if (that == null)
        return false;

      boolean this_present_keyValuePairs = true && this.isSetKeyValuePairs();
      boolean that_present_keyValuePairs = true && that.isSetKeyValuePairs();
      if (this_present_keyValuePairs || that_present_keyValuePairs) {
        if (!(this_present_keyValuePairs && that_present_keyValuePairs))
          return false;
        if (!this.keyValuePairs.equals(that.keyValuePairs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_keyValuePairs = true && (isSetKeyValuePairs());
      list.add(present_keyValuePairs);
      if (present_keyValuePairs)
        list.add(keyValuePairs);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModelIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKeyValuePairs()).compareTo(other.isSetKeyValuePairs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyValuePairs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyValuePairs, other.keyValuePairs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModelIds_args(");
      boolean first = true;

      sb.append("keyValuePairs:");
      if (this.keyValuePairs == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValuePairs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelIds_argsStandardSchemeFactory implements SchemeFactory {
      public getModelIds_argsStandardScheme getScheme() {
        return new getModelIds_argsStandardScheme();
      }
    }

    private static class getModelIds_argsStandardScheme extends StandardScheme<getModelIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY_VALUE_PAIRS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map558 = iprot.readMapBegin();
                  struct.keyValuePairs = new HashMap<String,String>(2*_map558.size);
                  String _key559;
                  String _val560;
                  for (int _i561 = 0; _i561 < _map558.size; ++_i561)
                  {
                    _key559 = iprot.readString();
                    _val560 = iprot.readString();
                    struct.keyValuePairs.put(_key559, _val560);
                  }
                  iprot.readMapEnd();
                }
                struct.setKeyValuePairsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keyValuePairs != null) {
          oprot.writeFieldBegin(KEY_VALUE_PAIRS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.keyValuePairs.size()));
            for (Map.Entry<String, String> _iter562 : struct.keyValuePairs.entrySet())
            {
              oprot.writeString(_iter562.getKey());
              oprot.writeString(_iter562.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelIds_argsTupleSchemeFactory implements SchemeFactory {
      public getModelIds_argsTupleScheme getScheme() {
        return new getModelIds_argsTupleScheme();
      }
    }

    private static class getModelIds_argsTupleScheme extends TupleScheme<getModelIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKeyValuePairs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKeyValuePairs()) {
          {
            oprot.writeI32(struct.keyValuePairs.size());
            for (Map.Entry<String, String> _iter563 : struct.keyValuePairs.entrySet())
            {
              oprot.writeString(_iter563.getKey());
              oprot.writeString(_iter563.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map564 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.keyValuePairs = new HashMap<String,String>(2*_map564.size);
            String _key565;
            String _val566;
            for (int _i567 = 0; _i567 < _map564.size; ++_i567)
            {
              _key565 = iprot.readString();
              _val566 = iprot.readString();
              struct.keyValuePairs.put(_key565, _val566);
            }
          }
          struct.setKeyValuePairsIsSet(true);
        }
      }
    }

  }

  public static class getModelIds_result implements org.apache.thrift.TBase<getModelIds_result, getModelIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModelIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModelIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModelIds_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelIds_result.class, metaDataMap);
    }

    public getModelIds_result() {
    }

    public getModelIds_result(
      List<Integer> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelIds_result(getModelIds_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getModelIds_result deepCopy() {
      return new getModelIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getModelIds_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getModelIds_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelIds_result)
        return this.equals((getModelIds_result)that);
      return false;
    }

    public boolean equals(getModelIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModelIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModelIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelIds_resultStandardSchemeFactory implements SchemeFactory {
      public getModelIds_resultStandardScheme getScheme() {
        return new getModelIds_resultStandardScheme();
      }
    }

    private static class getModelIds_resultStandardScheme extends StandardScheme<getModelIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list568 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list568.size);
                  int _elem569;
                  for (int _i570 = 0; _i570 < _list568.size; ++_i570)
                  {
                    _elem569 = iprot.readI32();
                    struct.success.add(_elem569);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter571 : struct.success)
            {
              oprot.writeI32(_iter571);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelIds_resultTupleSchemeFactory implements SchemeFactory {
      public getModelIds_resultTupleScheme getScheme() {
        return new getModelIds_resultTupleScheme();
      }
    }

    private static class getModelIds_resultTupleScheme extends TupleScheme<getModelIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter572 : struct.success)
            {
              oprot.writeI32(_iter572);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list573 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list573.size);
            int _elem574;
            for (int _i575 = 0; _i575 < _list573.size; ++_i575)
            {
              _elem574 = iprot.readI32();
              struct.success.add(_elem574);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class updateProject_args implements org.apache.thrift.TBase<updateProject_args, updateProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProject_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProject_argsTupleSchemeFactory());
    }

    public int projectId; // required
    public String key; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId"),
      KEY((short)2, "key"),
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // KEY
            return KEY;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProject_args.class, metaDataMap);
    }

    public updateProject_args() {
    }

    public updateProject_args(
      int projectId,
      String key,
      String value)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProject_args(updateProject_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateProject_args deepCopy() {
      return new updateProject_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
      this.key = null;
      this.value = null;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public updateProject_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public String getKey() {
      return this.key;
    }

    public updateProject_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public updateProject_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProjectId();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProject_args)
        return this.equals((updateProject_args)that);
      return false;
    }

    public boolean equals(updateProject_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProject_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProject_argsStandardSchemeFactory implements SchemeFactory {
      public updateProject_argsStandardScheme getScheme() {
        return new updateProject_argsStandardScheme();
      }
    }

    private static class updateProject_argsStandardScheme extends StandardScheme<updateProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProject_argsTupleSchemeFactory implements SchemeFactory {
      public updateProject_argsTupleScheme getScheme() {
        return new updateProject_argsTupleScheme();
      }
    }

    private static class updateProject_argsTupleScheme extends TupleScheme<updateProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class updateProject_result implements org.apache.thrift.TBase<updateProject_result, updateProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProject_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProject_result.class, metaDataMap);
    }

    public updateProject_result() {
    }

    public updateProject_result(
      boolean success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProject_result(updateProject_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public updateProject_result deepCopy() {
      return new updateProject_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateProject_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public updateProject_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProject_result)
        return this.equals((updateProject_result)that);
      return false;
    }

    public boolean equals(updateProject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProject_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProject_resultStandardSchemeFactory implements SchemeFactory {
      public updateProject_resultStandardScheme getScheme() {
        return new updateProject_resultStandardScheme();
      }
    }

    private static class updateProject_resultStandardScheme extends StandardScheme<updateProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProject_resultTupleSchemeFactory implements SchemeFactory {
      public updateProject_resultTupleScheme getScheme() {
        return new updateProject_resultTupleScheme();
      }
    }

    private static class updateProject_resultTupleScheme extends TupleScheme<updateProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class createOrUpdateScalarField_args implements org.apache.thrift.TBase<createOrUpdateScalarField_args, createOrUpdateScalarField_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrUpdateScalarField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrUpdateScalarField_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrUpdateScalarField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrUpdateScalarField_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public String key; // required
    public String value; // required
    public String valueType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      KEY((short)2, "key"),
      VALUE((short)3, "value"),
      VALUE_TYPE((short)4, "valueType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // KEY
            return KEY;
          case 3: // VALUE
            return VALUE;
          case 4: // VALUE_TYPE
            return VALUE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrUpdateScalarField_args.class, metaDataMap);
    }

    public createOrUpdateScalarField_args() {
    }

    public createOrUpdateScalarField_args(
      int modelId,
      String key,
      String value,
      String valueType)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.key = key;
      this.value = value;
      this.valueType = valueType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrUpdateScalarField_args(createOrUpdateScalarField_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      if (other.isSetValueType()) {
        this.valueType = other.valueType;
      }
    }

    public createOrUpdateScalarField_args deepCopy() {
      return new createOrUpdateScalarField_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.key = null;
      this.value = null;
      this.valueType = null;
    }

    public int getModelId() {
      return this.modelId;
    }

    public createOrUpdateScalarField_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public String getKey() {
      return this.key;
    }

    public createOrUpdateScalarField_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public createOrUpdateScalarField_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public String getValueType() {
      return this.valueType;
    }

    public createOrUpdateScalarField_args setValueType(String valueType) {
      this.valueType = valueType;
      return this;
    }

    public void unsetValueType() {
      this.valueType = null;
    }

    /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
    public boolean isSetValueType() {
      return this.valueType != null;
    }

    public void setValueTypeIsSet(boolean value) {
      if (!value) {
        this.valueType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case VALUE_TYPE:
        if (value == null) {
          unsetValueType();
        } else {
          setValueType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      case VALUE_TYPE:
        return getValueType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      case VALUE_TYPE:
        return isSetValueType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrUpdateScalarField_args)
        return this.equals((createOrUpdateScalarField_args)that);
      return false;
    }

    public boolean equals(createOrUpdateScalarField_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_valueType = true && this.isSetValueType();
      boolean that_present_valueType = true && that.isSetValueType();
      if (this_present_valueType || that_present_valueType) {
        if (!(this_present_valueType && that_present_valueType))
          return false;
        if (!this.valueType.equals(that.valueType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      boolean present_valueType = true && (isSetValueType());
      list.add(present_valueType);
      if (present_valueType)
        list.add(valueType);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOrUpdateScalarField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValueType()).compareTo(other.isSetValueType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValueType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, other.valueType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrUpdateScalarField_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("valueType:");
      if (this.valueType == null) {
        sb.append("null");
      } else {
        sb.append(this.valueType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrUpdateScalarField_argsStandardSchemeFactory implements SchemeFactory {
      public createOrUpdateScalarField_argsStandardScheme getScheme() {
        return new createOrUpdateScalarField_argsStandardScheme();
      }
    }

    private static class createOrUpdateScalarField_argsStandardScheme extends StandardScheme<createOrUpdateScalarField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrUpdateScalarField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.valueType = iprot.readString();
                struct.setValueTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrUpdateScalarField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.valueType != null) {
          oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
          oprot.writeString(struct.valueType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrUpdateScalarField_argsTupleSchemeFactory implements SchemeFactory {
      public createOrUpdateScalarField_argsTupleScheme getScheme() {
        return new createOrUpdateScalarField_argsTupleScheme();
      }
    }

    private static class createOrUpdateScalarField_argsTupleScheme extends TupleScheme<createOrUpdateScalarField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrUpdateScalarField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        if (struct.isSetValueType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetValueType()) {
          oprot.writeString(struct.valueType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrUpdateScalarField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.valueType = iprot.readString();
          struct.setValueTypeIsSet(true);
        }
      }
    }

  }

  public static class createOrUpdateScalarField_result implements org.apache.thrift.TBase<createOrUpdateScalarField_result, createOrUpdateScalarField_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrUpdateScalarField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrUpdateScalarField_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrUpdateScalarField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrUpdateScalarField_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrUpdateScalarField_result.class, metaDataMap);
    }

    public createOrUpdateScalarField_result() {
    }

    public createOrUpdateScalarField_result(
      boolean success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrUpdateScalarField_result(createOrUpdateScalarField_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public createOrUpdateScalarField_result deepCopy() {
      return new createOrUpdateScalarField_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createOrUpdateScalarField_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public createOrUpdateScalarField_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrUpdateScalarField_result)
        return this.equals((createOrUpdateScalarField_result)that);
      return false;
    }

    public boolean equals(createOrUpdateScalarField_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(createOrUpdateScalarField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrUpdateScalarField_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrUpdateScalarField_resultStandardSchemeFactory implements SchemeFactory {
      public createOrUpdateScalarField_resultStandardScheme getScheme() {
        return new createOrUpdateScalarField_resultStandardScheme();
      }
    }

    private static class createOrUpdateScalarField_resultStandardScheme extends StandardScheme<createOrUpdateScalarField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrUpdateScalarField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrUpdateScalarField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrUpdateScalarField_resultTupleSchemeFactory implements SchemeFactory {
      public createOrUpdateScalarField_resultTupleScheme getScheme() {
        return new createOrUpdateScalarField_resultTupleScheme();
      }
    }

    private static class createOrUpdateScalarField_resultTupleScheme extends TupleScheme<createOrUpdateScalarField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrUpdateScalarField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrUpdateScalarField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class createVectorField_args implements org.apache.thrift.TBase<createVectorField_args, createVectorField_args._Fields>, java.io.Serializable, Cloneable, Comparable<createVectorField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVectorField_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VECTOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("vectorName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VECTOR_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("vectorConfig", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVectorField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVectorField_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public String vectorName; // required
    public Map<String,String> vectorConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      VECTOR_NAME((short)2, "vectorName"),
      VECTOR_CONFIG((short)3, "vectorConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // VECTOR_NAME
            return VECTOR_NAME;
          case 3: // VECTOR_CONFIG
            return VECTOR_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VECTOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("vectorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VECTOR_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("vectorConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVectorField_args.class, metaDataMap);
    }

    public createVectorField_args() {
    }

    public createVectorField_args(
      int modelId,
      String vectorName,
      Map<String,String> vectorConfig)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.vectorName = vectorName;
      this.vectorConfig = vectorConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVectorField_args(createVectorField_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetVectorName()) {
        this.vectorName = other.vectorName;
      }
      if (other.isSetVectorConfig()) {
        Map<String,String> __this__vectorConfig = new HashMap<String,String>(other.vectorConfig);
        this.vectorConfig = __this__vectorConfig;
      }
    }

    public createVectorField_args deepCopy() {
      return new createVectorField_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.vectorName = null;
      this.vectorConfig = null;
    }

    public int getModelId() {
      return this.modelId;
    }

    public createVectorField_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public String getVectorName() {
      return this.vectorName;
    }

    public createVectorField_args setVectorName(String vectorName) {
      this.vectorName = vectorName;
      return this;
    }

    public void unsetVectorName() {
      this.vectorName = null;
    }

    /** Returns true if field vectorName is set (has been assigned a value) and false otherwise */
    public boolean isSetVectorName() {
      return this.vectorName != null;
    }

    public void setVectorNameIsSet(boolean value) {
      if (!value) {
        this.vectorName = null;
      }
    }

    public int getVectorConfigSize() {
      return (this.vectorConfig == null) ? 0 : this.vectorConfig.size();
    }

    public void putToVectorConfig(String key, String val) {
      if (this.vectorConfig == null) {
        this.vectorConfig = new HashMap<String,String>();
      }
      this.vectorConfig.put(key, val);
    }

    public Map<String,String> getVectorConfig() {
      return this.vectorConfig;
    }

    public createVectorField_args setVectorConfig(Map<String,String> vectorConfig) {
      this.vectorConfig = vectorConfig;
      return this;
    }

    public void unsetVectorConfig() {
      this.vectorConfig = null;
    }

    /** Returns true if field vectorConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetVectorConfig() {
      return this.vectorConfig != null;
    }

    public void setVectorConfigIsSet(boolean value) {
      if (!value) {
        this.vectorConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case VECTOR_NAME:
        if (value == null) {
          unsetVectorName();
        } else {
          setVectorName((String)value);
        }
        break;

      case VECTOR_CONFIG:
        if (value == null) {
          unsetVectorConfig();
        } else {
          setVectorConfig((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case VECTOR_NAME:
        return getVectorName();

      case VECTOR_CONFIG:
        return getVectorConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case VECTOR_NAME:
        return isSetVectorName();
      case VECTOR_CONFIG:
        return isSetVectorConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVectorField_args)
        return this.equals((createVectorField_args)that);
      return false;
    }

    public boolean equals(createVectorField_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_vectorName = true && this.isSetVectorName();
      boolean that_present_vectorName = true && that.isSetVectorName();
      if (this_present_vectorName || that_present_vectorName) {
        if (!(this_present_vectorName && that_present_vectorName))
          return false;
        if (!this.vectorName.equals(that.vectorName))
          return false;
      }

      boolean this_present_vectorConfig = true && this.isSetVectorConfig();
      boolean that_present_vectorConfig = true && that.isSetVectorConfig();
      if (this_present_vectorConfig || that_present_vectorConfig) {
        if (!(this_present_vectorConfig && that_present_vectorConfig))
          return false;
        if (!this.vectorConfig.equals(that.vectorConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_vectorName = true && (isSetVectorName());
      list.add(present_vectorName);
      if (present_vectorName)
        list.add(vectorName);

      boolean present_vectorConfig = true && (isSetVectorConfig());
      list.add(present_vectorConfig);
      if (present_vectorConfig)
        list.add(vectorConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(createVectorField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVectorName()).compareTo(other.isSetVectorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVectorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vectorName, other.vectorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVectorConfig()).compareTo(other.isSetVectorConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVectorConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vectorConfig, other.vectorConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVectorField_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vectorName:");
      if (this.vectorName == null) {
        sb.append("null");
      } else {
        sb.append(this.vectorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vectorConfig:");
      if (this.vectorConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.vectorConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVectorField_argsStandardSchemeFactory implements SchemeFactory {
      public createVectorField_argsStandardScheme getScheme() {
        return new createVectorField_argsStandardScheme();
      }
    }

    private static class createVectorField_argsStandardScheme extends StandardScheme<createVectorField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVectorField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VECTOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vectorName = iprot.readString();
                struct.setVectorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VECTOR_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map576 = iprot.readMapBegin();
                  struct.vectorConfig = new HashMap<String,String>(2*_map576.size);
                  String _key577;
                  String _val578;
                  for (int _i579 = 0; _i579 < _map576.size; ++_i579)
                  {
                    _key577 = iprot.readString();
                    _val578 = iprot.readString();
                    struct.vectorConfig.put(_key577, _val578);
                  }
                  iprot.readMapEnd();
                }
                struct.setVectorConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVectorField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.vectorName != null) {
          oprot.writeFieldBegin(VECTOR_NAME_FIELD_DESC);
          oprot.writeString(struct.vectorName);
          oprot.writeFieldEnd();
        }
        if (struct.vectorConfig != null) {
          oprot.writeFieldBegin(VECTOR_CONFIG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.vectorConfig.size()));
            for (Map.Entry<String, String> _iter580 : struct.vectorConfig.entrySet())
            {
              oprot.writeString(_iter580.getKey());
              oprot.writeString(_iter580.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVectorField_argsTupleSchemeFactory implements SchemeFactory {
      public createVectorField_argsTupleScheme getScheme() {
        return new createVectorField_argsTupleScheme();
      }
    }

    private static class createVectorField_argsTupleScheme extends TupleScheme<createVectorField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVectorField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetVectorName()) {
          optionals.set(1);
        }
        if (struct.isSetVectorConfig()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetVectorName()) {
          oprot.writeString(struct.vectorName);
        }
        if (struct.isSetVectorConfig()) {
          {
            oprot.writeI32(struct.vectorConfig.size());
            for (Map.Entry<String, String> _iter581 : struct.vectorConfig.entrySet())
            {
              oprot.writeString(_iter581.getKey());
              oprot.writeString(_iter581.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVectorField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vectorName = iprot.readString();
          struct.setVectorNameIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map582 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.vectorConfig = new HashMap<String,String>(2*_map582.size);
            String _key583;
            String _val584;
            for (int _i585 = 0; _i585 < _map582.size; ++_i585)
            {
              _key583 = iprot.readString();
              _val584 = iprot.readString();
              struct.vectorConfig.put(_key583, _val584);
            }
          }
          struct.setVectorConfigIsSet(true);
        }
      }
    }

  }

  public static class createVectorField_result implements org.apache.thrift.TBase<createVectorField_result, createVectorField_result._Fields>, java.io.Serializable, Cloneable, Comparable<createVectorField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVectorField_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVectorField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVectorField_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVectorField_result.class, metaDataMap);
    }

    public createVectorField_result() {
    }

    public createVectorField_result(
      boolean success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVectorField_result(createVectorField_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public createVectorField_result deepCopy() {
      return new createVectorField_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public createVectorField_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public createVectorField_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVectorField_result)
        return this.equals((createVectorField_result)that);
      return false;
    }

    public boolean equals(createVectorField_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(createVectorField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVectorField_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVectorField_resultStandardSchemeFactory implements SchemeFactory {
      public createVectorField_resultStandardScheme getScheme() {
        return new createVectorField_resultStandardScheme();
      }
    }

    private static class createVectorField_resultStandardScheme extends StandardScheme<createVectorField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVectorField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVectorField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVectorField_resultTupleSchemeFactory implements SchemeFactory {
      public createVectorField_resultTupleScheme getScheme() {
        return new createVectorField_resultTupleScheme();
      }
    }

    private static class createVectorField_resultTupleScheme extends TupleScheme<createVectorField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVectorField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVectorField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class updateVectorField_args implements org.apache.thrift.TBase<updateVectorField_args, updateVectorField_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVectorField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVectorField_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("valueIndex", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVectorField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVectorField_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public String key; // required
    public int valueIndex; // required
    public String value; // required
    public String valueType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      KEY((short)2, "key"),
      VALUE_INDEX((short)3, "valueIndex"),
      VALUE((short)4, "value"),
      VALUE_TYPE((short)5, "valueType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // KEY
            return KEY;
          case 3: // VALUE_INDEX
            return VALUE_INDEX;
          case 4: // VALUE
            return VALUE;
          case 5: // VALUE_TYPE
            return VALUE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private static final int __VALUEINDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("valueIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVectorField_args.class, metaDataMap);
    }

    public updateVectorField_args() {
    }

    public updateVectorField_args(
      int modelId,
      String key,
      int valueIndex,
      String value,
      String valueType)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.key = key;
      this.valueIndex = valueIndex;
      setValueIndexIsSet(true);
      this.value = value;
      this.valueType = valueType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVectorField_args(updateVectorField_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetKey()) {
        this.key = other.key;
      }
      this.valueIndex = other.valueIndex;
      if (other.isSetValue()) {
        this.value = other.value;
      }
      if (other.isSetValueType()) {
        this.valueType = other.valueType;
      }
    }

    public updateVectorField_args deepCopy() {
      return new updateVectorField_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.key = null;
      setValueIndexIsSet(false);
      this.valueIndex = 0;
      this.value = null;
      this.valueType = null;
    }

    public int getModelId() {
      return this.modelId;
    }

    public updateVectorField_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public String getKey() {
      return this.key;
    }

    public updateVectorField_args setKey(String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public int getValueIndex() {
      return this.valueIndex;
    }

    public updateVectorField_args setValueIndex(int valueIndex) {
      this.valueIndex = valueIndex;
      setValueIndexIsSet(true);
      return this;
    }

    public void unsetValueIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUEINDEX_ISSET_ID);
    }

    /** Returns true if field valueIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetValueIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __VALUEINDEX_ISSET_ID);
    }

    public void setValueIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUEINDEX_ISSET_ID, value);
    }

    public String getValue() {
      return this.value;
    }

    public updateVectorField_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public String getValueType() {
      return this.valueType;
    }

    public updateVectorField_args setValueType(String valueType) {
      this.valueType = valueType;
      return this;
    }

    public void unsetValueType() {
      this.valueType = null;
    }

    /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
    public boolean isSetValueType() {
      return this.valueType != null;
    }

    public void setValueTypeIsSet(boolean value) {
      if (!value) {
        this.valueType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((String)value);
        }
        break;

      case VALUE_INDEX:
        if (value == null) {
          unsetValueIndex();
        } else {
          setValueIndex((Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case VALUE_TYPE:
        if (value == null) {
          unsetValueType();
        } else {
          setValueType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case KEY:
        return getKey();

      case VALUE_INDEX:
        return getValueIndex();

      case VALUE:
        return getValue();

      case VALUE_TYPE:
        return getValueType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case KEY:
        return isSetKey();
      case VALUE_INDEX:
        return isSetValueIndex();
      case VALUE:
        return isSetValue();
      case VALUE_TYPE:
        return isSetValueType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVectorField_args)
        return this.equals((updateVectorField_args)that);
      return false;
    }

    public boolean equals(updateVectorField_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_valueIndex = true;
      boolean that_present_valueIndex = true;
      if (this_present_valueIndex || that_present_valueIndex) {
        if (!(this_present_valueIndex && that_present_valueIndex))
          return false;
        if (this.valueIndex != that.valueIndex)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_valueType = true && this.isSetValueType();
      boolean that_present_valueType = true && that.isSetValueType();
      if (this_present_valueType || that_present_valueType) {
        if (!(this_present_valueType && that_present_valueType))
          return false;
        if (!this.valueType.equals(that.valueType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_valueIndex = true;
      list.add(present_valueIndex);
      if (present_valueIndex)
        list.add(valueIndex);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      boolean present_valueType = true && (isSetValueType());
      list.add(present_valueType);
      if (present_valueType)
        list.add(valueType);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVectorField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValueIndex()).compareTo(other.isSetValueIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValueIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueIndex, other.valueIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValueType()).compareTo(other.isSetValueType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValueType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, other.valueType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVectorField_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("valueIndex:");
      sb.append(this.valueIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("valueType:");
      if (this.valueType == null) {
        sb.append("null");
      } else {
        sb.append(this.valueType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVectorField_argsStandardSchemeFactory implements SchemeFactory {
      public updateVectorField_argsStandardScheme getScheme() {
        return new updateVectorField_argsStandardScheme();
      }
    }

    private static class updateVectorField_argsStandardScheme extends StandardScheme<updateVectorField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVectorField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.valueIndex = iprot.readI32();
                struct.setValueIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VALUE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.valueType = iprot.readString();
                struct.setValueTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVectorField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VALUE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.valueIndex);
        oprot.writeFieldEnd();
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.valueType != null) {
          oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
          oprot.writeString(struct.valueType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVectorField_argsTupleSchemeFactory implements SchemeFactory {
      public updateVectorField_argsTupleScheme getScheme() {
        return new updateVectorField_argsTupleScheme();
      }
    }

    private static class updateVectorField_argsTupleScheme extends TupleScheme<updateVectorField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVectorField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetValueIndex()) {
          optionals.set(2);
        }
        if (struct.isSetValue()) {
          optionals.set(3);
        }
        if (struct.isSetValueType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetValueIndex()) {
          oprot.writeI32(struct.valueIndex);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetValueType()) {
          oprot.writeString(struct.valueType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVectorField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.valueIndex = iprot.readI32();
          struct.setValueIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(4)) {
          struct.valueType = iprot.readString();
          struct.setValueTypeIsSet(true);
        }
      }
    }

  }

  public static class updateVectorField_result implements org.apache.thrift.TBase<updateVectorField_result, updateVectorField_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVectorField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVectorField_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVectorField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVectorField_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVectorField_result.class, metaDataMap);
    }

    public updateVectorField_result() {
    }

    public updateVectorField_result(
      boolean success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVectorField_result(updateVectorField_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public updateVectorField_result deepCopy() {
      return new updateVectorField_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateVectorField_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public updateVectorField_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVectorField_result)
        return this.equals((updateVectorField_result)that);
      return false;
    }

    public boolean equals(updateVectorField_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVectorField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVectorField_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVectorField_resultStandardSchemeFactory implements SchemeFactory {
      public updateVectorField_resultStandardScheme getScheme() {
        return new updateVectorField_resultStandardScheme();
      }
    }

    private static class updateVectorField_resultStandardScheme extends StandardScheme<updateVectorField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVectorField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVectorField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVectorField_resultTupleSchemeFactory implements SchemeFactory {
      public updateVectorField_resultTupleScheme getScheme() {
        return new updateVectorField_resultTupleScheme();
      }
    }

    private static class updateVectorField_resultTupleScheme extends TupleScheme<updateVectorField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVectorField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVectorField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class appendToVectorField_args implements org.apache.thrift.TBase<appendToVectorField_args, appendToVectorField_args._Fields>, java.io.Serializable, Cloneable, Comparable<appendToVectorField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendToVectorField_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VECTOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("vectorName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appendToVectorField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appendToVectorField_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public String vectorName; // required
    public String value; // required
    public String valueType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      VECTOR_NAME((short)2, "vectorName"),
      VALUE((short)3, "value"),
      VALUE_TYPE((short)4, "valueType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // VECTOR_NAME
            return VECTOR_NAME;
          case 3: // VALUE
            return VALUE;
          case 4: // VALUE_TYPE
            return VALUE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VECTOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("vectorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendToVectorField_args.class, metaDataMap);
    }

    public appendToVectorField_args() {
    }

    public appendToVectorField_args(
      int modelId,
      String vectorName,
      String value,
      String valueType)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.vectorName = vectorName;
      this.value = value;
      this.valueType = valueType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendToVectorField_args(appendToVectorField_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetVectorName()) {
        this.vectorName = other.vectorName;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      if (other.isSetValueType()) {
        this.valueType = other.valueType;
      }
    }

    public appendToVectorField_args deepCopy() {
      return new appendToVectorField_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.vectorName = null;
      this.value = null;
      this.valueType = null;
    }

    public int getModelId() {
      return this.modelId;
    }

    public appendToVectorField_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public String getVectorName() {
      return this.vectorName;
    }

    public appendToVectorField_args setVectorName(String vectorName) {
      this.vectorName = vectorName;
      return this;
    }

    public void unsetVectorName() {
      this.vectorName = null;
    }

    /** Returns true if field vectorName is set (has been assigned a value) and false otherwise */
    public boolean isSetVectorName() {
      return this.vectorName != null;
    }

    public void setVectorNameIsSet(boolean value) {
      if (!value) {
        this.vectorName = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public appendToVectorField_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public String getValueType() {
      return this.valueType;
    }

    public appendToVectorField_args setValueType(String valueType) {
      this.valueType = valueType;
      return this;
    }

    public void unsetValueType() {
      this.valueType = null;
    }

    /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
    public boolean isSetValueType() {
      return this.valueType != null;
    }

    public void setValueTypeIsSet(boolean value) {
      if (!value) {
        this.valueType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case VECTOR_NAME:
        if (value == null) {
          unsetVectorName();
        } else {
          setVectorName((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      case VALUE_TYPE:
        if (value == null) {
          unsetValueType();
        } else {
          setValueType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case VECTOR_NAME:
        return getVectorName();

      case VALUE:
        return getValue();

      case VALUE_TYPE:
        return getValueType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case VECTOR_NAME:
        return isSetVectorName();
      case VALUE:
        return isSetValue();
      case VALUE_TYPE:
        return isSetValueType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appendToVectorField_args)
        return this.equals((appendToVectorField_args)that);
      return false;
    }

    public boolean equals(appendToVectorField_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_vectorName = true && this.isSetVectorName();
      boolean that_present_vectorName = true && that.isSetVectorName();
      if (this_present_vectorName || that_present_vectorName) {
        if (!(this_present_vectorName && that_present_vectorName))
          return false;
        if (!this.vectorName.equals(that.vectorName))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_valueType = true && this.isSetValueType();
      boolean that_present_valueType = true && that.isSetValueType();
      if (this_present_valueType || that_present_valueType) {
        if (!(this_present_valueType && that_present_valueType))
          return false;
        if (!this.valueType.equals(that.valueType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_vectorName = true && (isSetVectorName());
      list.add(present_vectorName);
      if (present_vectorName)
        list.add(vectorName);

      boolean present_value = true && (isSetValue());
      list.add(present_value);
      if (present_value)
        list.add(value);

      boolean present_valueType = true && (isSetValueType());
      list.add(present_valueType);
      if (present_valueType)
        list.add(valueType);

      return list.hashCode();
    }

    @Override
    public int compareTo(appendToVectorField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVectorName()).compareTo(other.isSetVectorName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVectorName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vectorName, other.vectorName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValueType()).compareTo(other.isSetValueType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValueType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, other.valueType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appendToVectorField_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vectorName:");
      if (this.vectorName == null) {
        sb.append("null");
      } else {
        sb.append(this.vectorName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("valueType:");
      if (this.valueType == null) {
        sb.append("null");
      } else {
        sb.append(this.valueType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendToVectorField_argsStandardSchemeFactory implements SchemeFactory {
      public appendToVectorField_argsStandardScheme getScheme() {
        return new appendToVectorField_argsStandardScheme();
      }
    }

    private static class appendToVectorField_argsStandardScheme extends StandardScheme<appendToVectorField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendToVectorField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VECTOR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vectorName = iprot.readString();
                struct.setVectorNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VALUE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.valueType = iprot.readString();
                struct.setValueTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendToVectorField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.vectorName != null) {
          oprot.writeFieldBegin(VECTOR_NAME_FIELD_DESC);
          oprot.writeString(struct.vectorName);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        if (struct.valueType != null) {
          oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
          oprot.writeString(struct.valueType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendToVectorField_argsTupleSchemeFactory implements SchemeFactory {
      public appendToVectorField_argsTupleScheme getScheme() {
        return new appendToVectorField_argsTupleScheme();
      }
    }

    private static class appendToVectorField_argsTupleScheme extends TupleScheme<appendToVectorField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendToVectorField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetVectorName()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        if (struct.isSetValueType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetVectorName()) {
          oprot.writeString(struct.vectorName);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetValueType()) {
          oprot.writeString(struct.valueType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendToVectorField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vectorName = iprot.readString();
          struct.setVectorNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.valueType = iprot.readString();
          struct.setValueTypeIsSet(true);
        }
      }
    }

  }

  public static class appendToVectorField_result implements org.apache.thrift.TBase<appendToVectorField_result, appendToVectorField_result._Fields>, java.io.Serializable, Cloneable, Comparable<appendToVectorField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendToVectorField_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appendToVectorField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appendToVectorField_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendToVectorField_result.class, metaDataMap);
    }

    public appendToVectorField_result() {
    }

    public appendToVectorField_result(
      boolean success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendToVectorField_result(appendToVectorField_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public appendToVectorField_result deepCopy() {
      return new appendToVectorField_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public appendToVectorField_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public appendToVectorField_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appendToVectorField_result)
        return this.equals((appendToVectorField_result)that);
      return false;
    }

    public boolean equals(appendToVectorField_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(appendToVectorField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appendToVectorField_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendToVectorField_resultStandardSchemeFactory implements SchemeFactory {
      public appendToVectorField_resultStandardScheme getScheme() {
        return new appendToVectorField_resultStandardScheme();
      }
    }

    private static class appendToVectorField_resultStandardScheme extends StandardScheme<appendToVectorField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendToVectorField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendToVectorField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendToVectorField_resultTupleSchemeFactory implements SchemeFactory {
      public appendToVectorField_resultTupleScheme getScheme() {
        return new appendToVectorField_resultTupleScheme();
      }
    }

    private static class appendToVectorField_resultTupleScheme extends TupleScheme<appendToVectorField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendToVectorField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendToVectorField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getModel_args implements org.apache.thrift.TBase<getModel_args, getModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModel_argsTupleSchemeFactory());
    }

    public int modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModel_args.class, metaDataMap);
    }

    public getModel_args() {
    }

    public getModel_args(
      int modelId)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModel_args(getModel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
    }

    public getModel_args deepCopy() {
      return new getModel_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public getModel_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModel_args)
        return this.equals((getModel_args)that);
      return false;
    }

    public boolean equals(getModel_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModel_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModel_argsStandardSchemeFactory implements SchemeFactory {
      public getModel_argsStandardScheme getScheme() {
        return new getModel_argsStandardScheme();
      }
    }

    private static class getModel_argsStandardScheme extends StandardScheme<getModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModel_argsTupleSchemeFactory implements SchemeFactory {
      public getModel_argsTupleScheme getScheme() {
        return new getModel_argsTupleScheme();
      }
    }

    private static class getModel_argsTupleScheme extends TupleScheme<getModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class getModel_result implements org.apache.thrift.TBase<getModel_result, getModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModel_resultTupleSchemeFactory());
    }

    public ModelResponse success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelResponse.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModel_result.class, metaDataMap);
    }

    public getModel_result() {
    }

    public getModel_result(
      ModelResponse success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModel_result(getModel_result other) {
      if (other.isSetSuccess()) {
        this.success = new ModelResponse(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getModel_result deepCopy() {
      return new getModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public ModelResponse getSuccess() {
      return this.success;
    }

    public getModel_result setSuccess(ModelResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getModel_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getModel_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ModelResponse)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModel_result)
        return this.equals((getModel_result)that);
      return false;
    }

    public boolean equals(getModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModel_resultStandardSchemeFactory implements SchemeFactory {
      public getModel_resultStandardScheme getScheme() {
        return new getModel_resultStandardScheme();
      }
    }

    private static class getModel_resultStandardScheme extends StandardScheme<getModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ModelResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModel_resultTupleSchemeFactory implements SchemeFactory {
      public getModel_resultTupleScheme getScheme() {
        return new getModel_resultTupleScheme();
      }
    }

    private static class getModel_resultTupleScheme extends TupleScheme<getModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ModelResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getRunsInExperiment_args implements org.apache.thrift.TBase<getRunsInExperiment_args, getRunsInExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRunsInExperiment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRunsInExperiment_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRunsInExperiment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRunsInExperiment_argsTupleSchemeFactory());
    }

    public int experimentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT_ID((short)1, "experimentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT_ID
            return EXPERIMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPERIMENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRunsInExperiment_args.class, metaDataMap);
    }

    public getRunsInExperiment_args() {
    }

    public getRunsInExperiment_args(
      int experimentId)
    {
      this();
      this.experimentId = experimentId;
      setExperimentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRunsInExperiment_args(getRunsInExperiment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.experimentId = other.experimentId;
    }

    public getRunsInExperiment_args deepCopy() {
      return new getRunsInExperiment_args(this);
    }

    @Override
    public void clear() {
      setExperimentIdIsSet(false);
      this.experimentId = 0;
    }

    public int getExperimentId() {
      return this.experimentId;
    }

    public getRunsInExperiment_args setExperimentId(int experimentId) {
      this.experimentId = experimentId;
      setExperimentIdIsSet(true);
      return this;
    }

    public void unsetExperimentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID);
    }

    /** Returns true if field experimentId is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID);
    }

    public void setExperimentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT_ID:
        if (value == null) {
          unsetExperimentId();
        } else {
          setExperimentId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT_ID:
        return getExperimentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT_ID:
        return isSetExperimentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRunsInExperiment_args)
        return this.equals((getRunsInExperiment_args)that);
      return false;
    }

    public boolean equals(getRunsInExperiment_args that) {
      if (that == null)
        return false;

      boolean this_present_experimentId = true;
      boolean that_present_experimentId = true;
      if (this_present_experimentId || that_present_experimentId) {
        if (!(this_present_experimentId && that_present_experimentId))
          return false;
        if (this.experimentId != that.experimentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experimentId = true;
      list.add(present_experimentId);
      if (present_experimentId)
        list.add(experimentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRunsInExperiment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperimentId()).compareTo(other.isSetExperimentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentId, other.experimentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRunsInExperiment_args(");
      boolean first = true;

      sb.append("experimentId:");
      sb.append(this.experimentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRunsInExperiment_argsStandardSchemeFactory implements SchemeFactory {
      public getRunsInExperiment_argsStandardScheme getScheme() {
        return new getRunsInExperiment_argsStandardScheme();
      }
    }

    private static class getRunsInExperiment_argsStandardScheme extends StandardScheme<getRunsInExperiment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRunsInExperiment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.experimentId = iprot.readI32();
                struct.setExperimentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRunsInExperiment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXPERIMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.experimentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRunsInExperiment_argsTupleSchemeFactory implements SchemeFactory {
      public getRunsInExperiment_argsTupleScheme getScheme() {
        return new getRunsInExperiment_argsTupleScheme();
      }
    }

    private static class getRunsInExperiment_argsTupleScheme extends TupleScheme<getRunsInExperiment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRunsInExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperimentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperimentId()) {
          oprot.writeI32(struct.experimentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRunsInExperiment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.experimentId = iprot.readI32();
          struct.setExperimentIdIsSet(true);
        }
      }
    }

  }

  public static class getRunsInExperiment_result implements org.apache.thrift.TBase<getRunsInExperiment_result, getRunsInExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRunsInExperiment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRunsInExperiment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRunsInExperiment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRunsInExperiment_resultTupleSchemeFactory());
    }

    public List<ExperimentRun> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentRun.class))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRunsInExperiment_result.class, metaDataMap);
    }

    public getRunsInExperiment_result() {
    }

    public getRunsInExperiment_result(
      List<ExperimentRun> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRunsInExperiment_result(getRunsInExperiment_result other) {
      if (other.isSetSuccess()) {
        List<ExperimentRun> __this__success = new ArrayList<ExperimentRun>(other.success.size());
        for (ExperimentRun other_element : other.success) {
          __this__success.add(new ExperimentRun(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getRunsInExperiment_result deepCopy() {
      return new getRunsInExperiment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ExperimentRun> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ExperimentRun elem) {
      if (this.success == null) {
        this.success = new ArrayList<ExperimentRun>();
      }
      this.success.add(elem);
    }

    public List<ExperimentRun> getSuccess() {
      return this.success;
    }

    public getRunsInExperiment_result setSuccess(List<ExperimentRun> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getRunsInExperiment_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ExperimentRun>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRunsInExperiment_result)
        return this.equals((getRunsInExperiment_result)that);
      return false;
    }

    public boolean equals(getRunsInExperiment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRunsInExperiment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRunsInExperiment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRunsInExperiment_resultStandardSchemeFactory implements SchemeFactory {
      public getRunsInExperiment_resultStandardScheme getScheme() {
        return new getRunsInExperiment_resultStandardScheme();
      }
    }

    private static class getRunsInExperiment_resultStandardScheme extends StandardScheme<getRunsInExperiment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRunsInExperiment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list586 = iprot.readListBegin();
                  struct.success = new ArrayList<ExperimentRun>(_list586.size);
                  ExperimentRun _elem587;
                  for (int _i588 = 0; _i588 < _list586.size; ++_i588)
                  {
                    _elem587 = new ExperimentRun();
                    _elem587.read(iprot);
                    struct.success.add(_elem587);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRunsInExperiment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ExperimentRun _iter589 : struct.success)
            {
              _iter589.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRunsInExperiment_resultTupleSchemeFactory implements SchemeFactory {
      public getRunsInExperiment_resultTupleScheme getScheme() {
        return new getRunsInExperiment_resultTupleScheme();
      }
    }

    private static class getRunsInExperiment_resultTupleScheme extends TupleScheme<getRunsInExperiment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRunsInExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ExperimentRun _iter590 : struct.success)
            {
              _iter590.write(oprot);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRunsInExperiment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list591 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ExperimentRun>(_list591.size);
            ExperimentRun _elem592;
            for (int _i593 = 0; _i593 < _list591.size; ++_i593)
            {
              _elem592 = new ExperimentRun();
              _elem592.read(iprot);
              struct.success.add(_elem592);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getRunsAndExperimentsInProject_args implements org.apache.thrift.TBase<getRunsAndExperimentsInProject_args, getRunsAndExperimentsInProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRunsAndExperimentsInProject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRunsAndExperimentsInProject_args");

    private static final org.apache.thrift.protocol.TField PROJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRunsAndExperimentsInProject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRunsAndExperimentsInProject_argsTupleSchemeFactory());
    }

    public int projId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJ_ID((short)1, "projId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJ_ID
            return PROJ_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJ_ID, new org.apache.thrift.meta_data.FieldMetaData("projId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRunsAndExperimentsInProject_args.class, metaDataMap);
    }

    public getRunsAndExperimentsInProject_args() {
    }

    public getRunsAndExperimentsInProject_args(
      int projId)
    {
      this();
      this.projId = projId;
      setProjIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRunsAndExperimentsInProject_args(getRunsAndExperimentsInProject_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projId = other.projId;
    }

    public getRunsAndExperimentsInProject_args deepCopy() {
      return new getRunsAndExperimentsInProject_args(this);
    }

    @Override
    public void clear() {
      setProjIdIsSet(false);
      this.projId = 0;
    }

    public int getProjId() {
      return this.projId;
    }

    public getRunsAndExperimentsInProject_args setProjId(int projId) {
      this.projId = projId;
      setProjIdIsSet(true);
      return this;
    }

    public void unsetProjId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJID_ISSET_ID);
    }

    /** Returns true if field projId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJID_ISSET_ID);
    }

    public void setProjIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJ_ID:
        if (value == null) {
          unsetProjId();
        } else {
          setProjId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJ_ID:
        return getProjId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJ_ID:
        return isSetProjId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRunsAndExperimentsInProject_args)
        return this.equals((getRunsAndExperimentsInProject_args)that);
      return false;
    }

    public boolean equals(getRunsAndExperimentsInProject_args that) {
      if (that == null)
        return false;

      boolean this_present_projId = true;
      boolean that_present_projId = true;
      if (this_present_projId || that_present_projId) {
        if (!(this_present_projId && that_present_projId))
          return false;
        if (this.projId != that.projId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projId = true;
      list.add(present_projId);
      if (present_projId)
        list.add(projId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRunsAndExperimentsInProject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjId()).compareTo(other.isSetProjId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projId, other.projId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRunsAndExperimentsInProject_args(");
      boolean first = true;

      sb.append("projId:");
      sb.append(this.projId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRunsAndExperimentsInProject_argsStandardSchemeFactory implements SchemeFactory {
      public getRunsAndExperimentsInProject_argsStandardScheme getScheme() {
        return new getRunsAndExperimentsInProject_argsStandardScheme();
      }
    }

    private static class getRunsAndExperimentsInProject_argsStandardScheme extends StandardScheme<getRunsAndExperimentsInProject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRunsAndExperimentsInProject_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projId = iprot.readI32();
                struct.setProjIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRunsAndExperimentsInProject_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJ_ID_FIELD_DESC);
        oprot.writeI32(struct.projId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRunsAndExperimentsInProject_argsTupleSchemeFactory implements SchemeFactory {
      public getRunsAndExperimentsInProject_argsTupleScheme getScheme() {
        return new getRunsAndExperimentsInProject_argsTupleScheme();
      }
    }

    private static class getRunsAndExperimentsInProject_argsTupleScheme extends TupleScheme<getRunsAndExperimentsInProject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRunsAndExperimentsInProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjId()) {
          oprot.writeI32(struct.projId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRunsAndExperimentsInProject_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projId = iprot.readI32();
          struct.setProjIdIsSet(true);
        }
      }
    }

  }

  public static class getRunsAndExperimentsInProject_result implements org.apache.thrift.TBase<getRunsAndExperimentsInProject_result, getRunsAndExperimentsInProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRunsAndExperimentsInProject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRunsAndExperimentsInProject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRunsAndExperimentsInProject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRunsAndExperimentsInProject_resultTupleSchemeFactory());
    }

    public ProjectExperimentsAndRuns success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectExperimentsAndRuns.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRunsAndExperimentsInProject_result.class, metaDataMap);
    }

    public getRunsAndExperimentsInProject_result() {
    }

    public getRunsAndExperimentsInProject_result(
      ProjectExperimentsAndRuns success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRunsAndExperimentsInProject_result(getRunsAndExperimentsInProject_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProjectExperimentsAndRuns(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getRunsAndExperimentsInProject_result deepCopy() {
      return new getRunsAndExperimentsInProject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public ProjectExperimentsAndRuns getSuccess() {
      return this.success;
    }

    public getRunsAndExperimentsInProject_result setSuccess(ProjectExperimentsAndRuns success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getRunsAndExperimentsInProject_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProjectExperimentsAndRuns)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRunsAndExperimentsInProject_result)
        return this.equals((getRunsAndExperimentsInProject_result)that);
      return false;
    }

    public boolean equals(getRunsAndExperimentsInProject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRunsAndExperimentsInProject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRunsAndExperimentsInProject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRunsAndExperimentsInProject_resultStandardSchemeFactory implements SchemeFactory {
      public getRunsAndExperimentsInProject_resultStandardScheme getScheme() {
        return new getRunsAndExperimentsInProject_resultStandardScheme();
      }
    }

    private static class getRunsAndExperimentsInProject_resultStandardScheme extends StandardScheme<getRunsAndExperimentsInProject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRunsAndExperimentsInProject_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProjectExperimentsAndRuns();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRunsAndExperimentsInProject_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRunsAndExperimentsInProject_resultTupleSchemeFactory implements SchemeFactory {
      public getRunsAndExperimentsInProject_resultTupleScheme getScheme() {
        return new getRunsAndExperimentsInProject_resultTupleScheme();
      }
    }

    private static class getRunsAndExperimentsInProject_resultTupleScheme extends TupleScheme<getRunsAndExperimentsInProject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRunsAndExperimentsInProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRunsAndExperimentsInProject_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProjectExperimentsAndRuns();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getProjectOverviews_args implements org.apache.thrift.TBase<getProjectOverviews_args, getProjectOverviews_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectOverviews_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectOverviews_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectOverviews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectOverviews_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectOverviews_args.class, metaDataMap);
    }

    public getProjectOverviews_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectOverviews_args(getProjectOverviews_args other) {
    }

    public getProjectOverviews_args deepCopy() {
      return new getProjectOverviews_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectOverviews_args)
        return this.equals((getProjectOverviews_args)that);
      return false;
    }

    public boolean equals(getProjectOverviews_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectOverviews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectOverviews_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectOverviews_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectOverviews_argsStandardScheme getScheme() {
        return new getProjectOverviews_argsStandardScheme();
      }
    }

    private static class getProjectOverviews_argsStandardScheme extends StandardScheme<getProjectOverviews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectOverviews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectOverviews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectOverviews_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectOverviews_argsTupleScheme getScheme() {
        return new getProjectOverviews_argsTupleScheme();
      }
    }

    private static class getProjectOverviews_argsTupleScheme extends TupleScheme<getProjectOverviews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectOverviews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectOverviews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getProjectOverviews_result implements org.apache.thrift.TBase<getProjectOverviews_result, getProjectOverviews_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectOverviews_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectOverviews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectOverviews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectOverviews_resultTupleSchemeFactory());
    }

    public List<ProjectOverviewResponse> success; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectOverviewResponse.class))));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectOverviews_result.class, metaDataMap);
    }

    public getProjectOverviews_result() {
    }

    public getProjectOverviews_result(
      List<ProjectOverviewResponse> success,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectOverviews_result(getProjectOverviews_result other) {
      if (other.isSetSuccess()) {
        List<ProjectOverviewResponse> __this__success = new ArrayList<ProjectOverviewResponse>(other.success.size());
        for (ProjectOverviewResponse other_element : other.success) {
          __this__success.add(new ProjectOverviewResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public getProjectOverviews_result deepCopy() {
      return new getProjectOverviews_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectOverviewResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectOverviewResponse elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectOverviewResponse>();
      }
      this.success.add(elem);
    }

    public List<ProjectOverviewResponse> getSuccess() {
      return this.success;
    }

    public getProjectOverviews_result setSuccess(List<ProjectOverviewResponse> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getProjectOverviews_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectOverviewResponse>)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectOverviews_result)
        return this.equals((getProjectOverviews_result)that);
      return false;
    }

    public boolean equals(getProjectOverviews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectOverviews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectOverviews_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectOverviews_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectOverviews_resultStandardScheme getScheme() {
        return new getProjectOverviews_resultStandardScheme();
      }
    }

    private static class getProjectOverviews_resultStandardScheme extends StandardScheme<getProjectOverviews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectOverviews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list594 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectOverviewResponse>(_list594.size);
                  ProjectOverviewResponse _elem595;
                  for (int _i596 = 0; _i596 < _list594.size; ++_i596)
                  {
                    _elem595 = new ProjectOverviewResponse();
                    _elem595.read(iprot);
                    struct.success.add(_elem595);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectOverviews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectOverviewResponse _iter597 : struct.success)
            {
              _iter597.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectOverviews_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectOverviews_resultTupleScheme getScheme() {
        return new getProjectOverviews_resultTupleScheme();
      }
    }

    private static class getProjectOverviews_resultTupleScheme extends TupleScheme<getProjectOverviews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectOverviews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectOverviewResponse _iter598 : struct.success)
            {
              _iter598.write(oprot);
            }
          }
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectOverviews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list599 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectOverviewResponse>(_list599.size);
            ProjectOverviewResponse _elem600;
            for (int _i601 = 0; _i601 < _list599.size; ++_i601)
            {
              _elem600 = new ProjectOverviewResponse();
              _elem600.read(iprot);
              struct.success.add(_elem600);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class getExperimentRunDetails_args implements org.apache.thrift.TBase<getExperimentRunDetails_args, getExperimentRunDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentRunDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentRunDetails_args");

    private static final org.apache.thrift.protocol.TField EXPERIMENT_RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentRunId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentRunDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentRunDetails_argsTupleSchemeFactory());
    }

    public int experimentRunId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPERIMENT_RUN_ID((short)1, "experimentRunId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPERIMENT_RUN_ID
            return EXPERIMENT_RUN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPERIMENTRUNID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPERIMENT_RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentRunId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentRunDetails_args.class, metaDataMap);
    }

    public getExperimentRunDetails_args() {
    }

    public getExperimentRunDetails_args(
      int experimentRunId)
    {
      this();
      this.experimentRunId = experimentRunId;
      setExperimentRunIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentRunDetails_args(getExperimentRunDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.experimentRunId = other.experimentRunId;
    }

    public getExperimentRunDetails_args deepCopy() {
      return new getExperimentRunDetails_args(this);
    }

    @Override
    public void clear() {
      setExperimentRunIdIsSet(false);
      this.experimentRunId = 0;
    }

    public int getExperimentRunId() {
      return this.experimentRunId;
    }

    public getExperimentRunDetails_args setExperimentRunId(int experimentRunId) {
      this.experimentRunId = experimentRunId;
      setExperimentRunIdIsSet(true);
      return this;
    }

    public void unsetExperimentRunId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
    }

    /** Returns true if field experimentRunId is set (has been assigned a value) and false otherwise */
    public boolean isSetExperimentRunId() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID);
    }

    public void setExperimentRunIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPERIMENTRUNID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPERIMENT_RUN_ID:
        if (value == null) {
          unsetExperimentRunId();
        } else {
          setExperimentRunId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPERIMENT_RUN_ID:
        return getExperimentRunId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPERIMENT_RUN_ID:
        return isSetExperimentRunId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentRunDetails_args)
        return this.equals((getExperimentRunDetails_args)that);
      return false;
    }

    public boolean equals(getExperimentRunDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_experimentRunId = true;
      boolean that_present_experimentRunId = true;
      if (this_present_experimentRunId || that_present_experimentRunId) {
        if (!(this_present_experimentRunId && that_present_experimentRunId))
          return false;
        if (this.experimentRunId != that.experimentRunId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_experimentRunId = true;
      list.add(present_experimentRunId);
      if (present_experimentRunId)
        list.add(experimentRunId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperimentRunDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExperimentRunId()).compareTo(other.isSetExperimentRunId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExperimentRunId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentRunId, other.experimentRunId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentRunDetails_args(");
      boolean first = true;

      sb.append("experimentRunId:");
      sb.append(this.experimentRunId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentRunDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getExperimentRunDetails_argsStandardScheme getScheme() {
        return new getExperimentRunDetails_argsStandardScheme();
      }
    }

    private static class getExperimentRunDetails_argsStandardScheme extends StandardScheme<getExperimentRunDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentRunDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPERIMENT_RUN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.experimentRunId = iprot.readI32();
                struct.setExperimentRunIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentRunDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXPERIMENT_RUN_ID_FIELD_DESC);
        oprot.writeI32(struct.experimentRunId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentRunDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getExperimentRunDetails_argsTupleScheme getScheme() {
        return new getExperimentRunDetails_argsTupleScheme();
      }
    }

    private static class getExperimentRunDetails_argsTupleScheme extends TupleScheme<getExperimentRunDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentRunDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExperimentRunId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExperimentRunId()) {
          oprot.writeI32(struct.experimentRunId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentRunDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.experimentRunId = iprot.readI32();
          struct.setExperimentRunIdIsSet(true);
        }
      }
    }

  }

  public static class getExperimentRunDetails_result implements org.apache.thrift.TBase<getExperimentRunDetails_result, getExperimentRunDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentRunDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentRunDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getExperimentRunDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getExperimentRunDetails_resultTupleSchemeFactory());
    }

    public ExperimentRunDetailsResponse success; // required
    public ServerLogicException svEx; // required
    public ResourceNotFoundException rnfEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SV_EX((short)1, "svEx"),
      RNF_EX((short)2, "rnfEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SV_EX
            return SV_EX;
          case 2: // RNF_EX
            return RNF_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExperimentRunDetailsResponse.class)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentRunDetails_result.class, metaDataMap);
    }

    public getExperimentRunDetails_result() {
    }

    public getExperimentRunDetails_result(
      ExperimentRunDetailsResponse success,
      ServerLogicException svEx,
      ResourceNotFoundException rnfEx)
    {
      this();
      this.success = success;
      this.svEx = svEx;
      this.rnfEx = rnfEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExperimentRunDetails_result(getExperimentRunDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExperimentRunDetailsResponse(other.success);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
    }

    public getExperimentRunDetails_result deepCopy() {
      return new getExperimentRunDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.svEx = null;
      this.rnfEx = null;
    }

    public ExperimentRunDetailsResponse getSuccess() {
      return this.success;
    }

    public getExperimentRunDetails_result setSuccess(ExperimentRunDetailsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public getExperimentRunDetails_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public getExperimentRunDetails_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExperimentRunDetailsResponse)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SV_EX:
        return getSvEx();

      case RNF_EX:
        return getRnfEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SV_EX:
        return isSetSvEx();
      case RNF_EX:
        return isSetRnfEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExperimentRunDetails_result)
        return this.equals((getExperimentRunDetails_result)that);
      return false;
    }

    public boolean equals(getExperimentRunDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(getExperimentRunDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getExperimentRunDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExperimentRunDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getExperimentRunDetails_resultStandardScheme getScheme() {
        return new getExperimentRunDetails_resultStandardScheme();
      }
    }

    private static class getExperimentRunDetails_resultStandardScheme extends StandardScheme<getExperimentRunDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentRunDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExperimentRunDetailsResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentRunDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExperimentRunDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getExperimentRunDetails_resultTupleScheme getScheme() {
        return new getExperimentRunDetails_resultTupleScheme();
      }
    }

    private static class getExperimentRunDetails_resultTupleScheme extends TupleScheme<getExperimentRunDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentRunDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSvEx()) {
          optionals.set(1);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentRunDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ExperimentRunDetailsResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
      }
    }

  }

  public static class originalFeatures_args implements org.apache.thrift.TBase<originalFeatures_args, originalFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<originalFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("originalFeatures_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new originalFeatures_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new originalFeatures_argsTupleSchemeFactory());
    }

    public int modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(originalFeatures_args.class, metaDataMap);
    }

    public originalFeatures_args() {
    }

    public originalFeatures_args(
      int modelId)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public originalFeatures_args(originalFeatures_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
    }

    public originalFeatures_args deepCopy() {
      return new originalFeatures_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public originalFeatures_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof originalFeatures_args)
        return this.equals((originalFeatures_args)that);
      return false;
    }

    public boolean equals(originalFeatures_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(originalFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("originalFeatures_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class originalFeatures_argsStandardSchemeFactory implements SchemeFactory {
      public originalFeatures_argsStandardScheme getScheme() {
        return new originalFeatures_argsStandardScheme();
      }
    }

    private static class originalFeatures_argsStandardScheme extends StandardScheme<originalFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, originalFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, originalFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class originalFeatures_argsTupleSchemeFactory implements SchemeFactory {
      public originalFeatures_argsTupleScheme getScheme() {
        return new originalFeatures_argsTupleScheme();
      }
    }

    private static class originalFeatures_argsTupleScheme extends TupleScheme<originalFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, originalFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, originalFeatures_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class originalFeatures_result implements org.apache.thrift.TBase<originalFeatures_result, originalFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<originalFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("originalFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new originalFeatures_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new originalFeatures_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(originalFeatures_result.class, metaDataMap);
    }

    public originalFeatures_result() {
    }

    public originalFeatures_result(
      List<String> success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public originalFeatures_result(originalFeatures_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public originalFeatures_result deepCopy() {
      return new originalFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public originalFeatures_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public originalFeatures_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public originalFeatures_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof originalFeatures_result)
        return this.equals((originalFeatures_result)that);
      return false;
    }

    public boolean equals(originalFeatures_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(originalFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("originalFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class originalFeatures_resultStandardSchemeFactory implements SchemeFactory {
      public originalFeatures_resultStandardScheme getScheme() {
        return new originalFeatures_resultStandardScheme();
      }
    }

    private static class originalFeatures_resultStandardScheme extends StandardScheme<originalFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, originalFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list602 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list602.size);
                  String _elem603;
                  for (int _i604 = 0; _i604 < _list602.size; ++_i604)
                  {
                    _elem603 = iprot.readString();
                    struct.success.add(_elem603);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, originalFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter605 : struct.success)
            {
              oprot.writeString(_iter605);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class originalFeatures_resultTupleSchemeFactory implements SchemeFactory {
      public originalFeatures_resultTupleScheme getScheme() {
        return new originalFeatures_resultTupleScheme();
      }
    }

    private static class originalFeatures_resultTupleScheme extends TupleScheme<originalFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, originalFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter606 : struct.success)
            {
              oprot.writeString(_iter606);
            }
          }
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, originalFeatures_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list607 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list607.size);
            String _elem608;
            for (int _i609 = 0; _i609 < _list607.size; ++_i609)
            {
              _elem608 = iprot.readString();
              struct.success.add(_elem608);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storeTreeModel_args implements org.apache.thrift.TBase<storeTreeModel_args, storeTreeModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeTreeModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeTreeModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeTreeModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeTreeModel_argsTupleSchemeFactory());
    }

    public int modelId; // required
    public TreeModel model; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId"),
      MODEL((short)2, "model");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          case 2: // MODEL
            return MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TreeModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeTreeModel_args.class, metaDataMap);
    }

    public storeTreeModel_args() {
    }

    public storeTreeModel_args(
      int modelId,
      TreeModel model)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
      this.model = model;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeTreeModel_args(storeTreeModel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
      if (other.isSetModel()) {
        this.model = new TreeModel(other.model);
      }
    }

    public storeTreeModel_args deepCopy() {
      return new storeTreeModel_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
      this.model = null;
    }

    public int getModelId() {
      return this.modelId;
    }

    public storeTreeModel_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public TreeModel getModel() {
      return this.model;
    }

    public storeTreeModel_args setModel(TreeModel model) {
      this.model = model;
      return this;
    }

    public void unsetModel() {
      this.model = null;
    }

    /** Returns true if field model is set (has been assigned a value) and false otherwise */
    public boolean isSetModel() {
      return this.model != null;
    }

    public void setModelIsSet(boolean value) {
      if (!value) {
        this.model = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      case MODEL:
        if (value == null) {
          unsetModel();
        } else {
          setModel((TreeModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      case MODEL:
        return getModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      case MODEL:
        return isSetModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeTreeModel_args)
        return this.equals((storeTreeModel_args)that);
      return false;
    }

    public boolean equals(storeTreeModel_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      boolean this_present_model = true && this.isSetModel();
      boolean that_present_model = true && that.isSetModel();
      if (this_present_model || that_present_model) {
        if (!(this_present_model && that_present_model))
          return false;
        if (!this.model.equals(that.model))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      boolean present_model = true && (isSetModel());
      list.add(present_model);
      if (present_model)
        list.add(model);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeTreeModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModel()).compareTo(other.isSetModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, other.model);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeTreeModel_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (model != null) {
        model.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeTreeModel_argsStandardSchemeFactory implements SchemeFactory {
      public storeTreeModel_argsStandardScheme getScheme() {
        return new storeTreeModel_argsStandardScheme();
      }
    }

    private static class storeTreeModel_argsStandardScheme extends StandardScheme<storeTreeModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeTreeModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.model = new TreeModel();
                struct.model.read(iprot);
                struct.setModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeTreeModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        if (struct.model != null) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          struct.model.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeTreeModel_argsTupleSchemeFactory implements SchemeFactory {
      public storeTreeModel_argsTupleScheme getScheme() {
        return new storeTreeModel_argsTupleScheme();
      }
    }

    private static class storeTreeModel_argsTupleScheme extends TupleScheme<storeTreeModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeTreeModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        if (struct.isSetModel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
        if (struct.isSetModel()) {
          struct.model.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeTreeModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.model = new TreeModel();
          struct.model.read(iprot);
          struct.setModelIsSet(true);
        }
      }
    }

  }

  public static class storeTreeModel_result implements org.apache.thrift.TBase<storeTreeModel_result, storeTreeModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeTreeModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeTreeModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeTreeModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeTreeModel_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeTreeModel_result.class, metaDataMap);
    }

    public storeTreeModel_result() {
    }

    public storeTreeModel_result(
      boolean success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeTreeModel_result(storeTreeModel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storeTreeModel_result deepCopy() {
      return new storeTreeModel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.rnfEx = null;
      this.svEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public storeTreeModel_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public storeTreeModel_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storeTreeModel_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeTreeModel_result)
        return this.equals((storeTreeModel_result)that);
      return false;
    }

    public boolean equals(storeTreeModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeTreeModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeTreeModel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeTreeModel_resultStandardSchemeFactory implements SchemeFactory {
      public storeTreeModel_resultStandardScheme getScheme() {
        return new storeTreeModel_resultStandardScheme();
      }
    }

    private static class storeTreeModel_resultStandardScheme extends StandardScheme<storeTreeModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeTreeModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeTreeModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeTreeModel_resultTupleSchemeFactory implements SchemeFactory {
      public storeTreeModel_resultTupleScheme getScheme() {
        return new storeTreeModel_resultTupleScheme();
      }
    }

    private static class storeTreeModel_resultTupleScheme extends TupleScheme<storeTreeModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeTreeModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeTreeModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class storePipelineTransformEvent_args implements org.apache.thrift.TBase<storePipelineTransformEvent_args, storePipelineTransformEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<storePipelineTransformEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storePipelineTransformEvent_args");

    private static final org.apache.thrift.protocol.TField TE_FIELD_DESC = new org.apache.thrift.protocol.TField("te", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storePipelineTransformEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storePipelineTransformEvent_argsTupleSchemeFactory());
    }

    public List<TransformEvent> te; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TE((short)1, "te");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TE
            return TE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TE, new org.apache.thrift.meta_data.FieldMetaData("te", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformEvent.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storePipelineTransformEvent_args.class, metaDataMap);
    }

    public storePipelineTransformEvent_args() {
    }

    public storePipelineTransformEvent_args(
      List<TransformEvent> te)
    {
      this();
      this.te = te;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storePipelineTransformEvent_args(storePipelineTransformEvent_args other) {
      if (other.isSetTe()) {
        List<TransformEvent> __this__te = new ArrayList<TransformEvent>(other.te.size());
        for (TransformEvent other_element : other.te) {
          __this__te.add(new TransformEvent(other_element));
        }
        this.te = __this__te;
      }
    }

    public storePipelineTransformEvent_args deepCopy() {
      return new storePipelineTransformEvent_args(this);
    }

    @Override
    public void clear() {
      this.te = null;
    }

    public int getTeSize() {
      return (this.te == null) ? 0 : this.te.size();
    }

    public java.util.Iterator<TransformEvent> getTeIterator() {
      return (this.te == null) ? null : this.te.iterator();
    }

    public void addToTe(TransformEvent elem) {
      if (this.te == null) {
        this.te = new ArrayList<TransformEvent>();
      }
      this.te.add(elem);
    }

    public List<TransformEvent> getTe() {
      return this.te;
    }

    public storePipelineTransformEvent_args setTe(List<TransformEvent> te) {
      this.te = te;
      return this;
    }

    public void unsetTe() {
      this.te = null;
    }

    /** Returns true if field te is set (has been assigned a value) and false otherwise */
    public boolean isSetTe() {
      return this.te != null;
    }

    public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((List<TransformEvent>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storePipelineTransformEvent_args)
        return this.equals((storePipelineTransformEvent_args)that);
      return false;
    }

    public boolean equals(storePipelineTransformEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_te = true && (isSetTe());
      list.add(present_te);
      if (present_te)
        list.add(te);

      return list.hashCode();
    }

    @Override
    public int compareTo(storePipelineTransformEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTe()).compareTo(other.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, other.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storePipelineTransformEvent_args(");
      boolean first = true;

      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storePipelineTransformEvent_argsStandardSchemeFactory implements SchemeFactory {
      public storePipelineTransformEvent_argsStandardScheme getScheme() {
        return new storePipelineTransformEvent_argsStandardScheme();
      }
    }

    private static class storePipelineTransformEvent_argsStandardScheme extends StandardScheme<storePipelineTransformEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storePipelineTransformEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list610 = iprot.readListBegin();
                  struct.te = new ArrayList<TransformEvent>(_list610.size);
                  TransformEvent _elem611;
                  for (int _i612 = 0; _i612 < _list610.size; ++_i612)
                  {
                    _elem611 = new TransformEvent();
                    _elem611.read(iprot);
                    struct.te.add(_elem611);
                  }
                  iprot.readListEnd();
                }
                struct.setTeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storePipelineTransformEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.te != null) {
          oprot.writeFieldBegin(TE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.te.size()));
            for (TransformEvent _iter613 : struct.te)
            {
              _iter613.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storePipelineTransformEvent_argsTupleSchemeFactory implements SchemeFactory {
      public storePipelineTransformEvent_argsTupleScheme getScheme() {
        return new storePipelineTransformEvent_argsTupleScheme();
      }
    }

    private static class storePipelineTransformEvent_argsTupleScheme extends TupleScheme<storePipelineTransformEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storePipelineTransformEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTe()) {
          {
            oprot.writeI32(struct.te.size());
            for (TransformEvent _iter614 : struct.te)
            {
              _iter614.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storePipelineTransformEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list615 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.te = new ArrayList<TransformEvent>(_list615.size);
            TransformEvent _elem616;
            for (int _i617 = 0; _i617 < _list615.size; ++_i617)
            {
              _elem616 = new TransformEvent();
              _elem616.read(iprot);
              struct.te.add(_elem616);
            }
          }
          struct.setTeIsSet(true);
        }
      }
    }

  }

  public static class storePipelineTransformEvent_result implements org.apache.thrift.TBase<storePipelineTransformEvent_result, storePipelineTransformEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<storePipelineTransformEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storePipelineTransformEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IER_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ierEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storePipelineTransformEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storePipelineTransformEvent_resultTupleSchemeFactory());
    }

    public List<TransformEventResponse> success; // required
    public InvalidExperimentRunException ierEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IER_EX((short)1, "ierEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IER_EX
            return IER_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransformEventResponse.class))));
      tmpMap.put(_Fields.IER_EX, new org.apache.thrift.meta_data.FieldMetaData("ierEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storePipelineTransformEvent_result.class, metaDataMap);
    }

    public storePipelineTransformEvent_result() {
    }

    public storePipelineTransformEvent_result(
      List<TransformEventResponse> success,
      InvalidExperimentRunException ierEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.ierEx = ierEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storePipelineTransformEvent_result(storePipelineTransformEvent_result other) {
      if (other.isSetSuccess()) {
        List<TransformEventResponse> __this__success = new ArrayList<TransformEventResponse>(other.success.size());
        for (TransformEventResponse other_element : other.success) {
          __this__success.add(new TransformEventResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIerEx()) {
        this.ierEx = new InvalidExperimentRunException(other.ierEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public storePipelineTransformEvent_result deepCopy() {
      return new storePipelineTransformEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ierEx = null;
      this.svEx = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TransformEventResponse> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TransformEventResponse elem) {
      if (this.success == null) {
        this.success = new ArrayList<TransformEventResponse>();
      }
      this.success.add(elem);
    }

    public List<TransformEventResponse> getSuccess() {
      return this.success;
    }

    public storePipelineTransformEvent_result setSuccess(List<TransformEventResponse> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidExperimentRunException getIerEx() {
      return this.ierEx;
    }

    public storePipelineTransformEvent_result setIerEx(InvalidExperimentRunException ierEx) {
      this.ierEx = ierEx;
      return this;
    }

    public void unsetIerEx() {
      this.ierEx = null;
    }

    /** Returns true if field ierEx is set (has been assigned a value) and false otherwise */
    public boolean isSetIerEx() {
      return this.ierEx != null;
    }

    public void setIerExIsSet(boolean value) {
      if (!value) {
        this.ierEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public storePipelineTransformEvent_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TransformEventResponse>)value);
        }
        break;

      case IER_EX:
        if (value == null) {
          unsetIerEx();
        } else {
          setIerEx((InvalidExperimentRunException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IER_EX:
        return getIerEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IER_EX:
        return isSetIerEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storePipelineTransformEvent_result)
        return this.equals((storePipelineTransformEvent_result)that);
      return false;
    }

    public boolean equals(storePipelineTransformEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ierEx = true && this.isSetIerEx();
      boolean that_present_ierEx = true && that.isSetIerEx();
      if (this_present_ierEx || that_present_ierEx) {
        if (!(this_present_ierEx && that_present_ierEx))
          return false;
        if (!this.ierEx.equals(that.ierEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ierEx = true && (isSetIerEx());
      list.add(present_ierEx);
      if (present_ierEx)
        list.add(ierEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(storePipelineTransformEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIerEx()).compareTo(other.isSetIerEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIerEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ierEx, other.ierEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storePipelineTransformEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ierEx:");
      if (this.ierEx == null) {
        sb.append("null");
      } else {
        sb.append(this.ierEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storePipelineTransformEvent_resultStandardSchemeFactory implements SchemeFactory {
      public storePipelineTransformEvent_resultStandardScheme getScheme() {
        return new storePipelineTransformEvent_resultStandardScheme();
      }
    }

    private static class storePipelineTransformEvent_resultStandardScheme extends StandardScheme<storePipelineTransformEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storePipelineTransformEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list618 = iprot.readListBegin();
                  struct.success = new ArrayList<TransformEventResponse>(_list618.size);
                  TransformEventResponse _elem619;
                  for (int _i620 = 0; _i620 < _list618.size; ++_i620)
                  {
                    _elem619 = new TransformEventResponse();
                    _elem619.read(iprot);
                    struct.success.add(_elem619);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IER_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ierEx = new InvalidExperimentRunException();
                struct.ierEx.read(iprot);
                struct.setIerExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storePipelineTransformEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TransformEventResponse _iter621 : struct.success)
            {
              _iter621.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ierEx != null) {
          oprot.writeFieldBegin(IER_EX_FIELD_DESC);
          struct.ierEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storePipelineTransformEvent_resultTupleSchemeFactory implements SchemeFactory {
      public storePipelineTransformEvent_resultTupleScheme getScheme() {
        return new storePipelineTransformEvent_resultTupleScheme();
      }
    }

    private static class storePipelineTransformEvent_resultTupleScheme extends TupleScheme<storePipelineTransformEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storePipelineTransformEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIerEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TransformEventResponse _iter622 : struct.success)
            {
              _iter622.write(oprot);
            }
          }
        }
        if (struct.isSetIerEx()) {
          struct.ierEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storePipelineTransformEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list623 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TransformEventResponse>(_list623.size);
            TransformEventResponse _elem624;
            for (int _i625 = 0; _i625 < _list623.size; ++_i625)
            {
              _elem624 = new TransformEventResponse();
              _elem624.read(iprot);
              struct.success.add(_elem624);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ierEx = new InvalidExperimentRunException();
          struct.ierEx.read(iprot);
          struct.setIerExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class computeModelAncestry_args implements org.apache.thrift.TBase<computeModelAncestry_args, computeModelAncestry_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeModelAncestry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeModelAncestry_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new computeModelAncestry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new computeModelAncestry_argsTupleSchemeFactory());
    }

    public int modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeModelAncestry_args.class, metaDataMap);
    }

    public computeModelAncestry_args() {
    }

    public computeModelAncestry_args(
      int modelId)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeModelAncestry_args(computeModelAncestry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
    }

    public computeModelAncestry_args deepCopy() {
      return new computeModelAncestry_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public computeModelAncestry_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof computeModelAncestry_args)
        return this.equals((computeModelAncestry_args)that);
      return false;
    }

    public boolean equals(computeModelAncestry_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(computeModelAncestry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("computeModelAncestry_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeModelAncestry_argsStandardSchemeFactory implements SchemeFactory {
      public computeModelAncestry_argsStandardScheme getScheme() {
        return new computeModelAncestry_argsStandardScheme();
      }
    }

    private static class computeModelAncestry_argsStandardScheme extends StandardScheme<computeModelAncestry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeModelAncestry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeModelAncestry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeModelAncestry_argsTupleSchemeFactory implements SchemeFactory {
      public computeModelAncestry_argsTupleScheme getScheme() {
        return new computeModelAncestry_argsTupleScheme();
      }
    }

    private static class computeModelAncestry_argsTupleScheme extends TupleScheme<computeModelAncestry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeModelAncestry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeModelAncestry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class computeModelAncestry_result implements org.apache.thrift.TBase<computeModelAncestry_result, computeModelAncestry_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeModelAncestry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeModelAncestry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new computeModelAncestry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new computeModelAncestry_resultTupleSchemeFactory());
    }

    public ModelAncestryResponse success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelAncestryResponse.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeModelAncestry_result.class, metaDataMap);
    }

    public computeModelAncestry_result() {
    }

    public computeModelAncestry_result(
      ModelAncestryResponse success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeModelAncestry_result(computeModelAncestry_result other) {
      if (other.isSetSuccess()) {
        this.success = new ModelAncestryResponse(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public computeModelAncestry_result deepCopy() {
      return new computeModelAncestry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public ModelAncestryResponse getSuccess() {
      return this.success;
    }

    public computeModelAncestry_result setSuccess(ModelAncestryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public computeModelAncestry_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public computeModelAncestry_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ModelAncestryResponse)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof computeModelAncestry_result)
        return this.equals((computeModelAncestry_result)that);
      return false;
    }

    public boolean equals(computeModelAncestry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(computeModelAncestry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("computeModelAncestry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeModelAncestry_resultStandardSchemeFactory implements SchemeFactory {
      public computeModelAncestry_resultStandardScheme getScheme() {
        return new computeModelAncestry_resultStandardScheme();
      }
    }

    private static class computeModelAncestry_resultStandardScheme extends StandardScheme<computeModelAncestry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeModelAncestry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ModelAncestryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeModelAncestry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeModelAncestry_resultTupleSchemeFactory implements SchemeFactory {
      public computeModelAncestry_resultTupleScheme getScheme() {
        return new computeModelAncestry_resultTupleScheme();
      }
    }

    private static class computeModelAncestry_resultTupleScheme extends TupleScheme<computeModelAncestry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeModelAncestry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeModelAncestry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ModelAncestryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

  public static class extractPipeline_args implements org.apache.thrift.TBase<extractPipeline_args, extractPipeline_args._Fields>, java.io.Serializable, Cloneable, Comparable<extractPipeline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extractPipeline_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extractPipeline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extractPipeline_argsTupleSchemeFactory());
    }

    public int modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODELID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extractPipeline_args.class, metaDataMap);
    }

    public extractPipeline_args() {
    }

    public extractPipeline_args(
      int modelId)
    {
      this();
      this.modelId = modelId;
      setModelIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extractPipeline_args(extractPipeline_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.modelId = other.modelId;
    }

    public extractPipeline_args deepCopy() {
      return new extractPipeline_args(this);
    }

    @Override
    public void clear() {
      setModelIdIsSet(false);
      this.modelId = 0;
    }

    public int getModelId() {
      return this.modelId;
    }

    public extractPipeline_args setModelId(int modelId) {
      this.modelId = modelId;
      setModelIdIsSet(true);
      return this;
    }

    public void unsetModelId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return EncodingUtils.testBit(__isset_bitfield, __MODELID_ISSET_ID);
    }

    public void setModelIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODELID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extractPipeline_args)
        return this.equals((extractPipeline_args)that);
      return false;
    }

    public boolean equals(extractPipeline_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true;
      boolean that_present_modelId = true;
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (this.modelId != that.modelId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_modelId = true;
      list.add(present_modelId);
      if (present_modelId)
        list.add(modelId);

      return list.hashCode();
    }

    @Override
    public int compareTo(extractPipeline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(other.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, other.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extractPipeline_args(");
      boolean first = true;

      sb.append("modelId:");
      sb.append(this.modelId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extractPipeline_argsStandardSchemeFactory implements SchemeFactory {
      public extractPipeline_argsStandardScheme getScheme() {
        return new extractPipeline_argsStandardScheme();
      }
    }

    private static class extractPipeline_argsStandardScheme extends StandardScheme<extractPipeline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extractPipeline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modelId = iprot.readI32();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extractPipeline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeI32(struct.modelId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extractPipeline_argsTupleSchemeFactory implements SchemeFactory {
      public extractPipeline_argsTupleScheme getScheme() {
        return new extractPipeline_argsTupleScheme();
      }
    }

    private static class extractPipeline_argsTupleScheme extends TupleScheme<extractPipeline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extractPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeI32(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extractPipeline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readI32();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class extractPipeline_result implements org.apache.thrift.TBase<extractPipeline_result, extractPipeline_result._Fields>, java.io.Serializable, Cloneable, Comparable<extractPipeline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extractPipeline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField RNF_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("rnfEx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SV_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("svEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extractPipeline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extractPipeline_resultTupleSchemeFactory());
    }

    public ExtractedPipelineResponse success; // required
    public ResourceNotFoundException rnfEx; // required
    public ServerLogicException svEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RNF_EX((short)1, "rnfEx"),
      SV_EX((short)2, "svEx");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RNF_EX
            return RNF_EX;
          case 2: // SV_EX
            return SV_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExtractedPipelineResponse.class)));
      tmpMap.put(_Fields.RNF_EX, new org.apache.thrift.meta_data.FieldMetaData("rnfEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SV_EX, new org.apache.thrift.meta_data.FieldMetaData("svEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extractPipeline_result.class, metaDataMap);
    }

    public extractPipeline_result() {
    }

    public extractPipeline_result(
      ExtractedPipelineResponse success,
      ResourceNotFoundException rnfEx,
      ServerLogicException svEx)
    {
      this();
      this.success = success;
      this.rnfEx = rnfEx;
      this.svEx = svEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extractPipeline_result(extractPipeline_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExtractedPipelineResponse(other.success);
      }
      if (other.isSetRnfEx()) {
        this.rnfEx = new ResourceNotFoundException(other.rnfEx);
      }
      if (other.isSetSvEx()) {
        this.svEx = new ServerLogicException(other.svEx);
      }
    }

    public extractPipeline_result deepCopy() {
      return new extractPipeline_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.rnfEx = null;
      this.svEx = null;
    }

    public ExtractedPipelineResponse getSuccess() {
      return this.success;
    }

    public extractPipeline_result setSuccess(ExtractedPipelineResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ResourceNotFoundException getRnfEx() {
      return this.rnfEx;
    }

    public extractPipeline_result setRnfEx(ResourceNotFoundException rnfEx) {
      this.rnfEx = rnfEx;
      return this;
    }

    public void unsetRnfEx() {
      this.rnfEx = null;
    }

    /** Returns true if field rnfEx is set (has been assigned a value) and false otherwise */
    public boolean isSetRnfEx() {
      return this.rnfEx != null;
    }

    public void setRnfExIsSet(boolean value) {
      if (!value) {
        this.rnfEx = null;
      }
    }

    public ServerLogicException getSvEx() {
      return this.svEx;
    }

    public extractPipeline_result setSvEx(ServerLogicException svEx) {
      this.svEx = svEx;
      return this;
    }

    public void unsetSvEx() {
      this.svEx = null;
    }

    /** Returns true if field svEx is set (has been assigned a value) and false otherwise */
    public boolean isSetSvEx() {
      return this.svEx != null;
    }

    public void setSvExIsSet(boolean value) {
      if (!value) {
        this.svEx = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExtractedPipelineResponse)value);
        }
        break;

      case RNF_EX:
        if (value == null) {
          unsetRnfEx();
        } else {
          setRnfEx((ResourceNotFoundException)value);
        }
        break;

      case SV_EX:
        if (value == null) {
          unsetSvEx();
        } else {
          setSvEx((ServerLogicException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RNF_EX:
        return getRnfEx();

      case SV_EX:
        return getSvEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RNF_EX:
        return isSetRnfEx();
      case SV_EX:
        return isSetSvEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extractPipeline_result)
        return this.equals((extractPipeline_result)that);
      return false;
    }

    public boolean equals(extractPipeline_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_rnfEx = true && this.isSetRnfEx();
      boolean that_present_rnfEx = true && that.isSetRnfEx();
      if (this_present_rnfEx || that_present_rnfEx) {
        if (!(this_present_rnfEx && that_present_rnfEx))
          return false;
        if (!this.rnfEx.equals(that.rnfEx))
          return false;
      }

      boolean this_present_svEx = true && this.isSetSvEx();
      boolean that_present_svEx = true && that.isSetSvEx();
      if (this_present_svEx || that_present_svEx) {
        if (!(this_present_svEx && that_present_svEx))
          return false;
        if (!this.svEx.equals(that.svEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_rnfEx = true && (isSetRnfEx());
      list.add(present_rnfEx);
      if (present_rnfEx)
        list.add(rnfEx);

      boolean present_svEx = true && (isSetSvEx());
      list.add(present_svEx);
      if (present_svEx)
        list.add(svEx);

      return list.hashCode();
    }

    @Override
    public int compareTo(extractPipeline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRnfEx()).compareTo(other.isSetRnfEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRnfEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rnfEx, other.rnfEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSvEx()).compareTo(other.isSetSvEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSvEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.svEx, other.svEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extractPipeline_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rnfEx:");
      if (this.rnfEx == null) {
        sb.append("null");
      } else {
        sb.append(this.rnfEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("svEx:");
      if (this.svEx == null) {
        sb.append("null");
      } else {
        sb.append(this.svEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extractPipeline_resultStandardSchemeFactory implements SchemeFactory {
      public extractPipeline_resultStandardScheme getScheme() {
        return new extractPipeline_resultStandardScheme();
      }
    }

    private static class extractPipeline_resultStandardScheme extends StandardScheme<extractPipeline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extractPipeline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExtractedPipelineResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RNF_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rnfEx = new ResourceNotFoundException();
                struct.rnfEx.read(iprot);
                struct.setRnfExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SV_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.svEx = new ServerLogicException();
                struct.svEx.read(iprot);
                struct.setSvExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extractPipeline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.rnfEx != null) {
          oprot.writeFieldBegin(RNF_EX_FIELD_DESC);
          struct.rnfEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.svEx != null) {
          oprot.writeFieldBegin(SV_EX_FIELD_DESC);
          struct.svEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extractPipeline_resultTupleSchemeFactory implements SchemeFactory {
      public extractPipeline_resultTupleScheme getScheme() {
        return new extractPipeline_resultTupleScheme();
      }
    }

    private static class extractPipeline_resultTupleScheme extends TupleScheme<extractPipeline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extractPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRnfEx()) {
          optionals.set(1);
        }
        if (struct.isSetSvEx()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetRnfEx()) {
          struct.rnfEx.write(oprot);
        }
        if (struct.isSetSvEx()) {
          struct.svEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extractPipeline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ExtractedPipelineResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rnfEx = new ResourceNotFoundException();
          struct.rnfEx.read(iprot);
          struct.setRnfExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.svEx = new ServerLogicException();
          struct.svEx.read(iprot);
          struct.setSvExIsSet(true);
        }
      }
    }

  }

}
